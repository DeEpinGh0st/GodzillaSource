<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE api SYSTEM "CompletionXml.dtd">

<!--
   php.xml - API specification for PHP.
           Used by RSyntaxTextArea to provide code completion.

   Author:         Robert Futrell
   Version:        0.1

   This file was generated from: D:/dev/rsta/RSTALanguageSupport/data/php/php.txt
   on date: 2014-05-11 17:03:29

-->
<api language="PHP">

	<environment paramStartChar="(" paramEndChar=")" paramSeparator=", " terminal=";"/>

	<keywords>


<keyword name="abs" type="function" returnType="number">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>abs</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$number</code></span>    )</div>  <p class="para rdfs-comment">   Returns the absolute value of <code class="parameter">number</code>.   </p>]]></desc>
	<params>
		<param type="mixed" name="number"/>
	</params>
</keyword>
<keyword name="acos" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>acos</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the arc cosine of <code class="parameter">arg</code> in radians.   <span class="function"><strong>acos()</strong></span> is the complementary function of   <span class="function"><a href="function.cos.php" class="function">cos()</a></span>, which means that   <em>a==cos(acos(a))</em> for every value of a that is within   <span class="function"><strong>acos()</strong></span>&#039; range.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="acosh" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>acosh</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the inverse hyperbolic cosine of   <code class="parameter">arg</code>, i.e. the value whose   hyperbolic cosine is <code class="parameter">arg</code>.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="addcslashes" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>addcslashes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with backslashes before characters that are   listed in <code class="parameter">charlist</code> parameter.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charlist"/>
	</params>
</keyword>
<keyword name="addFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filepath"/>
		<param type="string" name="entryname"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="addFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filepath"/>
		<param type="string" name="entryname"/>
		<param type="int" name="start"/>
	</params>
</keyword>
<keyword name="addFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filepath"/>
		<param type="string" name="entryname"/>
	</params>
</keyword>
<keyword name="addFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filepath"/>
	</params>
</keyword>
<keyword name="addFromString" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="addslashes" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>addslashes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with backslashes before characters that need to be   escaped. These characters are single quote (<em>&#039;</em>),   double quote (<em>&quot;</em>), backslash   (<em>\</em>) and NUL (the <strong><code>NULL</code></strong> byte).  </p>  <p class="para">   An example use of <span class="function"><strong>addslashes()</strong></span> is when you&#039;re   entering data into string that is evaluated by PHP. For example,   <em>O&#039;reilly</em> is stored in $str, you need to escape   $str. (e.g.  eval(&quot;echo &#039;&quot;.addslashes($str).&quot;&#039;;&quot;); )  </p>  <p class="para">   To escape database parameters, DBMS specific escape function   (e.g. <span class="function"><a href="mysqli.real-escape-string.php" class="function">mysqli_real_escape_string()</a></span> for MySQL or   <span class="function"><a href="function.pg-escape-literal.php" class="function">pg_escape_literal()</a></span>, <span class="function"><a href="function.pg-escape-string.php" class="function">pg_escape_string()</a></span>   for PostgreSQL) should be used for security reasons.  DBMSes have   differect escape specification for identifiers (e.g. Table name,   field name) than parameters. Some DBMS such as PostgreSQL provides   identifier escape   function, <span class="function"><a href="function.pg-escape-identifier.php" class="function">pg_escape_identifier()</a></span>, but not all   DBMS provides identifier escape API. If this is the case, refer to   your database system manual for proper escaping method.  </p>  <p class="para">   If your DBMS doesn&#039;t have an escape function and the DBMS   uses <em>\</em> to escape special chars, you might be   able to use this function only when this escape method is adequate for   your database. Please note that use   of <span class="function"><strong>addslashes()</strong></span> for database parameter escaping   can be cause of security issues on most databases.  </p>  <p class="para">   The PHP directive <a href="info.configuration.php#ini.magic-quotes-gpc" class="link">   magic_quotes_gpc</a> was <em>on</em> by default before   PHP 5.4, and it essentially ran <span class="function"><strong>addslashes()</strong></span> on   all GET, POST, and COOKIE data.  Do not   use <span class="function"><strong>addslashes()</strong></span> on strings that have already   been escaped with   <a href="info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a> as you&#039;ll   then do double escaping.  The function   <span class="function"><a href="function.get-magic-quotes-gpc.php" class="function">get_magic_quotes_gpc()</a></span> may come in handy for   checking this.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="apache_child_terminate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>apache_child_terminate</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>apache_child_terminate()</strong></span> will register the   Apache process executing the current PHP request for termination   once execution of PHP code is completed. It may be used to   terminate a process after a script with high memory consumption has   been run as memory will usually only be freed internally but not   given back to the operating system.   </p>]]></desc>
</keyword>
<keyword name="apache_get_modules" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>apache_get_modules</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Get a list of loaded Apache modules.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_get_version" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>apache_get_version</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Fetch the Apache version.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_getenv" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>apache_getenv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$walk_to_top</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieve an Apache environment variable specified by    <code class="parameter">variable</code>.  </p>  <p class="para">   This function requires Apache 2 otherwise it&#039;s undefined.  </p>]]></desc>
	<params>
		<param type="string" name="variable"/>
		<param type="bool" name="walk_to_top"/>
	</params>
</keyword>
<keyword name="apache_getenv" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>apache_getenv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$walk_to_top</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieve an Apache environment variable specified by    <code class="parameter">variable</code>.  </p>  <p class="para">   This function requires Apache 2 otherwise it&#039;s undefined.  </p>]]></desc>
	<params>
		<param type="string" name="variable"/>
	</params>
</keyword>
<keyword name="apache_lookup_uri" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>apache_lookup_uri</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   This performs a partial request for a URI.  It goes just far   enough to obtain all the important information about the given   resource.  </p>  <p class="simpara">This function is only supported when PHPis installed as an Apache module.</p>]]></desc>
	<params>
		<param type="string" name="URI"/>
	</params>
</keyword>
<keyword name="apache_note" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>apache_note</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$note_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$note_value</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is a wrapper for Apache&#039;s <em>table_get</em> and   <em>table_set</em>. It edits the table of notes that exists   during a request. The table&#039;s purpose is to allow Apache modules to   communicate.  </p>  <p class="para">   The main use for <span class="function"><strong>apache_note()</strong></span> is to pass information   from one module to another within the same request.  </p>]]></desc>
	<params>
		<param type="string" name="note_name"/>
		<param type="string" name="note_value"/>
	</params>
</keyword>
<keyword name="apache_note" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>apache_note</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$note_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$note_value</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is a wrapper for Apache&#039;s <em>table_get</em> and   <em>table_set</em>. It edits the table of notes that exists   during a request. The table&#039;s purpose is to allow Apache modules to   communicate.  </p>  <p class="para">   The main use for <span class="function"><strong>apache_note()</strong></span> is to pass information   from one module to another within the same request.  </p>]]></desc>
	<params>
		<param type="string" name="note_name"/>
	</params>
</keyword>
<keyword name="apache_request_auth_name" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_auth_type" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_discard_request_body" type="function" returnType="long">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_err_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
		<param type="string" name="value"/>
		<param type="bool" name="replace"/>
	</params>
</keyword>
<keyword name="apache_request_err_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="apache_request_err_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
	</params>
</keyword>
<keyword name="apache_request_err_headers_out" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="apache_request_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>apache_request_headers</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Fetches all HTTP request headers from the current request.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_headers_in" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
		<param type="string" name="value"/>
		<param type="bool" name="replace"/>
	</params>
</keyword>
<keyword name="apache_request_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="apache_request_headers_out" type="function" returnType="array">
	<params>
		<param type="{string" name="name"/>
	</params>
</keyword>
<keyword name="apache_request_headers_out" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="apache_request_is_initial_req" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_log_error" type="function" returnType="boolean">
	<params>
		<param type="string" name="message"/>
		<param type="long" name="facility"/>
	</params>
</keyword>
<keyword name="apache_request_log_error" type="function" returnType="boolean">
	<params>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="apache_request_meets_conditions" type="function" returnType="long">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_remote_host" type="function" returnType="int">
	<params>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="apache_request_remote_host" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="apache_request_run" type="function" returnType="long">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_satisfies" type="function" returnType="long">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_server_port" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_set_etag" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_set_last_modified" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_some_auth_required" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_request_sub_req_lookup_file" type="function" returnType="object">
	<params>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="apache_request_sub_req_lookup_uri" type="function" returnType="object">
	<params>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="apache_request_sub_req_method_uri" type="function" returnType="object">
	<params>
		<param type="string" name="method"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="apache_request_update_mtime" type="function" returnType="long">
	<params>
		<param type="int" name="dependency_mtime"/>
	</params>
</keyword>
<keyword name="apache_request_update_mtime" type="function" returnType="long">
	<params>
	</params>
</keyword>
<keyword name="apache_reset_timeout" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>apache_reset_timeout</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>apache_reset_timeout()</strong></span> resets the Apache write timer,   which defaults to 300 seconds. With <em>set_time_limit(0);   ignore_user_abort(true)</em> and periodic   <span class="function"><strong>apache_reset_timeout()</strong></span> calls, Apache can theoretically   run forever.  </p>  <p class="para">   This function requires Apache 1.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_response_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>apache_response_headers</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Fetch all HTTP response headers.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="apache_setenv" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>apache_setenv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$walk_to_top</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>apache_setenv()</strong></span> sets the value of the Apache   environment variable specified by   <code class="parameter">variable</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When setting an Apache environment variable, the corresponding     <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER</a></var></var>    variable is not changed.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="$variable"/>
		<param type="string" name="$value"/>
		<param type="bool" name="$walk_to_top"/>
	</params>
</keyword>
<keyword name="apache_setenv" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>apache_setenv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$walk_to_top</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>apache_setenv()</strong></span> sets the value of the Apache   environment variable specified by   <code class="parameter">variable</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When setting an Apache environment variable, the corresponding     <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER</a></var></var>    variable is not changed.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="$variable"/>
		<param type="string" name="$value"/>
	</params>
</keyword>
<keyword name="ApacheRequest::allowed" type="function" returnType="int">
	<params>
		<param type="int" name="allowed"/>
	</params>
</keyword>
<keyword name="ApacheRequest::allowed" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::args" type="function" returnType="string">
	<params>
		<param type="string" name="new_args"/>
	</params>
</keyword>
<keyword name="ApacheRequest::args" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::assbackwards" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::boundary" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::bytes_sent" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::chunked" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::content_encoding" type="function" returnType="string">
	<params>
		<param type="string" name="new_encoding"/>
	</params>
</keyword>
<keyword name="ApacheRequest::content_encoding" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::content_length" type="function" returnType="int">
	<params>
		<param type="int" name="new_content_length"/>
	</params>
</keyword>
<keyword name="ApacheRequest::content_length" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::content_type" type="function" returnType="string">
	<params>
		<param type="string" name="new_type"/>
	</params>
</keyword>
<keyword name="ApacheRequest::content_type" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::filename" type="function" returnType="string">
	<params>
		<param type="string" name="new_filename"/>
	</params>
</keyword>
<keyword name="ApacheRequest::filename" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::handler" type="function" returnType="string">
	<params>
		<param type="string" name="new_handler"/>
	</params>
</keyword>
<keyword name="ApacheRequest::handler" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::header_only" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::hostname" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::method" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::method_number" type="function" returnType="int">
	<params>
		<param type="int" name="method_number"/>
	</params>
</keyword>
<keyword name="ApacheRequest::method_number" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::mtime" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::no_cache" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::no_local_copy" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::path_info" type="function" returnType="string">
	<params>
		<param type="string" name="new_path_info"/>
	</params>
</keyword>
<keyword name="ApacheRequest::path_info" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::proto_num" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::protocol" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::proxyreq" type="function" returnType="int">
	<params>
		<param type="int" name="new_proxyreq"/>
	</params>
</keyword>
<keyword name="ApacheRequest::proxyreq" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::read_body" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::remaining" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::request_time" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::status" type="function" returnType="int">
	<params>
		<param type="int" name="new_status"/>
	</params>
</keyword>
<keyword name="ApacheRequest::status" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::status_line" type="function" returnType="string">
	<params>
		<param type="string" name="new_status_line"/>
	</params>
</keyword>
<keyword name="ApacheRequest::status_line" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::the_request" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ApacheRequest::unparsed_uri" type="function" returnType="string">
	<params>
		<param type="string" name="new_unparsed_uri"/>
	</params>
</keyword>
<keyword name="ApacheRequest::unparsed_uri" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="ApacheRequest::uri" type="function" returnType="string">
	<params>
		<param type="string" name="new_uri"/>
	</params>
</keyword>
<keyword name="ApacheRequest::uri" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="AppendIterator::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="AppendIterator::append" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
	</params>
</keyword>
<keyword name="AppendIterator::getArrayIterator" type="function" returnType="ArrayIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="AppendIterator::getIteratorIndex" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="AppendIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="AppendIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="AppendIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="array_change_key_case" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_change_key_case</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$case</code><span class="initializer"> = CASE_LOWER</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array with all keys from <code class="parameter">array</code> lowercased   or uppercased. Numbered indices are left as is.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="int" name="case"/>
	</params>
</keyword>
<keyword name="array_change_key_case" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_change_key_case</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$case</code><span class="initializer"> = CASE_LOWER</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array with all keys from <code class="parameter">array</code> lowercased   or uppercased. Numbered indices are left as is.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_chunk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_chunk</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$preserve_keys</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Chunks an array into arrays with <code class="parameter">size</code> elements.   The last chunk may contain less than <code class="parameter">size</code> elements.  </p>]]></desc>
	<params>
		<param type="array" name="$input"/>
		<param type="int" name="$size"/>
		<param type="bool" name="$preserve_keys"/>
	</params>
</keyword>
<keyword name="array_chunk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_chunk</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$preserve_keys</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Chunks an array into arrays with <code class="parameter">size</code> elements.   The last chunk may contain less than <code class="parameter">size</code> elements.  </p>]]></desc>
	<params>
		<param type="array" name="$input"/>
		<param type="int" name="$size"/>
	</params>
</keyword>
<keyword name="array_combine" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_combine</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$keys</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>   )</div>  <p class="para rdfs-comment">   Creates an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> by using the values from the   <code class="parameter">keys</code> array as keys and the values from the   <code class="parameter">values</code> array as the corresponding values.  </p>]]></desc>
	<params>
		<param type="array" name="keys"/>
		<param type="array" name="values"/>
	</params>
</keyword>
<keyword name="array_diff" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against one or more other arrays and   returns the values in <code class="parameter">array1</code> that are not present in   any of the other arrays.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_diff" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against one or more other arrays and   returns the values in <code class="parameter">array1</code> that are not present in   any of the other arrays.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_diff_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against <code class="parameter">array2</code> and   returns the difference. Unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> the array   keys are also used in the comparison.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_diff_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against <code class="parameter">array2</code> and   returns the difference. Unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> the array   keys are also used in the comparison.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_diff_key" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_key</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares the keys from <code class="parameter">array1</code> against the keys   from <code class="parameter">array2</code> and returns the difference.   This function is like <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> except the   comparison is done on the keys instead of the values.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_diff_key" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_key</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Compares the keys from <code class="parameter">array1</code> against the keys   from <code class="parameter">array2</code> and returns the difference.   This function is like <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> except the   comparison is done on the keys instead of the values.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_diff_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against <code class="parameter">array2</code> and   returns the difference. Unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> the array   keys are used in the comparison.  </p>  <p class="para">   Unlike <span class="function"><a href="function.array-diff-assoc.php" class="function">array_diff_assoc()</a></span> an user supplied callback   function is used for the indices comparison, not internal function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="key_comp_func"/>
	</params>
</keyword>
<keyword name="array_diff_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">array1</code> against <code class="parameter">array2</code> and   returns the difference. Unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> the array   keys are used in the comparison.  </p>  <p class="para">   Unlike <span class="function"><a href="function.array-diff-assoc.php" class="function">array_diff_assoc()</a></span> an user supplied callback   function is used for the indices comparison, not internal function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_diff_ukey" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_ukey</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Compares the keys from <code class="parameter">array1</code> against the keys   from <code class="parameter">array2</code> and returns the difference.   This function is like <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> except the   comparison is done on the keys instead of the values.  </p>  <p class="para">   Unlike <span class="function"><a href="function.array-diff-key.php" class="function">array_diff_key()</a></span> a user supplied callback   function is used for the indices comparison, not internal function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="key_comp_func"/>
	</params>
</keyword>
<keyword name="array_diff_ukey" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_diff_ukey</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Compares the keys from <code class="parameter">array1</code> against the keys   from <code class="parameter">array2</code> and returns the difference.   This function is like <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> except the   comparison is done on the keys instead of the values.  </p>  <p class="para">   Unlike <span class="function"><a href="function.array-diff-key.php" class="function">array_diff_key()</a></span> a user supplied callback   function is used for the indices comparison, not internal function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_fill" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_fill</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$start_index</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$num</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Fills an array with   <code class="parameter">num</code> entries of the value of the   <code class="parameter">value</code> parameter, keys starting at the   <code class="parameter">start_index</code> parameter.  </p>]]></desc>
	<params>
		<param type="int" name="start_key"/>
		<param type="int" name="num"/>
		<param type="mixed" name="val"/>
	</params>
</keyword>
<keyword name="array_fill_keys" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_fill_keys</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$keys</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Fills an array with the   value of the <code class="parameter">value</code> parameter, using the   values of the <code class="parameter">keys</code> array as keys.  </p>]]></desc>
	<params>
		<param type="array" name="keys"/>
		<param type="mixed" name="val"/>
	</params>
</keyword>
<keyword name="array_filter" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_filter</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code><span class="initializer"> = array()</span></span>   [, <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code><span class="initializer"> = Function()</span></span>  ] )</div>  <p class="para rdfs-comment">   Iterates over each value in the <code class="parameter">array</code>   passing them to the <code class="parameter">callback</code> function.   If the <code class="parameter">callback</code> function returns true, the   current value from <code class="parameter">array</code> is returned into   the result array. Array keys are preserved.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="callback"/>
	</params>
</keyword>
<keyword name="array_filter" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_filter</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code><span class="initializer"> = array()</span></span>   [, <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code><span class="initializer"> = Function()</span></span>  ] )</div>  <p class="para rdfs-comment">   Iterates over each value in the <code class="parameter">array</code>   passing them to the <code class="parameter">callback</code> function.   If the <code class="parameter">callback</code> function returns true, the   current value from <code class="parameter">array</code> is returned into   the result array. Array keys are preserved.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_flip" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_flip</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_flip()</strong></span> returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> in flip   order, i.e. keys from <code class="parameter">array</code> become values and values   from <code class="parameter">array</code> become keys.  </p>  <p class="para">   Note that the values of <code class="parameter">array</code> need to be valid   keys, i.e. they need to be either <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> or   <span class="type"><a href="language.types.string.php" class="type string">string</a></span>. A warning will be emitted if a value has the wrong   type, and the key/value pair in question <em class="emphasis">will not be included   in the result</em>.  </p>  <p class="para">   If a value has several occurrences, the latest key will be   used as its value, and all others will be lost.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_intersect" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments.   Note that keys are preserved.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_intersect" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments.   Note that keys are preserved.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_intersect_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>array_intersect_assoc()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments. Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-intersect.php" class="function">array_intersect()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_intersect_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>array_intersect_assoc()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments. Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-intersect.php" class="function">array_intersect()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_intersect_key" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_key</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_key()</strong></span> returns an array   containing all the entries of <code class="parameter">array1</code>   which have keys that are present in all the arguments.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_intersect_key" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_key</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_key()</strong></span> returns an array   containing all the entries of <code class="parameter">array1</code>   which have keys that are present in all the arguments.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_intersect_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_uassoc()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments. Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-intersect.php" class="function">array_intersect()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="key_compare_func"/>
	</params>
</keyword>
<keyword name="array_intersect_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_uassoc()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   that are present in all the arguments. Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-intersect.php" class="function">array_intersect()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_intersect_ukey" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_ukey</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_ukey()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   which have matching keys that are present in all the arguments.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="key_compare_func"/>
	</params>
</keyword>
<keyword name="array_intersect_ukey" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_intersect_ukey</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_intersect_ukey()</strong></span> returns an array   containing all the values of <code class="parameter">array1</code>   which have matching keys that are present in all the arguments.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_key_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_key_exists</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_key_exists()</strong></span> returns <strong><code>TRUE</code></strong> if the   given <code class="parameter">key</code> is set in the array.   <code class="parameter">key</code> can be any value possible   for an array index.  </p>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="array" name="search"/>
	</params>
</keyword>
<keyword name="array_keys" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_keys</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search_value</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_keys()</strong></span> returns the keys, numeric and   string, from the <code class="parameter">array</code>.  </p>  <p class="para">   If the optional <code class="parameter">search_value</code> is specified,   then only the keys for that value are returned. Otherwise, all   the keys from the <code class="parameter">array</code> are returned.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="search_value"/>
		<param type="bool" name="strict"/>
	</params>
</keyword>
<keyword name="array_keys" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_keys</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search_value</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_keys()</strong></span> returns the keys, numeric and   string, from the <code class="parameter">array</code>.  </p>  <p class="para">   If the optional <code class="parameter">search_value</code> is specified,   then only the keys for that value are returned. Otherwise, all   the keys from the <code class="parameter">array</code> are returned.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="search_value"/>
	</params>
</keyword>
<keyword name="array_keys" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_keys</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search_value</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_keys()</strong></span> returns the keys, numeric and   string, from the <code class="parameter">array</code>.  </p>  <p class="para">   If the optional <code class="parameter">search_value</code> is specified,   then only the keys for that value are returned. Otherwise, all   the keys from the <code class="parameter">array</code> are returned.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_map" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_map</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_map()</strong></span> returns an array containing all   the elements of <code class="parameter">array1</code> after applying the   <code class="parameter">callback</code> function to each one.   The number of parameters that the <code class="parameter">callback</code>   function accepts   should match the number of arrays   passed to the <span class="function"><strong>array_map()</strong></span>  </p>]]></desc>
	<params>
		<param type="mixed" name="callback"/>
		<param type="array" name="input1"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_map" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_map</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_map()</strong></span> returns an array containing all   the elements of <code class="parameter">array1</code> after applying the   <code class="parameter">callback</code> function to each one.   The number of parameters that the <code class="parameter">callback</code>   function accepts   should match the number of arrays   passed to the <span class="function"><strong>array_map()</strong></span>  </p>]]></desc>
	<params>
		<param type="mixed" name="callback"/>
		<param type="array" name="input1"/>
	</params>
</keyword>
<keyword name="array_merge" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_merge</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Merges the elements of one or more arrays together so that the values of   one are appended to the end of the previous one. It returns the resulting   array.  </p>  <p class="para">   If the input arrays have the same string keys, then the later value for   that key will overwrite the previous one.  If, however, the arrays   contain numeric keys, the later value will <em class="emphasis">not</em> overwrite the original value, but will be   appended.  </p>  <p class="para">   Values in the input array with numeric keys will be renumbered with   incrementing keys starting from zero in the result array.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_merge" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_merge</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Merges the elements of one or more arrays together so that the values of   one are appended to the end of the previous one. It returns the resulting   array.  </p>  <p class="para">   If the input arrays have the same string keys, then the later value for   that key will overwrite the previous one.  If, however, the arrays   contain numeric keys, the later value will <em class="emphasis">not</em> overwrite the original value, but will be   appended.  </p>  <p class="para">   Values in the input array with numeric keys will be renumbered with   incrementing keys starting from zero in the result array.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_merge_recursive" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_merge_recursive</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_merge_recursive()</strong></span> merges the elements of   one or more arrays together so that the values of one are appended   to the end of the previous one.  It returns the resulting array.  </p>  <p class="para">   If the input arrays have the same string keys, then the values for   these keys are merged together into an array, and this is done   recursively, so that if one of the values is an array itself, the   function will merge it with a corresponding entry in another array   too. If, however, the arrays have the same numeric key, the later   value will not overwrite the original value, but will be appended.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
	</params>
</keyword>
<keyword name="array_merge_recursive" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_merge_recursive</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_merge_recursive()</strong></span> merges the elements of   one or more arrays together so that the values of one are appended   to the end of the previous one.  It returns the resulting array.  </p>  <p class="para">   If the input arrays have the same string keys, then the values for   these keys are merged together into an array, and this is done   recursively, so that if one of the values is an array itself, the   function will merge it with a corresponding entry in another array   too. If, however, the arrays have the same numeric key, the later   value will not overwrite the original value, but will be appended.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_multisort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_multisort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_order</code><span class="initializer"> = SORT_ASC</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_multisort()</strong></span> can be used to sort several   arrays at once, or a multi-dimensional array by one or more   dimensions.  </p>  <p class="para">   Associative (<span class="type"><a href="language.types.string.php" class="type string">string</a></span>) keys will be maintained, but numeric   keys will be re-indexed.  </p>]]></desc>
	<params>
		<param type="array" name="ar1"/>
		<param type="mixed" name="arg"/>
		<param type="mixed" name="arg2"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="array_multisort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_multisort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_order</code><span class="initializer"> = SORT_ASC</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_multisort()</strong></span> can be used to sort several   arrays at once, or a multi-dimensional array by one or more   dimensions.  </p>  <p class="para">   Associative (<span class="type"><a href="language.types.string.php" class="type string">string</a></span>) keys will be maintained, but numeric   keys will be re-indexed.  </p>]]></desc>
	<params>
		<param type="array" name="ar1"/>
		<param type="mixed" name="arg"/>
		<param type="mixed" name="arg2"/>
	</params>
</keyword>
<keyword name="array_multisort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_multisort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_order</code><span class="initializer"> = SORT_ASC</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_multisort()</strong></span> can be used to sort several   arrays at once, or a multi-dimensional array by one or more   dimensions.  </p>  <p class="para">   Associative (<span class="type"><a href="language.types.string.php" class="type string">string</a></span>) keys will be maintained, but numeric   keys will be re-indexed.  </p>]]></desc>
	<params>
		<param type="array" name="ar1"/>
		<param type="mixed" name="arg"/>
	</params>
</keyword>
<keyword name="array_multisort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_multisort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_order</code><span class="initializer"> = SORT_ASC</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array1_sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_multisort()</strong></span> can be used to sort several   arrays at once, or a multi-dimensional array by one or more   dimensions.  </p>  <p class="para">   Associative (<span class="type"><a href="language.types.string.php" class="type string">string</a></span>) keys will be maintained, but numeric   keys will be re-indexed.  </p>]]></desc>
	<params>
		<param type="array" name="ar1"/>
	</params>
</keyword>
<keyword name="array_pad" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_pad</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_pad()</strong></span> returns a copy of the   <code class="parameter">array</code> padded to size specified by   <code class="parameter">size</code> with value   <code class="parameter">value</code>. If   <code class="parameter">size</code> is positive then the array is   padded on the right, if it&#039;s negative then on the left. If the   absolute value of <code class="parameter">size</code> is less than or   equal to the length of the <code class="parameter">array</code> then no   padding takes place.   It is possible to add at most 1048576 elements at a time.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="int" name="pad_size"/>
		<param type="mixed" name="pad_value"/>
	</params>
</keyword>
<keyword name="array_product" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>array_product</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_product()</strong></span> returns the product of values   in an array.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_push" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>array_push</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_push()</strong></span> treats <code class="parameter">array</code> as a   stack, and pushes the passed variables onto the end of   <code class="parameter">array</code>. The length of <code class="parameter">array</code>   increases by the number of variables pushed. Has the same effect as:   <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">$var</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>   </div>   repeated for each passed value.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    If you use <span class="function"><strong>array_push()</strong></span> to add one element to the    array it&#039;s better to use <em>$array[] = </em> because in that    way there is no overhead of calling a function.   </span>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    <span class="function"><strong>array_push()</strong></span> will raise a warning if the first    argument is not an array. This differs from the    <em>$var[]</em> behaviour where a new array is created.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="array" name="stack"/>
		<param type="mixed" name="var"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="array_push" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>array_push</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_push()</strong></span> treats <code class="parameter">array</code> as a   stack, and pushes the passed variables onto the end of   <code class="parameter">array</code>. The length of <code class="parameter">array</code>   increases by the number of variables pushed. Has the same effect as:   <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">$var</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>   </div>   repeated for each passed value.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    If you use <span class="function"><strong>array_push()</strong></span> to add one element to the    array it&#039;s better to use <em>$array[] = </em> because in that    way there is no overhead of calling a function.   </span>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    <span class="function"><strong>array_push()</strong></span> will raise a warning if the first    argument is not an array. This differs from the    <em>$var[]</em> behaviour where a new array is created.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="array" name="stack"/>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="array_slice" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_slice</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$preserve_keys</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_slice()</strong></span> returns the sequence of elements   from the array <code class="parameter">array</code> as specified by the   <code class="parameter">offset</code> and <code class="parameter">length</code>   parameters.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
		<param type="bool" name="preserve_keys"/>
	</params>
</keyword>
<keyword name="array_slice" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_slice</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$preserve_keys</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_slice()</strong></span> returns the sequence of elements   from the array <code class="parameter">array</code> as specified by the   <code class="parameter">offset</code> and <code class="parameter">length</code>   parameters.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="array_slice" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_slice</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$preserve_keys</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_slice()</strong></span> returns the sequence of elements   from the array <code class="parameter">array</code> as specified by the   <code class="parameter">offset</code> and <code class="parameter">length</code>   parameters.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="array_udiff" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays by using a callback function for data   comparison. This is unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> which uses an   internal function for comparing the data.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_comp_func"/>
	</params>
</keyword>
<keyword name="array_udiff" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays by using a callback function for data   comparison. This is unlike <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> which uses an   internal function for comparing the data.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_udiff_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays with additional index check, compares   data by a callback function.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    Please note that this function only checks one dimension of a n-dimensional    array. Of course you can check deeper dimensions by using, for example,    <em>array_udiff_assoc($array1[0], $array2[0], &quot;some_comparison_func&quot;);</em>.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_comp_func"/>
	</params>
</keyword>
<keyword name="array_udiff_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays with additional index check, compares   data by a callback function.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    Please note that this function only checks one dimension of a n-dimensional    array. Of course you can check deeper dimensions by using, for example,    <em>array_udiff_assoc($array1[0], $array2[0], &quot;some_comparison_func&quot;);</em>.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_udiff_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays with additional index check, compares   data and indexes by a callback function.  </p>  <p class="para">   Note that the keys are used in the comparison unlike   <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> and <span class="function"><a href="function.array-udiff.php" class="function">array_udiff()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_comp_func"/>
		<param type="callback" name="key_comp_func"/>
	</params>
</keyword>
<keyword name="array_udiff_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_udiff_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the difference of arrays with additional index check, compares   data and indexes by a callback function.  </p>  <p class="para">   Note that the keys are used in the comparison unlike   <span class="function"><a href="function.array-diff.php" class="function">array_diff()</a></span> and <span class="function"><a href="function.array-udiff.php" class="function">array_udiff()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_uintersect" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays, compares data by a callback function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_compare_func"/>
	</params>
</keyword>
<keyword name="array_uintersect" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays, compares data by a callback function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_uintersect_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays with additional index check, compares   data by a callback function.  </p>  <p class="para">   Note that the keys are used in the comparison unlike in   <span class="function"><a href="function.array-uintersect.php" class="function">array_uintersect()</a></span>.   The data is compared by using a callback function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_compare_func"/>
	</params>
</keyword>
<keyword name="array_uintersect_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect_assoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays with additional index check, compares   data by a callback function.  </p>  <p class="para">   Note that the keys are used in the comparison unlike in   <span class="function"><a href="function.array-uintersect.php" class="function">array_uintersect()</a></span>.   The data is compared by using a callback function.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_uintersect_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays with additional index check, compares   data and indexes by a callback functions Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-uintersect.php" class="function">array_uintersect()</a></span>.   Both the data and the indexes are compared by using separate callback functions.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
		<param type="array" name="..."/>
		<param type="callback" name="data_compare_func"/>
		<param type="callback" name="key_compare_func"/>
	</params>
</keyword>
<keyword name="array_uintersect_uassoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_uintersect_uassoc</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array1</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$array2</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$...</code></span>   ], <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   Computes the intersection of arrays with additional index check, compares   data and indexes by a callback functions Note that the keys are used in   the comparison unlike in <span class="function"><a href="function.array-uintersect.php" class="function">array_uintersect()</a></span>.   Both the data and the indexes are compared by using separate callback functions.  </p>]]></desc>
	<params>
		<param type="array" name="arr1"/>
		<param type="array" name="arr2"/>
	</params>
</keyword>
<keyword name="array_unshift" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>array_unshift</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_unshift()</strong></span> prepends passed elements to the front   of the <code class="parameter">array</code>. Note that the list of elements is   prepended as a whole, so that the prepended elements stay in the same   order.  All numerical array keys will be modified to start counting from   zero while literal keys won&#039;t be touched.  </p>]]></desc>
	<params>
		<param type="array" name="stack"/>
		<param type="mixed" name="var"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="array_unshift" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>array_unshift</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_unshift()</strong></span> prepends passed elements to the front   of the <code class="parameter">array</code>. Note that the list of elements is   prepended as a whole, so that the prepended elements stay in the same   order.  All numerical array keys will be modified to start counting from   zero while literal keys won&#039;t be touched.  </p>]]></desc>
	<params>
		<param type="array" name="stack"/>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="array_values" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>array_values</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>array_values()</strong></span> returns all the values from the   <code class="parameter">array</code> and indexes the array numerically.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="array_walk" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_walk</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="simpara">   Applies the user-defined <code class="parameter">callback</code> function to each   element of the <code class="parameter">array</code> array.  </p>  <p class="para">   <span class="function"><strong>array_walk()</strong></span> is not affected by the internal array   pointer of <code class="parameter">array</code>.  <span class="function"><strong>array_walk()</strong></span>   will walk through the entire array regardless of pointer position.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="callback"/>
		<param type="mixed" name="userdata"/>
	</params>
</keyword>
<keyword name="array_walk" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_walk</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="simpara">   Applies the user-defined <code class="parameter">callback</code> function to each   element of the <code class="parameter">array</code> array.  </p>  <p class="para">   <span class="function"><strong>array_walk()</strong></span> is not affected by the internal array   pointer of <code class="parameter">array</code>.  <span class="function"><strong>array_walk()</strong></span>   will walk through the entire array regardless of pointer position.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="callback"/>
	</params>
</keyword>
<keyword name="array_walk_recursive" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_walk_recursive</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Applies the user-defined <code class="parameter">callback</code> function to each   element of the <code class="parameter">array</code>. This function will recurse   into deeper arrays.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="callback"/>
		<param type="mixed" name="userdata"/>
	</params>
</keyword>
<keyword name="array_walk_recursive" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>array_walk_recursive</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Applies the user-defined <code class="parameter">callback</code> function to each   element of the <code class="parameter">array</code>. This function will recurse   into deeper arrays.  </p>]]></desc>
	<params>
		<param type="array" name="input"/>
		<param type="mixed" name="callback"/>
	</params>
</keyword>
<keyword name="ArrayIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayIterator::seek" type="function" returnType="void">
	<params>
		<param type="int" name="$position"/>
	</params>
</keyword>
<keyword name="ArrayIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::__construct" type="function" returnType="void">
	<params>
		<param type="array|object" name="ar"/>
		<param type="int" name="flags"/>
		<param type="string" name="iterator_class"/>
	</params>
</keyword>
<keyword name="ArrayObject::__construct" type="function" returnType="void">
	<params>
		<param type="array|object" name="ar"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="ArrayObject::__construct" type="function" returnType="void">
	<params>
		<param type="array|object" name="ar"/>
	</params>
</keyword>
<keyword name="ArrayObject::append" type="function" returnType="void">
	<params>
		<param type="mixed" name="$newval"/>
	</params>
</keyword>
<keyword name="ArrayObject::asort" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::count" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::getFlags" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::getIterator" type="function" returnType="ArrayIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::getIteratorClass" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::ksort" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::natcasesort" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::natsort" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ArrayObject::offsetExists" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$index"/>
	</params>
</keyword>
<keyword name="ArrayObject::offsetGet" type="function" returnType="mixed">
	<params>
		<param type="mixed" name="$index"/>
	</params>
</keyword>
<keyword name="ArrayObject::offsetSet" type="function" returnType="void">
	<params>
		<param type="mixed" name="$index"/>
		<param type="mixed" name="$newval"/>
	</params>
</keyword>
<keyword name="ArrayObject::offsetUnset" type="function" returnType="void">
	<params>
		<param type="mixed" name="$index"/>
	</params>
</keyword>
<keyword name="ArrayObject::setFlags" type="function" returnType="void">
	<params>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="ArrayObject::setIteratorClass" type="function" returnType="void">
	<params>
		<param type="string" name="iterator_class"/>
	</params>
</keyword>
<keyword name="ArrayObject::uasort" type="function" returnType="int">
	<params>
		<param type="callback" name="cmp_function"/>
	</params>
</keyword>
<keyword name="ArrayObject::uksort" type="function" returnType="int">
	<params>
		<param type="callback" name="cmp_function"/>
	</params>
</keyword>
<keyword name="arsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>arsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array such that array indices maintain their   correlation with the array elements they are associated with.  </p>  <p class="para">   This is used mainly when sorting associative arrays where the actual   element order is significant.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="arsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>arsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array such that array indices maintain their   correlation with the array elements they are associated with.  </p>  <p class="para">   This is used mainly when sorting associative arrays where the actual   element order is significant.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="asin" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>asin</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the arc sine of <code class="parameter">arg</code> in radians.   <span class="function"><strong>asin()</strong></span> is the complementary function of   <span class="function"><a href="function.sin.php" class="function">sin()</a></span>, which means that   <em>a==sin(asin(a))</em> for every value of a that is within   <span class="function"><strong>asin()</strong></span>&#039;s range.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="asinh" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>asinh</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the inverse hyperbolic sine of   <code class="parameter">arg</code>, i.e. the value whose   hyperbolic sine is <code class="parameter">arg</code>.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="asort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>asort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array such that array indices maintain   their correlation with the array elements they are associated   with.  This is used mainly when sorting associative arrays where   the actual element order is significant.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="asort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>asort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array such that array indices maintain   their correlation with the array elements they are associated   with.  This is used mainly when sorting associative arrays where   the actual element order is significant.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="assert" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>assert</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$assertion</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$description</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>assert()</strong></span> will check the given   <code class="parameter">assertion</code> and take appropriate action if   its result is <strong><code>FALSE</code></strong>.  </p>  <p class="para">   If the <code class="parameter">assertion</code> is given as a string it   will be evaluated as PHP code by <span class="function"><strong>assert()</strong></span>.   The advantages of a string <code class="parameter">assertion</code> are   less overhead when assertion checking is off and messages   containing the <code class="parameter">assertion</code> expression when   an assertion fails. This means that if you pass a boolean condition   as <code class="parameter">assertion</code> this condition will not show up as   parameter to the assertion function which you may have defined with the   <span class="function"><a href="function.assert-options.php" class="function">assert_options()</a></span> function, the condition is converted   to a string before calling that handler function, and the boolean <strong><code>FALSE</code></strong>   is converted as the empty string.  </p>  <p class="para">   Assertions should be used as a debugging feature only. You may   use them for sanity-checks that test for conditions that should   always be <strong><code>TRUE</code></strong> and that indicate some programming errors if not   or to check for the presence of certain features like extension   functions or certain system limits and features.  </p>  <p class="para">   Assertions should not be used for normal runtime operations like   input parameter checks. As a rule of thumb your code should   always be able to work correctly if assertion checking is not   activated.  </p>  <p class="para">   The behavior of <span class="function"><strong>assert()</strong></span> may be configured by   <span class="function"><a href="function.assert-options.php" class="function">assert_options()</a></span> or by .ini-settings described   in that functions manual page.  </p>  <p class="para">   The <span class="function"><a href="function.assert-options.php" class="function">assert_options()</a></span> function and/or   <strong><code>ASSERT_CALLBACK</code></strong> configuration directive allow a   callback function to be set to handle failed assertions.  </p>  <p class="para">   <span class="function"><strong>assert()</strong></span> callbacks are particularly useful for   building automated test suites because they allow you to easily   capture the code passed to the assertion, along with information   on where the assertion was made. While this information can be   captured via other methods, using assertions makes it much faster   and easier!  </p>  <p class="para">   The callback function should accept three arguments. The first   argument will contain the file the assertion failed in. The   second argument will contain the line the assertion failed on and   the third argument will contain the expression that failed (if   any � literal values such as 1 or &quot;two&quot; will not be passed via   this argument). Users of PHP 5.4.8 and later may also provide a fourth   optional argument, which will contain the   <code class="parameter">description</code> given to <span class="function"><strong>assert()</strong></span>, if   it was set.  </p>]]></desc>
	<params>
		<param type="string|bool" name="assertion"/>
	</params>
</keyword>
<keyword name="assert_options" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>assert_options</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$what</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>  ] )</div>  <p class="para rdfs-comment">   Set the various <span class="function"><a href="function.assert.php" class="function">assert()</a></span> control options or just query   their current settings.  </p>]]></desc>
	<params>
		<param type="int" name="what"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="assert_options" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>assert_options</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$what</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>  ] )</div>  <p class="para rdfs-comment">   Set the various <span class="function"><a href="function.assert.php" class="function">assert()</a></span> control options or just query   their current settings.  </p>]]></desc>
	<params>
		<param type="int" name="what"/>
	</params>
</keyword>
<keyword name="atan" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>atan</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the arc tangent of <code class="parameter">arg</code> in radians.   <span class="function"><strong>atan()</strong></span> is the complementary function of   <span class="function"><a href="function.tan.php" class="function">tan()</a></span>, which means that   <em>a==tan(atan(a))</em> for every value of a that is within   <span class="function"><strong>atan()</strong></span>&#039;s range.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="atanh" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>atanh</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the inverse hyperbolic tangent of   <code class="parameter">arg</code>, i.e. the value whose   hyperbolic tangent is <code class="parameter">arg</code>.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="base_convert" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>base_convert</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$number</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$frombase</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$tobase</code></span>    )</div>  <p class="para rdfs-comment">   Returns a string containing <code class="parameter">number</code>   represented in base <code class="parameter">tobase</code>.  The base in   which <code class="parameter">number</code> is given is specified in   <code class="parameter">frombase</code>.  Both   <code class="parameter">frombase</code> and <code class="parameter">tobase</code>   have to be between 2 and 36, inclusive.  Digits in numbers with a   base higher than 10 will be represented with the letters a-z,   with a meaning 10, b meaning 11 and z meaning 35.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    <span class="function"><strong>base_convert()</strong></span> may lose precision on large numbers    due to properties related to the internal &quot;double&quot; or &quot;float&quot; type used.    Please see the <a href="language.types.float.php" class="link">Floating point numbers</a>    section in the manual for more specific information and limitations.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="number"/>
		<param type="int" name="frombase"/>
		<param type="int" name="tobase"/>
	</params>
</keyword>
<keyword name="basename" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>basename</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$suffix</code></span>  ] )</div>  <p class="para rdfs-comment">   Given a string containing the path to a file or directory, this function   will return the trailing name component.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="string" name="suffix"/>
	</params>
</keyword>
<keyword name="basename" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>basename</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$suffix</code></span>  ] )</div>  <p class="para rdfs-comment">   Given a string containing the path to a file or directory, this function   will return the trailing name component.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="bcadd" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcadd</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code></span>  ] )</div>  <p class="para rdfs-comment">   Sums <code class="parameter">left_operand</code> and   <code class="parameter">right_operand</code>.  </p>]]></desc>
	<params>
		<param type="string" name="left_operand"/>
		<param type="string" name="right_operand"/>
		<param type="int" name="scale"/>
	</params>
</keyword>
<keyword name="bcadd" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcadd</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code></span>  ] )</div>  <p class="para rdfs-comment">   Sums <code class="parameter">left_operand</code> and   <code class="parameter">right_operand</code>.  </p>]]></desc>
	<params>
		<param type="string" name="left_operand"/>
		<param type="string" name="right_operand"/>
	</params>
</keyword>
<keyword name="bcpowmod" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcpowmod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$modulus</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code><span class="initializer"> = int</span></span>  ] )</div>  <p class="para rdfs-comment">   Use the fast-exponentiation method to raise    <code class="parameter">left_operand</code> to the power   <code class="parameter">right_operand</code> with respect to the modulus   <code class="parameter">modulus</code>.  </p>]]></desc>
	<params>
		<param type="string" name="x"/>
		<param type="string" name="y"/>
		<param type="string" name="mod"/>
		<param type="int" name="scale"/>
	</params>
</keyword>
<keyword name="bcpowmod" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcpowmod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$modulus</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code><span class="initializer"> = int</span></span>  ] )</div>  <p class="para rdfs-comment">   Use the fast-exponentiation method to raise    <code class="parameter">left_operand</code> to the power   <code class="parameter">right_operand</code> with respect to the modulus   <code class="parameter">modulus</code>.  </p>]]></desc>
	<params>
		<param type="string" name="x"/>
		<param type="string" name="y"/>
		<param type="string" name="mod"/>
	</params>
</keyword>
<keyword name="bcsub" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcsub</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code><span class="initializer"> = int</span></span>  ] )</div>  <p class="para rdfs-comment">   Subtracts the <code class="parameter">right_operand</code> from the   <code class="parameter">left_operand</code>.  </p>]]></desc>
	<params>
		<param type="string" name="left_operand"/>
		<param type="string" name="right_operand"/>
		<param type="int" name="scale"/>
	</params>
</keyword>
<keyword name="bcsub" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bcsub</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$left_operand</code><span class="initializer"> = &quot;&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$right_operand</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scale</code><span class="initializer"> = int</span></span>  ] )</div>  <p class="para rdfs-comment">   Subtracts the <code class="parameter">right_operand</code> from the   <code class="parameter">left_operand</code>.  </p>]]></desc>
	<params>
		<param type="string" name="left_operand"/>
		<param type="string" name="right_operand"/>
	</params>
</keyword>
<keyword name="bindec" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>bindec</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$binary_string</code></span>    )</div>  <p class="para rdfs-comment">   Returns the decimal equivalent of the binary number represented by   the <code class="parameter">binary_string</code> argument.  </p>  <p class="para">   <span class="function"><strong>bindec()</strong></span> converts a binary number to an   <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> or, if needed for size reasons, <span class="type"><a href="language.types.float.php" class="type float">float</a></span>.  </p>  <p class="para">   <span class="function"><strong>bindec()</strong></span> interprets all   <code class="parameter">binary_string</code> values as unsigned   integers. This is because <span class="function"><strong>bindec()</strong></span> sees   the most significant bit as another order of magnitude   rather than as the sign bit.  </p>]]></desc>
	<params>
		<param type="string" name="binary_number"/>
	</params>
</keyword>
<keyword name="bindtextdomain" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bindtextdomain</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>bindtextdomain()</strong></span> function sets the path   for a domain.  </p>]]></desc>
	<params>
		<param type="string" name="domain_name"/>
		<param type="string" name="dir"/>
	</params>
</keyword>
<keyword name="birdstep_autocommit" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_close" type="function" returnType="bool">
	<params>
		<param type="int" name="id"/>
	</params>
</keyword>
<keyword name="birdstep_commit" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_connect" type="function" returnType="int">
	<params>
		<param type="string" name="server"/>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
	</params>
</keyword>
<keyword name="birdstep_exec" type="function" returnType="int">
	<params>
		<param type="int" name="index"/>
		<param type="string" name="exec_str"/>
	</params>
</keyword>
<keyword name="birdstep_fetch" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_fieldname" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="birdstep_fieldnum" type="function" returnType="int">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_freeresult" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_off_autocommit" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="birdstep_result" type="function" returnType="mixed">
	<params>
		<param type="int" name="index"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="birdstep_rollback" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="bzcompress" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>bzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$blocksize</code><span class="initializer"> = 4</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$workfactor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzcompress()</strong></span> compresses the given string and returns   it as bzip2 encoded data.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
		<param type="int" name="blocksize100k"/>
		<param type="int" name="workfactor"/>
	</params>
</keyword>
<keyword name="bzcompress" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>bzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$blocksize</code><span class="initializer"> = 4</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$workfactor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzcompress()</strong></span> compresses the given string and returns   it as bzip2 encoded data.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
		<param type="int" name="blocksize100k"/>
	</params>
</keyword>
<keyword name="bzcompress" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>bzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$blocksize</code><span class="initializer"> = 4</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$workfactor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzcompress()</strong></span> compresses the given string and returns   it as bzip2 encoded data.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="bzdecompress" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>bzdecompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$small</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzdecompress()</strong></span> decompresses the given string containing   bzip2 encoded data.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
		<param type="int" name="small"/>
	</params>
</keyword>
<keyword name="bzdecompress" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>bzdecompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$small</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzdecompress()</strong></span> decompresses the given string containing   bzip2 encoded data.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="bzerrno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>bzerrno</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bz</code></span>   )</div>  <p class="para rdfs-comment">   Returns the error number of any bzip2 error returned by the given file   pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="bz"/>
	</params>
</keyword>
<keyword name="bzerror" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>bzerror</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bz</code></span>   )</div>  <p class="para rdfs-comment">   Returns the error number and error string of any bzip2 error returned by    the given file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="bz"/>
	</params>
</keyword>
<keyword name="bzerrstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bzerrstr</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bz</code></span>   )</div>  <p class="para rdfs-comment">   Gets the error string of any bzip2 error returned by the given file   pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="bz"/>
	</params>
</keyword>
<keyword name="bzopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>bzopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzopen()</strong></span> opens a bzip2 (.bz2) file for reading or   writing.  </p>]]></desc>
	<params>
		<param type="string|int" name="file"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="bzread" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bzread</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bz</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 1024</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzread()</strong></span> reads from the given bzip2 file pointer.  </p>  <p class="para">   Reading stops when <code class="parameter">length</code> (uncompressed) bytes have   been read or EOF is reached, whichever comes first.    </p>]]></desc>
	<params>
		<param type="resource" name="bz"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="bzread" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>bzread</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bz</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 1024</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>bzread()</strong></span> reads from the given bzip2 file pointer.  </p>  <p class="para">   Reading stops when <code class="parameter">length</code> (uncompressed) bytes have   been read or EOF is reached, whichever comes first.    </p>]]></desc>
	<params>
		<param type="resource" name="bz"/>
	</params>
</keyword>
<keyword name="CachingIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
		<param type="" name="flags"/>
	</params>
</keyword>
<keyword name="CachingIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
	</params>
</keyword>
<keyword name="CachingIterator::__toString" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::count" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::getCache" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::getFlags" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::hasNext" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::offsetExists" type="function" returnType="bool">
	<params>
		<param type="mixed" name="index"/>
	</params>
</keyword>
<keyword name="CachingIterator::offsetGet" type="function" returnType="string">
	<params>
		<param type="mixed" name="index"/>
	</params>
</keyword>
<keyword name="CachingIterator::offsetSet" type="function" returnType="void">
	<params>
		<param type="mixed" name="index"/>
		<param type="mixed" name="newval"/>
	</params>
</keyword>
<keyword name="CachingIterator::offsetUnset" type="function" returnType="void">
	<params>
		<param type="mixed" name="index"/>
	</params>
</keyword>
<keyword name="CachingIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="CachingIterator::setFlags" type="function" returnType="void">
	<params>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="CachingIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="cal_days_in_month" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>cal_days_in_month</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$calendar</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   This function will return the number of days in the   <code class="parameter">month</code> of <code class="parameter">year</code> for   the specified <code class="parameter">calendar</code>.  </p>]]></desc>
	<params>
		<param type="int" name="calendar"/>
		<param type="int" name="month"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="cal_from_jd" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>cal_from_jd</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$jd</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$calendar</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>cal_from_jd()</strong></span> converts the Julian day given in   <code class="parameter">jd</code> into a date of the specified   <code class="parameter">calendar</code>. Supported   <code class="parameter">calendar</code> values are   <strong><code>CAL_GREGORIAN</code></strong>,   <strong><code>CAL_JULIAN</code></strong>,   <strong><code>CAL_JEWISH</code></strong> and   <strong><code>CAL_FRENCH</code></strong>.  </p>]]></desc>
	<params>
		<param type="int" name="jd"/>
		<param type="int" name="calendar"/>
	</params>
</keyword>
<keyword name="cal_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>cal_info</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$calendar</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>cal_info()</strong></span> returns information on the   specified <code class="parameter">calendar</code>.  </p>  <p class="para">   Calendar information is returned as an array containing the   elements <em>calname</em>, <em>calsymbol</em>,   <em>month</em>, <em>abbrevmonth</em> and   <em>maxdaysinmonth</em>. The names of the different calendars    which can be used as <code class="parameter">calendar</code> are as follows:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      0 or <strong><code>CAL_GREGORIAN</code></strong> - Gregorian Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      1 or <strong><code>CAL_JULIAN</code></strong> - Julian Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      2 or <strong><code>CAL_JEWISH</code></strong> - Jewish Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      3 or <strong><code>CAL_FRENCH</code></strong> - French Revolutionary Calendar     </span>    </li>   </ul>  </p>  <p class="para">   If no <code class="parameter">calendar</code> is specified information on all   supported calendars is returned as an array.   </p>]]></desc>
	<params>
		<param type="int" name="calendar"/>
	</params>
</keyword>
<keyword name="cal_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>cal_info</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$calendar</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>cal_info()</strong></span> returns information on the   specified <code class="parameter">calendar</code>.  </p>  <p class="para">   Calendar information is returned as an array containing the   elements <em>calname</em>, <em>calsymbol</em>,   <em>month</em>, <em>abbrevmonth</em> and   <em>maxdaysinmonth</em>. The names of the different calendars    which can be used as <code class="parameter">calendar</code> are as follows:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      0 or <strong><code>CAL_GREGORIAN</code></strong> - Gregorian Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      1 or <strong><code>CAL_JULIAN</code></strong> - Julian Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      2 or <strong><code>CAL_JEWISH</code></strong> - Jewish Calendar     </span>    </li>    <li class="listitem">     <span class="simpara">      3 or <strong><code>CAL_FRENCH</code></strong> - French Revolutionary Calendar     </span>    </li>   </ul>  </p>  <p class="para">   If no <code class="parameter">calendar</code> is specified information on all   supported calendars is returned as an array.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="call_user_func" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_func</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Calls the <code class="parameter">callback</code> given by the first parameter and passes   the remaining parameters as arguments.  </p>]]></desc>
	<params>
		<param type="mixed" name="function_name"/>
		<param type="mixed" name="parmeter"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="call_user_func" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_func</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Calls the <code class="parameter">callback</code> given by the first parameter and passes   the remaining parameters as arguments.  </p>]]></desc>
	<params>
		<param type="mixed" name="function_name"/>
		<param type="mixed" name="parmeter"/>
	</params>
</keyword>
<keyword name="call_user_func" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_func</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Calls the <code class="parameter">callback</code> given by the first parameter and passes   the remaining parameters as arguments.  </p>]]></desc>
	<params>
		<param type="mixed" name="function_name"/>
	</params>
</keyword>
<keyword name="call_user_func_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_func_array</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$param_arr</code></span>   )</div>  <p class="para rdfs-comment">   Calls the <code class="parameter">callback</code> given by the first parameter with   the parameters in <code class="parameter">param_arr</code>.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
		<param type="array" name="parameters"/>
	</params>
</keyword>
<keyword name="call_user_method" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_method</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$obj</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The <span class="function"><strong>call_user_method()</strong></span> function is deprecated    as of PHP 4.1.0.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="method_name"/>
		<param type="mixed" name="object"/>
		<param type="mixed" name="parameter"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="call_user_method" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_method</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$obj</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The <span class="function"><strong>call_user_method()</strong></span> function is deprecated    as of PHP 4.1.0.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="method_name"/>
		<param type="mixed" name="object"/>
		<param type="mixed" name="parameter"/>
	</params>
</keyword>
<keyword name="call_user_method" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_method</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$obj</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The <span class="function"><strong>call_user_method()</strong></span> function is deprecated    as of PHP 4.1.0.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="method_name"/>
		<param type="mixed" name="object"/>
	</params>
</keyword>
<keyword name="call_user_method_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>call_user_method_array</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$obj</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The <span class="function"><strong>call_user_method_array()</strong></span> function is deprecated    as of PHP 4.1.0.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="method_name"/>
		<param type="mixed" name="object"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="ceil" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>ceil</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$value</code></span>    )</div>  <p class="simpara">   Returns the next highest integer value by rounding up    <code class="parameter">value</code> if necessary.   </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="char_enum_names" type="function" returnType="bool">
	<params>
		<param type="callback" name="Callback"/>
		<param type="int" name="start"/>
		<param type="int" name="limit"/>
		<param type="int" name="extended"/>
	</params>
</keyword>
<keyword name="char_enum_names" type="function" returnType="bool">
	<params>
		<param type="callback" name="Callback"/>
		<param type="int" name="start"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="char_enum_types" type="function" returnType="bool">
	<params>
		<param type="callback" name="Callback"/>
	</params>
</keyword>
<keyword name="char_from_digit" type="function" returnType="char">
	<params>
		<param type="int" name="digit"/>
		<param type="int" name="radix"/>
	</params>
</keyword>
<keyword name="char_from_digit" type="function" returnType="char">
	<params>
		<param type="int" name="digit"/>
	</params>
</keyword>
<keyword name="char_from_name" type="function" returnType="char">
	<params>
		<param type="string" name="charname"/>
		<param type="bool" name="extended"/>
	</params>
</keyword>
<keyword name="char_from_name" type="function" returnType="char">
	<params>
		<param type="string" name="charname"/>
	</params>
</keyword>
<keyword name="char_get_age" type="function" returnType="string">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_get_combining_class" type="function" returnType="int">
	<params>
		<param type="char" name="text"/>
	</params>
</keyword>
<keyword name="char_get_digit_value" type="function" returnType="int">
	<params>
		<param type="char" name="text"/>
		<param type="int" name="radix"/>
	</params>
</keyword>
<keyword name="char_get_digit_value" type="function" returnType="int">
	<params>
		<param type="char" name="text"/>
	</params>
</keyword>
<keyword name="char_get_direction" type="function" returnType="int">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_get_mirrored" type="function" returnType="char">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_get_name" type="function" returnType="string">
	<params>
		<param type="char" name="c"/>
		<param type="bool" name="extended"/>
	</params>
</keyword>
<keyword name="char_get_name" type="function" returnType="string">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_get_numeric_value" type="function" returnType="float">
	<params>
		<param type="char" name="text"/>
	</params>
</keyword>
<keyword name="char_get_property_from_name" type="function" returnType="int">
	<params>
		<param type="string" name="property_name"/>
	</params>
</keyword>
<keyword name="char_get_property_max_value" type="function" returnType="int">
	<params>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="char_get_property_min_value" type="function" returnType="int">
	<params>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="char_get_property_name" type="function" returnType="string">
	<params>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="char_get_property_value" type="function" returnType="int">
	<params>
		<param type="char" name="c"/>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="char_get_property_value_from_name" type="function" returnType="int">
	<params>
		<param type="int" name="property"/>
		<param type="string" name="value_name"/>
	</params>
</keyword>
<keyword name="char_get_property_value_name" type="function" returnType="string">
	<params>
		<param type="int" name="property"/>
		<param type="int" name="value"/>
		<param type="int" name="name_choice"/>
	</params>
</keyword>
<keyword name="char_get_property_value_name" type="function" returnType="string">
	<params>
		<param type="int" name="property"/>
		<param type="int" name="value"/>
	</params>
</keyword>
<keyword name="char_get_type" type="function" returnType="int">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_has_binary_property" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="char_is_alnum" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_alpha" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_alphabetic" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_base" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_blank" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_cntrl" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_defined" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_digit" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_graph" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_id_ignorable" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_id_part" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_id_start" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_iso_control" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_lower" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_mirrored" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_print" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_punct" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_space" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_titlecase" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_upper" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_uppercase" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_valid" type="function" returnType="bool">
	<params>
		<param type="char" name="c"/>
	</params>
</keyword>
<keyword name="char_is_whitespace" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="char_is_xdigit" type="function" returnType="bool">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="chdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>chdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   Changes PHP&#039;s current directory to    <code class="parameter">directory</code>.  </p>]]></desc>
	<params>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="checkdate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>checkdate</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   Checks the validity of the date formed by the arguments. A date   is considered valid if each parameter is properly defined.  </p>]]></desc>
	<params>
		<param type="int" name="month"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="chgrp" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>chgrp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$group</code></span>   )</div>  <p class="para rdfs-comment">   Attempts to change the group of the file <code class="parameter">filename</code>   to <code class="parameter">group</code>.  </p>  <p class="para">   Only the superuser may change the group of a file arbitrarily; other users   may change the group of a file to any group of which that user is a member.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="mixed" name="group"/>
	</params>
</keyword>
<keyword name="chmod" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>chmod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Attempts to change the mode of the specified file to that given in   <code class="parameter">mode</code>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="chr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>chr</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$ascii</code></span>   )</div>  <p class="para rdfs-comment">   Returns a one-character string containing the character specified   by <code class="parameter">ascii</code>.  </p>  <p class="para">   This function complements <span class="function"><a href="function.ord.php" class="function">ord()</a></span>.   </p>]]></desc>
	<params>
		<param type="int" name="codepoint"/>
	</params>
</keyword>
<keyword name="chroot" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>chroot</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   Changes the root directory of the current process to   <code class="parameter">directory</code>, and changes the current   working directory to &quot;/&quot;.  </p>  <p class="para">   This function is only available to GNU and BSD systems, and   only when using the CLI, CGI or Embed SAPI. Also, this function   requires root privileges.  </p>]]></desc>
	<params>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="chunk_split" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>chunk_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$body</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunklen</code><span class="initializer"> = 76</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$end</code><span class="initializer"> = &quot;\r\n&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Can be used to split a string into smaller chunks which is useful for   e.g. converting <span class="function"><a href="function.base64-encode.php" class="function">base64_encode()</a></span> output to match RFC   2045 semantics. It inserts <code class="parameter">end</code> every    <code class="parameter">chunklen</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="chunklen"/>
		<param type="string" name="ending"/>
	</params>
</keyword>
<keyword name="chunk_split" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>chunk_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$body</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunklen</code><span class="initializer"> = 76</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$end</code><span class="initializer"> = &quot;\r\n&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Can be used to split a string into smaller chunks which is useful for   e.g. converting <span class="function"><a href="function.base64-encode.php" class="function">base64_encode()</a></span> output to match RFC   2045 semantics. It inserts <code class="parameter">end</code> every    <code class="parameter">chunklen</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="chunklen"/>
	</params>
</keyword>
<keyword name="chunk_split" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>chunk_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$body</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunklen</code><span class="initializer"> = 76</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$end</code><span class="initializer"> = &quot;\r\n&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Can be used to split a string into smaller chunks which is useful for   e.g. converting <span class="function"><a href="function.base64-encode.php" class="function">base64_encode()</a></span> output to match RFC   2045 semantics. It inserts <code class="parameter">end</code> every    <code class="parameter">chunklen</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="class_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>class_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   This function checks whether or not the given class has been defined.  </p>]]></desc>
	<params>
		<param type="string" name="classname"/>
		<param type="bool" name="autoload"/>
	</params>
</keyword>
<keyword name="class_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>class_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   This function checks whether or not the given class has been defined.  </p>]]></desc>
	<params>
		<param type="string" name="classname"/>
	</params>
</keyword>
<keyword name="class_implements" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>class_implements</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$class</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns an array with the names of the interfaces that the   given <code class="parameter">class</code> and its parents implement.  </p>]]></desc>
	<params>
		<param type="mixed" name="what"/>
		<param type="bool" name="autoload "/>
	</params>
</keyword>
<keyword name="class_implements" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>class_implements</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$class</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns an array with the names of the interfaces that the   given <code class="parameter">class</code> and its parents implement.  </p>]]></desc>
	<params>
		<param type="mixed" name="what"/>
	</params>
</keyword>
<keyword name="class_parents" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>class_parents</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$class</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns an array with the name of the parent classes of   the given <code class="parameter">class</code>.  </p>]]></desc>
	<params>
		<param type="object" name="instance"/>
	</params>
</keyword>
<keyword name="clearstatcache" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>clearstatcache</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$clear_realpath_cache</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ]] )</div>  <p class="para rdfs-comment">   When you use <span class="function"><a href="function.stat.php" class="function">stat()</a></span>, <span class="function"><a href="function.lstat.php" class="function">lstat()</a></span>, or   any of the other functions listed in the affected functions list (below),   PHP caches the information those functions return in order to provide   faster performance. However, in certain cases, you may want to clear the   cached information. For instance, if the same file is being checked   multiple times within a single script, and that file is in danger of   being removed or changed during that script&#039;s operation, you may elect to   clear the status cache.  In these cases, you can use the   <span class="function"><strong>clearstatcache()</strong></span> function to clear the information   that PHP caches about a file.  </p>  <p class="para">   You should also note that PHP doesn&#039;t cache information about non-existent   files. So, if you call <span class="function"><a href="function.file-exists.php" class="function">file_exists()</a></span> on a file that   doesn&#039;t exist, it will return <strong><code>FALSE</code></strong> until you create the file. If you   create the file, it will return <strong><code>TRUE</code></strong> even if you then delete the file.   However <span class="function"><a href="function.unlink.php" class="function">unlink()</a></span> clears the cache automatically.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function caches information about specific filenames, so you only    need to call <span class="function"><strong>clearstatcache()</strong></span> if you are performing    multiple operations on the same filename and require the information    about that particular file to not be cached.   </p>  </p></blockquote>  <p class="para">   Affected functions include <span class="function"><a href="function.stat.php" class="function">stat()</a></span>,   <span class="function"><a href="function.lstat.php" class="function">lstat()</a></span>,   <span class="function"><a href="function.file-exists.php" class="function">file_exists()</a></span>,   <span class="function"><a href="function.is-writable.php" class="function">is_writable()</a></span>,   <span class="function"><a href="function.is-readable.php" class="function">is_readable()</a></span>,   <span class="function"><a href="function.is-executable.php" class="function">is_executable()</a></span>,   <span class="function"><a href="function.is-file.php" class="function">is_file()</a></span>,   <span class="function"><a href="function.is-dir.php" class="function">is_dir()</a></span>,   <span class="function"><a href="function.is-link.php" class="function">is_link()</a></span>,   <span class="function"><a href="function.filectime.php" class="function">filectime()</a></span>,   <span class="function"><a href="function.fileatime.php" class="function">fileatime()</a></span>,   <span class="function"><a href="function.filemtime.php" class="function">filemtime()</a></span>,   <span class="function"><a href="function.fileinode.php" class="function">fileinode()</a></span>,   <span class="function"><a href="function.filegroup.php" class="function">filegroup()</a></span>,   <span class="function"><a href="function.fileowner.php" class="function">fileowner()</a></span>,   <span class="function"><a href="function.filesize.php" class="function">filesize()</a></span>,   <span class="function"><a href="function.filetype.php" class="function">filetype()</a></span>, and   <span class="function"><a href="function.fileperms.php" class="function">fileperms()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="close" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="closedir" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>closedir</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dir_handle</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the directory stream indicated by   <code class="parameter">dir_handle</code>. The stream must have previously   been opened by <span class="function"><a href="function.opendir.php" class="function">opendir()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="dir_handle"/>
	</params>
</keyword>
<keyword name="closedir" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>closedir</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dir_handle</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the directory stream indicated by   <code class="parameter">dir_handle</code>. The stream must have previously   been opened by <span class="function"><a href="function.opendir.php" class="function">opendir()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="closelog" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>closelog</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>closelog()</strong></span> closes the descriptor being used to write to   the system logger.  The use of <span class="function"><strong>closelog()</strong></span> is optional.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Collator::compare" type="function" returnType="int">
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="Collator::getAttribute" type="function" returnType="int">
	<params>
		<param type="int" name="attribute"/>
	</params>
</keyword>
<keyword name="Collator::getStrength" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Collator::setAttribute" type="function" returnType="bool">
	<params>
		<param type="int" name="attribute"/>
		<param type="int" name="value"/>
	</params>
</keyword>
<keyword name="Collator::setStrength" type="function" returnType="void">
	<params>
		<param type="int" name="strength"/>
	</params>
</keyword>
<keyword name="Collator::sort" type="function" returnType="array">
	<params>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="collator_compare" type="function" returnType="int">
	<desc><![CDATA[<p class="para">   Object oriented style  </p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="type">int</span>    <span class="methodname"><strong>Collator::compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   Procedural style  </p>  <div class="methodsynopsis dc-description">   <span class="type">int</span>    <span class="methodname"><strong>collator_compare</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.collator.php" class="type Collator">Collator</a></span> <code class="parameter">$coll</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   Compare two Unicode strings according to collation rules.  </p>]]></desc>
	<params>
		<param type="Collator" name="coll"/>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="collator_create" type="function" returnType="Collator">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="modifier">static</span>   <span class="type"><a href="class.collator.php" class="type Collator">Collator</a></span>    <span class="methodname"><strong>Collator::create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$locale</code></span>   )</div>  <p class="para rdfs-comment">   Procedural style  </p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="class.collator.php" class="type Collator">Collator</a></span>    <span class="methodname"><strong>collator_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$locale</code></span>   )</div>  <p class="para rdfs-comment">   The strings will be compared using the options already specified.  </p>]]></desc>
	<params>
		<param type="string" name="locale"/>
	</params>
</keyword>
<keyword name="collator_get_attribute" type="function" returnType="int">
	<params>
		<param type="Collator" name="coll"/>
		<param type="int" name="attribute"/>
	</params>
</keyword>
<keyword name="collator_get_default" type="function" returnType="Collator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="collator_get_strength" type="function" returnType="int">
	<params>
		<param type="Collator" name="coll"/>
	</params>
</keyword>
<keyword name="collator_set_attribute" type="function" returnType="bool">
	<params>
		<param type="Collator" name="coll"/>
		<param type="int" name="attribute"/>
		<param type="int" name="value"/>
	</params>
</keyword>
<keyword name="collator_set_default" type="function" returnType="void">
	<params>
		<param type="Collator" name="coll"/>
	</params>
</keyword>
<keyword name="collator_set_strength" type="function" returnType="void">
	<params>
		<param type="Collator" name="coll"/>
		<param type="int" name="strength"/>
	</params>
</keyword>
<keyword name="collator_sort" type="function" returnType="array">
	<desc><![CDATA[<p class="para">   Object oriented style  </p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span>   <span class="type">bool</span>    <span class="methodname"><strong>Collator::sort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$arr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flag</code></span>  ] )</div>  <p class="para rdfs-comment">   Procedural style  </p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span>    <span class="methodname"><strong>collator_sort</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.collator.php" class="type Collator">Collator</a></span> <code class="parameter">$coll</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$arr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flag</code></span>  ] )</div>  <p class="para rdfs-comment">This function sorts an array according to current locale rules.</p>  <p class="para">   Equivalent to standard PHP   <span class="function"><a href="function.sort.php" class="function">sort()</a></span> .  </p>]]></desc>
	<params>
		<param type="Collator" name="coll"/>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="com_create_guid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>com_create_guid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Generates a Globally Unique Identifier (GUID).  </p>  <p class="para">   A GUID is generated in the same way as DCE UUID&#039;s, except that the   Microsoft convention is to enclose a GUID in curly braces.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="com_event_sink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>com_event_sink</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$comobject</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter">$sinkobject</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$sinkinterface</code></span>  ] )</div>  <p class="para rdfs-comment">   Instructs COM to sink events generated by   <code class="parameter">comobject</code> into the PHP object   <code class="parameter">sinkobject</code>.  </p>  <p class="para">   Be careful how you use this feature; if you are doing something similar   to the example below, then it doesn&#039;t really make sense to run it in a   web server context.  </p>]]></desc>
	<params>
		<param type="object" name="comobject"/>
		<param type="object" name="sinkobject"/>
		<param type="mixed" name="sinkinterface"/>
	</params>
</keyword>
<keyword name="com_event_sink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>com_event_sink</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$comobject</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter">$sinkobject</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$sinkinterface</code></span>  ] )</div>  <p class="para rdfs-comment">   Instructs COM to sink events generated by   <code class="parameter">comobject</code> into the PHP object   <code class="parameter">sinkobject</code>.  </p>  <p class="para">   Be careful how you use this feature; if you are doing something similar   to the example below, then it doesn&#039;t really make sense to run it in a   web server context.  </p>]]></desc>
	<params>
		<param type="object" name="comobject"/>
		<param type="object" name="sinkobject"/>
	</params>
</keyword>
<keyword name="com_get_active_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>com_get_active_object</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$progid</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$code_page</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>com_get_active_object()</strong></span> is similar to creating a new   instance of a <a href="class.com.php" class="xref">COM</a> object, except that it will   only return an object to your script if the object is already running.   OLE applications use something known as the &quot;<em>Running Object Table</em>&quot; to   allow well-known applications to be launched only once; this function   exposes the COM library function GetActiveObject() to get a handle on a   running instance.  </p>]]></desc>
	<params>
		<param type="string" name="progid"/>
		<param type="int" name="code_page "/>
	</params>
</keyword>
<keyword name="com_get_active_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>com_get_active_object</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$progid</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$code_page</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>com_get_active_object()</strong></span> is similar to creating a new   instance of a <a href="class.com.php" class="xref">COM</a> object, except that it will   only return an object to your script if the object is already running.   OLE applications use something known as the &quot;<em>Running Object Table</em>&quot; to   allow well-known applications to be launched only once; this function   exposes the COM library function GetActiveObject() to get a handle on a   running instance.  </p>]]></desc>
	<params>
		<param type="string" name="progid"/>
	</params>
</keyword>
<keyword name="com_message_pump" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>com_message_pump</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeoutms</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function will sleep for up to <code class="parameter">timeoutms</code>   milliseconds, or until a message arrives in the queue.  </p>  <p class="para">   The purpose of this function is to route COM calls between apartments and   handle various synchronization issues.  This allows your script to wait   efficiently for events to be triggered, while still handling other events   or running other code in the background.  You should use it in a loop, as   demonstrated by the example in the <span class="function"><a href="function.com-event-sink.php" class="function">com_event_sink()</a></span>   function, until you are finished using event bound COM objects.  </p>]]></desc>
	<params>
		<param type="int" name="timeoutms"/>
	</params>
</keyword>
<keyword name="com_message_pump" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>com_message_pump</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeoutms</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function will sleep for up to <code class="parameter">timeoutms</code>   milliseconds, or until a message arrives in the queue.  </p>  <p class="para">   The purpose of this function is to route COM calls between apartments and   handle various synchronization issues.  This allows your script to wait   efficiently for events to be triggered, while still handling other events   or running other code in the background.  You should use it in a loop, as   demonstrated by the example in the <span class="function"><a href="function.com-event-sink.php" class="function">com_event_sink()</a></span>   function, until you are finished using event bound COM objects.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="com_print_typeinfo" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>com_print_typeinfo</strong></span>    ( <span class="methodparam"><span class="type">object</span> <code class="parameter">$comobject</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$dispinterface</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$wantsink</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   The purpose of this function is to help generate a skeleton class for use   as an event sink.  You may also use it to generate a dump of any COM   object, provided that it supports enough of the introspection interfaces,   and that you know the name of the interface you want to display.  </p>]]></desc>
	<params>
		<param type="object" name="comobject "/>
		<param type="string" name="dispinterface"/>
		<param type="bool" name="wantsink"/>
	</params>
</keyword>
<keyword name="compact" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>compact</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$varname1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates an array containing variables and their values.  </p>  <p class="para">   For each of these, <span class="function"><strong>compact()</strong></span> looks for a   variable with that name in the current symbol table and adds it   to the output array such that the variable name becomes the key   and the contents of the variable become the value for that key.   In short, it does the opposite of <span class="function"><a href="function.extract.php" class="function">extract()</a></span>.  </p>  <p class="para">   Any strings that are not set will simply be skipped.  </p>]]></desc>
	<params>
		<param type="mixed" name="var_names"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="compact" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>compact</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$varname1</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates an array containing variables and their values.  </p>  <p class="para">   For each of these, <span class="function"><strong>compact()</strong></span> looks for a   variable with that name in the current symbol table and adds it   to the output array such that the variable name becomes the key   and the contents of the variable become the value for that key.   In short, it does the opposite of <span class="function"><a href="function.extract.php" class="function">extract()</a></span>.  </p>  <p class="para">   Any strings that are not set will simply be skipped.  </p>]]></desc>
	<params>
		<param type="mixed" name="var_names"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::__construct" type="function" returnType="int">
	<params>
		<param type="object" name="com_object"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::__construct" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="COMPersistHelper::GetCurFile" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::GetMaxStreamSize" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::InitNew" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::LoadFromFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::LoadFromFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::LoadFromStream" type="function" returnType="mixed">
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::SaveToFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filename"/>
		<param type="bool" name="remember"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::SaveToFile" type="function" returnType="bool">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="COMPersistHelper::SaveToStream" type="function" returnType="int">
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="confirm_extname_compiled" type="function" returnType="string">
	<params>
		<param type="string" name="arg"/>
	</params>
</keyword>
<keyword name="constant" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>constant</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="simpara">   Return the value of the constant indicated by   <code class="parameter">name</code>.  </p>  <p class="simpara">   <span class="function"><strong>constant()</strong></span> is useful if you need to retrieve   the value of a constant, but do not know its name.  I.e. it is   stored in a variable or returned by a function.  </p>  <p class="simpara">   This function works also with <a href="language.oop5.constants.php" class="link">class constants</a>.  </p>]]></desc>
	<params>
		<param type="string" name="const_name"/>
	</params>
</keyword>
<keyword name="convert_uudecode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>convert_uudecode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>convert_uudecode()</strong></span> decodes a uuencoded string.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="convert_uuencode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>convert_uuencode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>convert_uuencode()</strong></span> encodes a string using the uuencode   algorithm.  </p>  <p class="para">   Uuencode translates all strings (including binary&#039;s ones) into printable   characters, making them safe for network transmissions. Uuencoded data is   about 35% larger than the original.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>copy</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Makes a copy of the file <code class="parameter">source</code> to   <code class="parameter">dest</code>.  </p>  <p class="para">   If you wish to move a file, use the <span class="function"><a href="function.rename.php" class="function">rename()</a></span> function.  </p>]]></desc>
	<params>
		<param type="string" name="source_file"/>
		<param type="string" name="destination_file"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>copy</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Makes a copy of the file <code class="parameter">source</code> to   <code class="parameter">dest</code>.  </p>  <p class="para">   If you wish to move a file, use the <span class="function"><a href="function.rename.php" class="function">rename()</a></span> function.  </p>]]></desc>
	<params>
		<param type="string" name="source_file"/>
		<param type="string" name="destination_file"/>
	</params>
</keyword>
<keyword name="cos" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>cos</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   <span class="function"><strong>cos()</strong></span> returns the cosine of the <code class="parameter">arg</code>   parameter.  The <code class="parameter">arg</code> parameter is in radians.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="cosh" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>cosh</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the hyperbolic cosine of <code class="parameter">arg</code>,   defined as <em>(exp(arg) + exp(-arg))/2</em>.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>count</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array_or_countable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = COUNT_NORMAL</span></span>  ] )</div>  <p class="para rdfs-comment">   Counts all elements in an array, or something in an object.  </p>  <p class="para">   For objects, if you have   <a href="ref.spl.php" class="link">SPL</a> installed, you can hook into   <span class="function"><strong>count()</strong></span> by implementing interface   <a href="class.countable.php" class="classname">Countable</a>. The interface has exactly one method,   <span class="methodname"><a href="countable.count.php" class="methodname">Countable::count()</a></span>, which returns the return value for the   <span class="function"><strong>count()</strong></span> function.  </p>  <p class="para">   Please see the <a href="language.types.array.php" class="link">Array</a>   section of the manual for a detailed explanation of how arrays   are implemented and used in PHP.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>count</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$array_or_countable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = COUNT_NORMAL</span></span>  ] )</div>  <p class="para rdfs-comment">   Counts all elements in an array, or something in an object.  </p>  <p class="para">   For objects, if you have   <a href="ref.spl.php" class="link">SPL</a> installed, you can hook into   <span class="function"><strong>count()</strong></span> by implementing interface   <a href="class.countable.php" class="classname">Countable</a>. The interface has exactly one method,   <span class="methodname"><a href="countable.count.php" class="methodname">Countable::count()</a></span>, which returns the return value for the   <span class="function"><strong>count()</strong></span> function.  </p>  <p class="para">   Please see the <a href="language.types.array.php" class="link">Array</a>   section of the manual for a detailed explanation of how arrays   are implemented and used in PHP.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="crash" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="create_function" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>create_function</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$args</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$code</code></span>   )</div>  <p class="para rdfs-comment">   Creates an anonymous function from the parameters passed, and   returns a unique name for it.  </p>  <div class="caution"><strong class="caution">Caution</strong>   <p class="para">    This function internally performs an <span class="function"><a href="function.eval.php" class="function">eval()</a></span> and as such has the    same security issues as <span class="function"><a href="function.eval.php" class="function">eval()</a></span>. Additionally it has bad performance    and memory usage characteristics.   </p>   <p class="para">    If you are using PHP 5.3.0 or newer a native    <a href="functions.anonymous.php" class="link">anonymous function</a> should be used instead.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="args"/>
		<param type="string" name="code"/>
	</params>
</keyword>
<keyword name="createEmptyDir" type="function" returnType="bool">
	<params>
		<param type="string" name="dirname"/>
	</params>
</keyword>
<keyword name="crypt" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>crypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$salt</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>crypt()</strong></span> will return a hashed string using the   standard Unix <abbr class="abbrev">DES</abbr>-based algorithm or   alternative algorithms that may be available on the system.  </p>  <p class="para">   The <code class="parameter">salt</code> parameter is optional. However, <span class="function"><strong>crypt()</strong></span> creates weak password without <code class="parameter">salt</code>. PHP 5.6 or later raise E_NOTICE error without it. Make sure specify strong enough salt for better security.   </p>  <p class="para">   <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> uses strong hash, generates strong salt, applies proper rounds automatically. <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> is simple <span class="function"><strong>crypt()</strong></span> wrapper and compatible with existing password hashes. Use of <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> is encouraged.  </p>  <p class="para">   Some operating systems support more than one type of hash.  In   fact, sometimes the standard DES-based algorithm is replaced by an   MD5-based algorithm.  The hash type is triggered by the salt argument.   Prior to 5.3, PHP would determine the available algorithms at install-time   based on the system&#039;s crypt(). If no salt is provided, PHP will   auto-generate either a standard two character (DES) salt, or a twelve   character (MD5), depending on the availability of MD5 crypt().  PHP sets a   constant named <strong><code>CRYPT_SALT_LENGTH</code></strong> which indicates the   longest valid salt allowed by the available hashes.  </p>  <p class="para">   The standard DES-based <span class="function"><strong>crypt()</strong></span> returns the   salt as the first two characters of the output. It also only uses the   first eight characters of <code class="parameter">str</code>, so longer strings   that start with the same eight characters will generate the same result   (when the same salt is used).  </p>  <p class="simpara">   On systems where the crypt() function supports multiple   hash types, the following constants are set to 0 or 1   depending on whether the given type is available:  </p>  <ul class="itemizedlist">   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_STD_DES</code></strong> - Standard DES-based hash with a two character salt       from the alphabet &quot;./0-9A-Za-z&quot;. Using invalid characters in the salt will cause       crypt() to fail.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_EXT_DES</code></strong> - Extended DES-based hash. The &quot;salt&quot; is a     9-character string consisting of an underscore followed by 4 bytes of iteration count and     4 bytes of salt. These are encoded as printable characters, 6 bits per character, least     significant character first. The values 0 to 63 are encoded as &quot;./0-9A-Za-z&quot;. Using invalid     characters in the salt will cause crypt() to fail.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_MD5</code></strong> - MD5 hashing with a twelve character salt starting with     $1$    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_BLOWFISH</code></strong> - Blowfish hashing with a salt as     follows: &quot;$2a$&quot;, &quot;$2x$&quot; or &quot;$2y$&quot;, a two digit cost parameter, &quot;$&quot;, and     22 characters from the alphabet &quot;./0-9A-Za-z&quot;. Using characters outside of     this range in the salt will cause crypt() to return a zero-length string.     The two digit cost parameter is the base-2 logarithm of the iteration     count for the underlying Blowfish-based hashing algorithmeter and must be     in range 04-31, values outside this range will cause crypt() to fail.     Versions of PHP before 5.3.7 only support &quot;$2a$&quot; as the salt prefix: PHP     5.3.7 introduced the new prefixes to fix a security weakness in the     Blowfish implementation.  Please refer to     <a href="http://www.php.net/security/crypt_blowfish.php" class="link external">&raquo;&nbsp;this document</a> for full     details of the security fix, but to summarise, developers targeting only     PHP 5.3.7 and later should use &quot;$2y$&quot; in preference to &quot;$2a$&quot;.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_SHA256</code></strong> - SHA-256 hash with a sixteen character salt     prefixed with $5$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N     is used to indicate how many times the hashing loop should be executed, much like the cost     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to     the nearest limit.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_SHA512</code></strong> - SHA-512 hash with a sixteen character salt     prefixed with $6$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N     is used to indicate how many times the hashing loop should be executed, much like the cost     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to     the nearest limit.    </span>   </li>  </ul>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    As of PHP 5.3.0, PHP contains its own implementation and will use that    if the system lacks of support for one or more of the algorithms.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="salt"/>
	</params>
</keyword>
<keyword name="crypt" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>crypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$salt</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>crypt()</strong></span> will return a hashed string using the   standard Unix <abbr class="abbrev">DES</abbr>-based algorithm or   alternative algorithms that may be available on the system.  </p>  <p class="para">   The <code class="parameter">salt</code> parameter is optional. However, <span class="function"><strong>crypt()</strong></span> creates weak password without <code class="parameter">salt</code>. PHP 5.6 or later raise E_NOTICE error without it. Make sure specify strong enough salt for better security.   </p>  <p class="para">   <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> uses strong hash, generates strong salt, applies proper rounds automatically. <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> is simple <span class="function"><strong>crypt()</strong></span> wrapper and compatible with existing password hashes. Use of <span class="function"><a href="function.password-hash.php" class="function">password_hash()</a></span> is encouraged.  </p>  <p class="para">   Some operating systems support more than one type of hash.  In   fact, sometimes the standard DES-based algorithm is replaced by an   MD5-based algorithm.  The hash type is triggered by the salt argument.   Prior to 5.3, PHP would determine the available algorithms at install-time   based on the system&#039;s crypt(). If no salt is provided, PHP will   auto-generate either a standard two character (DES) salt, or a twelve   character (MD5), depending on the availability of MD5 crypt().  PHP sets a   constant named <strong><code>CRYPT_SALT_LENGTH</code></strong> which indicates the   longest valid salt allowed by the available hashes.  </p>  <p class="para">   The standard DES-based <span class="function"><strong>crypt()</strong></span> returns the   salt as the first two characters of the output. It also only uses the   first eight characters of <code class="parameter">str</code>, so longer strings   that start with the same eight characters will generate the same result   (when the same salt is used).  </p>  <p class="simpara">   On systems where the crypt() function supports multiple   hash types, the following constants are set to 0 or 1   depending on whether the given type is available:  </p>  <ul class="itemizedlist">   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_STD_DES</code></strong> - Standard DES-based hash with a two character salt       from the alphabet &quot;./0-9A-Za-z&quot;. Using invalid characters in the salt will cause       crypt() to fail.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_EXT_DES</code></strong> - Extended DES-based hash. The &quot;salt&quot; is a     9-character string consisting of an underscore followed by 4 bytes of iteration count and     4 bytes of salt. These are encoded as printable characters, 6 bits per character, least     significant character first. The values 0 to 63 are encoded as &quot;./0-9A-Za-z&quot;. Using invalid     characters in the salt will cause crypt() to fail.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_MD5</code></strong> - MD5 hashing with a twelve character salt starting with     $1$    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_BLOWFISH</code></strong> - Blowfish hashing with a salt as     follows: &quot;$2a$&quot;, &quot;$2x$&quot; or &quot;$2y$&quot;, a two digit cost parameter, &quot;$&quot;, and     22 characters from the alphabet &quot;./0-9A-Za-z&quot;. Using characters outside of     this range in the salt will cause crypt() to return a zero-length string.     The two digit cost parameter is the base-2 logarithm of the iteration     count for the underlying Blowfish-based hashing algorithmeter and must be     in range 04-31, values outside this range will cause crypt() to fail.     Versions of PHP before 5.3.7 only support &quot;$2a$&quot; as the salt prefix: PHP     5.3.7 introduced the new prefixes to fix a security weakness in the     Blowfish implementation.  Please refer to     <a href="http://www.php.net/security/crypt_blowfish.php" class="link external">&raquo;&nbsp;this document</a> for full     details of the security fix, but to summarise, developers targeting only     PHP 5.3.7 and later should use &quot;$2y$&quot; in preference to &quot;$2a$&quot;.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_SHA256</code></strong> - SHA-256 hash with a sixteen character salt     prefixed with $5$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N     is used to indicate how many times the hashing loop should be executed, much like the cost     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to     the nearest limit.    </span>   </li>   <li class="listitem">    <span class="simpara">     <strong><code>CRYPT_SHA512</code></strong> - SHA-512 hash with a sixteen character salt     prefixed with $6$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N     is used to indicate how many times the hashing loop should be executed, much like the cost     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to     the nearest limit.    </span>   </li>  </ul>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    As of PHP 5.3.0, PHP contains its own implementation and will use that    if the system lacks of support for one or more of the algorithms.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="ctype_cntrl" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_cntrl</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are control characters.   Control characters are e.g. line feed, tab, escape.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_digit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_digit</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are numerical.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_graph" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_graph</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, creates visible output.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_lower" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_lower</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are lowercase letters.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_print" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_print</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are printable.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_punct" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_punct</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are punctuation character.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_space" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_space</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, creates whitespace.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_upper" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_upper</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are uppercase characters.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="ctype_xdigit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ctype_xdigit</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Checks if all of the characters in the provided <span class="type"><a href="language.types.string.php" class="type string">string</a></span>,   <code class="parameter">text</code>, are hexadecimal &#039;digits&#039;.  </p>]]></desc>
	<params>
		<param type="mixed" name="c"/>
	</params>
</keyword>
<keyword name="curl_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>curl_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Closes a cURL session and frees all resources.  The cURL handle,   <code class="parameter">ch</code>, is also deleted.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_copy_handle" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>curl_copy_handle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Copies a cURL handle keeping the same preferences.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_errno</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Returns the error number for the last cURL operation.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>curl_error</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Returns a clear text error message for the last cURL operation.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_exec" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>curl_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Execute the given cURL session.  </p>  <p class="para">   This function should be called after initializing a cURL session and all   the options for the session are set.   </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_getinfo" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>curl_getinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$opt</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets information about the last transfer.   </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
		<param type="int" name="option"/>
	</params>
</keyword>
<keyword name="curl_getinfo" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>curl_getinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$opt</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets information about the last transfer.   </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>curl_init</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Initializes a new session and return a cURL handle for use with the   <span class="function"><a href="function.curl-setopt.php" class="function">curl_setopt()</a></span>, <span class="function"><a href="function.curl-exec.php" class="function">curl_exec()</a></span>,   and <span class="function"><a href="function.curl-close.php" class="function">curl_close()</a></span> functions.    </p>]]></desc>
	<params>
		<param type="string" name="url"/>
	</params>
</keyword>
<keyword name="curl_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>curl_init</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Initializes a new session and return a cURL handle for use with the   <span class="function"><a href="function.curl-setopt.php" class="function">curl_setopt()</a></span>, <span class="function"><a href="function.curl-exec.php" class="function">curl_exec()</a></span>,   and <span class="function"><a href="function.curl-close.php" class="function">curl_close()</a></span> functions.    </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="curl_multi_add_handle" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_multi_add_handle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Adds the <code class="parameter">ch</code> handle to the multi handle    <code class="parameter">mh</code>  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_multi_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>curl_multi_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   )</div>  <p class="para rdfs-comment">   Closes a set of cURL handles.  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
	</params>
</keyword>
<keyword name="curl_multi_exec" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_multi_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$still_running</code></span>   )</div>  <p class="para rdfs-comment">   Processes each of the handles in the stack.  This method can be called whether or not a handle   needs to read or write data.  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
		<param type="int" name="&amp;still_running"/>
	</params>
</keyword>
<keyword name="curl_multi_getcontent" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>curl_multi_getcontent</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   If <strong><code>CURLOPT_RETURNTRANSFER</code></strong> is an option that is set for a specific handle,    then this function will return the content of that cURL handle in the form   of a string.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_multi_info_read" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>curl_multi_info_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgs_in_queue</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Ask the multi handle if there are any messages or information from the individual transfers.    Messages may include information such as an error code from the transfer or just the fact    that a transfer is completed.  </p>  <p class="para">      Repeated calls to this function will return a new result each time, until a <strong><code>FALSE</code></strong> is returned    as a signal that there is no more to get at this point. The integer pointed to with    <code class="parameter">msgs_in_queue</code> will contain the number of remaining messages after this    function was called.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The data the returned resource points to will not survive calling     <span class="function"><a href="function.curl-multi-remove-handle.php" class="function">curl_multi_remove_handle()</a></span>.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="mh"/>
		<param type="long" name="msgs_in_queue"/>
	</params>
</keyword>
<keyword name="curl_multi_info_read" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>curl_multi_info_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgs_in_queue</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Ask the multi handle if there are any messages or information from the individual transfers.    Messages may include information such as an error code from the transfer or just the fact    that a transfer is completed.  </p>  <p class="para">      Repeated calls to this function will return a new result each time, until a <strong><code>FALSE</code></strong> is returned    as a signal that there is no more to get at this point. The integer pointed to with    <code class="parameter">msgs_in_queue</code> will contain the number of remaining messages after this    function was called.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The data the returned resource points to will not survive calling     <span class="function"><a href="function.curl-multi-remove-handle.php" class="function">curl_multi_remove_handle()</a></span>.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="mh"/>
	</params>
</keyword>
<keyword name="curl_multi_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>curl_multi_init</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Allows the processing of multiple cURL handles in parallel.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="curl_multi_remove_handle" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_multi_remove_handle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   )</div>  <p class="para rdfs-comment">   Removes a given <code class="parameter">ch</code> handle from the given <code class="parameter">mh</code>   handle. When the <code class="parameter">ch</code> handle has been removed, it is again perfectly    legal to run <span class="function"><a href="function.curl-exec.php" class="function">curl_exec()</a></span> on this handle.  Removing the <code class="parameter">ch</code> handle while being    used, will effectively halt the transfer in progress involving that handle.  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
		<param type="resource" name="ch"/>
	</params>
</keyword>
<keyword name="curl_multi_select" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_multi_select</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = 1.0</span></span>  ] )</div>  <p class="para rdfs-comment">    Blocks until there is activity on any of the curl_multi connections.  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
		<param type="double" name="timeout"/>
	</params>
</keyword>
<keyword name="curl_multi_select" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>curl_multi_select</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mh</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = 1.0</span></span>  ] )</div>  <p class="para rdfs-comment">    Blocks until there is activity on any of the curl_multi connections.  </p>]]></desc>
	<params>
		<param type="resource" name="mh"/>
	</params>
</keyword>
<keyword name="curl_setopt_array" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>curl_setopt_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ch</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>   )</div>  <p class="para rdfs-comment">   Sets multiple options for a cURL session. This function is   useful for setting a large amount of cURL options without repetitively   calling <span class="function"><a href="function.curl-setopt.php" class="function">curl_setopt()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="ch"/>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="current" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>current</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   Every array has an internal pointer to its &quot;current&quot; element,   which is initialized to the first element inserted into the   array.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
	</params>
</keyword>
<keyword name="date_create" type="function" returnType="DateTime">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.construct.php" class="methodname">DateTime::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="time"/>
		<param type="DateTimeZone" name="object"/>
	</params>
</keyword>
<keyword name="date_create" type="function" returnType="DateTime">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.construct.php" class="methodname">DateTime::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="time"/>
	</params>
</keyword>
<keyword name="date_create" type="function" returnType="DateTime">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.construct.php" class="methodname">DateTime::__construct()</a></span>  </p> </div>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="date_date_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.setdate.php" class="methodname">DateTime::setDate()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="long" name="year"/>
		<param type="long" name="month"/>
		<param type="long" name="day"/>
	</params>
</keyword>
<keyword name="date_default_timezone_get" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>date_default_timezone_get</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   In order of preference, this function returns the default timezone by:   <ul class="itemizedlist">    <li class="listitem">     <p class="para">      Reading the timezone set using the      <span class="function"><a href="function.date-default-timezone-set.php" class="function">date_default_timezone_set()</a></span> function (if any)     </p>    </li>    <li class="listitem">     <p class="para">      Prior to PHP 5.4.0 <em class="emphasis">only</em>: Reading the <var class="varname"><var class="varname">TZ</var></var>      environment variable (if non empty)     </p>    </li>    <li class="listitem">     <p class="para">      Reading the value of the <a href="datetime.configuration.php#ini.date.timezone" class="link">date.timezone</a> ini option      (if set)     </p>    </li>    <li class="listitem">     <p class="para">      Prior to PHP 5.4.0 <em class="emphasis">only</em>: Querying the host operating system (if supported      and allowed by the OS). This uses an algorithm      that has to <em class="emphasis">guess</em> the timezone. This is by no means going to work correctly for       every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed      correctly, and set <a href="datetime.configuration.php#ini.date.timezone" class="link">date.timezone</a> to the correct timezone      instead.     </p>    </li>   </ul>  </p>  <p class="para">   If none of the above succeed, <span class="methodname"><strong>date_default_timezone_get()</strong></span>   will return a default timezone of <em>UTC</em>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="date_default_timezone_set" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>date_default_timezone_set</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$timezone_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_default_timezone_set()</strong></span> sets the default timezone   used by all date/time functions.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Since PHP 5.1.0 (when the date/time functions were rewritten), every call    to a date/time function will generate a <strong><code>E_NOTICE</code></strong> if    the timezone isn&#039;t valid, and/or a <strong><code>E_WARNING</code></strong> message    if using the system settings or the <var class="varname"><var class="varname">TZ</var></var> environment    variable.   </p>  </p></blockquote>  <p class="para">   Instead of using this function to set the default timezone in your script,   you can also use the INI setting <a href="datetime.configuration.php#ini.date.timezone" class="link">date.timezone</a> to set the default   timezone.  </p>]]></desc>
	<params>
		<param type="string" name="timezone_identifier"/>
	</params>
</keyword>
<keyword name="date_format" type="function" returnType="string">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.format.php" class="methodname">DateTime::format()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="date_format_locale" type="function" returnType="string">
	<params>
		<param type="DateTime" name="object"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="date_isodate_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.setisodate.php" class="methodname">DateTime::setISODate()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="long" name="year"/>
		<param type="long" name="week"/>
		<param type="long" name="day"/>
	</params>
</keyword>
<keyword name="date_isodate_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.setisodate.php" class="methodname">DateTime::setISODate()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="long" name="year"/>
		<param type="long" name="week"/>
	</params>
</keyword>
<keyword name="date_modify" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.modify.php" class="methodname">DateTime::modify()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="string" name="modify"/>
	</params>
</keyword>
<keyword name="date_offset_get" type="function" returnType="long">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.getoffset.php" class="methodname">DateTime::getOffset()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
	</params>
</keyword>
<keyword name="date_parse" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>date_parse</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$date</code></span>   )</div>]]></desc>
	<params>
		<param type="string" name="date"/>
	</params>
</keyword>
<keyword name="date_sun_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>date_sun_info</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$time</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code></span>   )</div>]]></desc>
	<params>
		<param type="long" name="time"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
		<param type="float" name="zenith"/>
		<param type="float" name="gmt_offset"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
		<param type="float" name="zenith"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
	</params>
</keyword>
<keyword name="date_sunrise" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunrise</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunrise_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>date_sunrise()</strong></span> returns the sunrise time for a given   day (specified as a <code class="parameter">timestamp</code>) and location.  </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
		<param type="float" name="zenith"/>
		<param type="float" name="gmt_offset"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
		<param type="float" name="zenith"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
		<param type="float" name="longitude"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
		<param type="float" name="latitude"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
		<param type="int" name="format"/>
	</params>
</keyword>
<keyword name="date_sunset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>date_sunset</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = SUNFUNCS_RET_STRING</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$latitude</code><span class="initializer"> = ini_get(&quot;date.default_latitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$longitude</code><span class="initializer"> = ini_get(&quot;date.default_longitude&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$zenith</code><span class="initializer"> = ini_get(&quot;date.sunset_zenith&quot;)</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$gmt_offset</code><span class="initializer"> = 0</span></span>   ]]]]] )</div>   <p class="para rdfs-comment">    <span class="function"><strong>date_sunset()</strong></span> returns the sunset time for a given    day (specified as a <code class="parameter">timestamp</code>) and location.   </p>]]></desc>
	<params>
		<param type="mixed" name="time"/>
	</params>
</keyword>
<keyword name="date_time_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.settime.php" class="methodname">DateTime::setTime()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="long" name="hour"/>
		<param type="long" name="minute"/>
		<param type="long" name="second"/>
	</params>
</keyword>
<keyword name="date_time_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.settime.php" class="methodname">DateTime::setTime()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="long" name="hour"/>
		<param type="long" name="minute"/>
	</params>
</keyword>
<keyword name="date_timezone_get" type="function" returnType="DateTimeZone">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.gettimezone.php" class="methodname">DateTime::getTimezone()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
	</params>
</keyword>
<keyword name="date_timezone_set" type="function" returnType="void">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetime.settimezone.php" class="methodname">DateTime::setTimezone()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTime" name="object"/>
		<param type="DateTimeZone" name="object"/>
	</params>
</keyword>
<keyword name="dba_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>dba_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_close()</strong></span> closes the established database and frees   all resources of the specified database handle.  </p>]]></desc>
	<params>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_delete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_delete</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_delete()</strong></span> deletes the specified entry from the database.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_exists()</strong></span> checks whether the specified   <code class="parameter">key</code> exists in the database.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_fetch" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dba_fetch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>dba_fetch</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code></span>    , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_fetch()</strong></span> fetches the data specified by   <code class="parameter">key</code> from the database specified with   <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="int" name="skip"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_fetch" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dba_fetch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>   <div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>dba_fetch</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>    , <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code></span>    , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>    )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_fetch()</strong></span> fetches the data specified by   <code class="parameter">key</code> from the database specified with   <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_firstkey" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dba_firstkey</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_firstkey()</strong></span> returns the first key of the database   and resets the internal key pointer. This permits a linear search through   the whole database.  </p>]]></desc>
	<params>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_handlers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dba_handlers</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$full_info</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_handlers()</strong></span> list all the handlers supported by this   extension.  </p>]]></desc>
	<params>
		<param type="bool" name="full_info"/>
	</params>
</keyword>
<keyword name="dba_handlers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dba_handlers</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$full_info</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_handlers()</strong></span> list all the handlers supported by this   extension.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="dba_insert" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_insert</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_insert()</strong></span> inserts the entry described with   <code class="parameter">key</code> and <code class="parameter">value</code> into the   database.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="string" name="value"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_list" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dba_list</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_list()</strong></span> list all open database files.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dba_nextkey" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dba_nextkey</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_nextkey()</strong></span> returns the next key of the database   and advances the internal key pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_optimize" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_optimize</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_optimize()</strong></span> optimizes the underlying database.  </p>]]></desc>
	<params>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>dba_popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_popen()</strong></span> establishes a persistent database instance   for <code class="parameter">path</code> with <code class="parameter">mode</code> using   <code class="parameter">handler</code>.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="string" name="mode"/>
		<param type="string" name="handlername"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="dba_popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>dba_popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_popen()</strong></span> establishes a persistent database instance   for <code class="parameter">path</code> with <code class="parameter">mode</code> using   <code class="parameter">handler</code>.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="dba_replace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_replace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_replace()</strong></span> replaces or inserts the entry described   with <code class="parameter">key</code> and <code class="parameter">value</code> into the   database specified by <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="string" name="value"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dba_sync" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dba_sync</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dba_sync()</strong></span> synchronizes the database. This will probably    trigger a physical write to the disk, if supported.  </p>]]></desc>
	<params>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="dbase_add_record" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dbase_add_record</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$record</code></span>   )</div>  <p class="para rdfs-comment">   Adds the given data to the database.   </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
		<param type="array" name="data"/>
	</params>
</keyword>
<keyword name="dbase_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dbase_close</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Closes the given database link identifier.  </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
	</params>
</keyword>
<keyword name="dbase_create" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>dbase_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$fields</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dbase_create()</strong></span> creates a dBase database with the given   definition.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">When <a href="features.safe-mode.php" class="link">safe mode</a> is enabled, PHP checks whetherthe files or directories being operated upon have the same UID (owner) as thescript that is being executed.</span></p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">This function is affected by <a href="ini.core.php#ini.open-basedir" class="link">open_basedir</a>.</p></p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="array" name="fields"/>
	</params>
</keyword>
<keyword name="dbase_delete_record" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dbase_delete_record</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$record_number</code></span>   )</div>  <p class="para rdfs-comment">   Marks the given record to be deleted from the database.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    To actually remove the record from the database, you must also call    <span class="function"><a href="function.dbase-pack.php" class="function">dbase_pack()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="identifier"/>
		<param type="int" name="record"/>
	</params>
</keyword>
<keyword name="dbase_get_header_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dbase_get_header_info</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns information on the column structure of the given database link   identifier.  </p>]]></desc>
	<params>
		<param type="int" name="database_handle"/>
	</params>
</keyword>
<keyword name="dbase_get_record" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dbase_get_record</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$record_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets a record from a database as an indexed array.  </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
		<param type="int" name="record"/>
	</params>
</keyword>
<keyword name="dbase_get_record_with_names" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>dbase_get_record_with_names</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$record_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets a record from a dBase database as an associative array.  </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
		<param type="int" name="record"/>
	</params>
</keyword>
<keyword name="dbase_numfields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>dbase_numfields</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of fields (columns) in the specified database.   </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Field numbers are between 0 and <em>dbase_numfields($db)-1</em>,    while record numbers are between 1 and <em>dbase_numrecords($db)</em>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="identifier"/>
	</params>
</keyword>
<keyword name="dbase_numrecords" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>dbase_numrecords</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of records (rows) in the specified database.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Record numbers are between 1 and <em>dbase_numrecords($db)</em>,    while field numbers are between 0 and <em>dbase_numfields($db)-1</em>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="identifier"/>
	</params>
</keyword>
<keyword name="dbase_open" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>dbase_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>dbase_open()</strong></span> opens a dBase database with the given   access mode.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">When <a href="features.safe-mode.php" class="link">safe mode</a> is enabled, PHP checks whetherthe files or directories being operated upon have the same UID (owner) as thescript that is being executed.</span></p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>: <p class="para">This function is affected by <a href="ini.core.php#ini.open-basedir" class="link">open_basedir</a>.</p></p></blockquote>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="dbase_pack" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dbase_pack</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Packs the specified database by permanently deleting all records marked   for deletion using <span class="function"><a href="function.dbase-delete-record.php" class="function">dbase_delete_record()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
	</params>
</keyword>
<keyword name="dbase_replace_record" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dbase_replace_record</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dbase_identifier</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$record</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$record_number</code></span>   )</div>  <p class="para rdfs-comment">   Replaces the given record in the database with the given data.  </p>]]></desc>
	<params>
		<param type="int" name="identifier"/>
		<param type="array" name="data"/>
		<param type="int" name="recnum"/>
	</params>
</keyword>
<keyword name="dcgettext" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dcgettext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>   )</div>  <p class="para rdfs-comment">   This function allows you to override the current domain for a   single message lookup.  </p>]]></desc>
	<params>
		<param type="string" name="domain_name"/>
		<param type="string" name="msgid"/>
		<param type="int" name="category"/>
	</params>
</keyword>
<keyword name="debug_backtrace" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>debug_backtrace</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = DEBUG_BACKTRACE_PROVIDE_OBJECT</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>debug_backtrace()</strong></span> generates a PHP backtrace.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="debug_print_backtrace" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">     <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>debug_print_backtrace</strong></span>      ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>     [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = 0</span></span>    ]] )</div>    <p class="para rdfs-comment">     <span class="function"><strong>debug_print_backtrace()</strong></span> prints a PHP backtrace. It     prints the function calls, included/required files and     <span class="function"><a href="function.eval.php" class="function">eval()</a></span>ed stuff.    </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="debug_zval_dump" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>debug_zval_dump</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Dumps a string representation of an internal zend value to output.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="dechex" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>dechex</strong></span>     ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$number</code></span>    )</div>  <p class="para rdfs-comment">   Returns a string containing a hexadecimal representation of the given   unsigned <code class="parameter">number</code> argument.  </p>  <p class="para">   The largest number that can be converted is   <strong><code>PHP_INT_MAX</code></strong><em> * 2 + 1</em> (or   <em>-1</em>): on 32-bit platforms, this will be   <em>4294967295</em> in decimal, which results in   <span class="function"><strong>dechex()</strong></span> returning <em>ffffffff</em>.  </p>]]></desc>
	<params>
		<param type="int" name="decimal_number"/>
	</params>
</keyword>
<keyword name="deleteIndex" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="deleteName" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dgettext" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dgettext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>dgettext()</strong></span> function allows you to override   the current <code class="parameter">domain</code> for a single message lookup.  </p>]]></desc>
	<params>
		<param type="string" name="domain_name"/>
		<param type="string" name="msgid"/>
	</params>
</keyword>
<keyword name="dir" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.directory.php" class="type Directory">Directory</a></span> <span class="methodname"><strong>dir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>    <p class="para rdfs-comment">   A pseudo-object oriented mechanism for reading a directory.  The   given <code class="parameter">directory</code> is opened.  </p>]]></desc>
	<params>
		<param type="string" name="directory"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="dir" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.directory.php" class="type Directory">Directory</a></span> <span class="methodname"><strong>dir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>    <p class="para rdfs-comment">   A pseudo-object oriented mechanism for reading a directory.  The   given <code class="parameter">directory</code> is opened.  </p>]]></desc>
	<params>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="$path"/>
		<param type="int" name="$flags"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="$path"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::count" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::current" type="function" returnType="DirectoryIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::getBasename" type="function" returnType="string">
	<params>
		<param type="string" name="$suffix"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::getBasename" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="DirectoryIterator::getChildren" type="function" returnType="RecursiveDirectoryIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::getFilename" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::isDot" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::key" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DirectoryIterator::valid" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dirname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>dirname</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   )</div>  <p class="para rdfs-comment">   Given a string containing the path of a file or directory,   this function will return the parent directory&#039;s path.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="disk_free_space" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">float</span> <span class="methodname"><strong>disk_free_space</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   Given a string containing a directory, this function will return the   number of bytes available on the corresponding filesystem or disk   partition.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="disk_total_space" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">float</span> <span class="methodname"><strong>disk_total_space</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   Given a string containing a directory, this function will return the total   number of bytes on the corresponding filesystem or disk partition.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="display_disabled_function" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dl" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>dl</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$library</code></span>   )</div>  <p class="para rdfs-comment">   Loads the PHP extension given by the parameter   <code class="parameter">library</code>.  </p>  <p class="para">   Use <span class="function"><a href="function.extension-loaded.php" class="function">extension_loaded()</a></span> to test whether a given   extension is already available or not. This works on both built-in   extensions and dynamically loaded ones (either through <var class="filename">php.ini</var> or   <span class="function"><strong>dl()</strong></span>).  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    This function has been removed from some SAPIs in PHP 5.3.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="extension_filename"/>
	</params>
</keyword>
<keyword name="dns_check_record" type="function" returnType="int">
	<desc><![CDATA[<p class="para">   This function is an alias of:    <span class="function"><a href="function.checkdnsrr.php" class="function">checkdnsrr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="dns_check_record" type="function" returnType="int">
	<desc><![CDATA[<p class="para">   This function is an alias of:    <span class="function"><a href="function.checkdnsrr.php" class="function">checkdnsrr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="dns_get_mx" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">   This function is an alias of:    <span class="function"><a href="function.getmxrr.php" class="function">getmxrr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="array" name="mxhosts"/>
		<param type="array" name="weight"/>
	</params>
</keyword>
<keyword name="dns_get_mx" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">   This function is an alias of:    <span class="function"><a href="function.getmxrr.php" class="function">getmxrr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="array" name="mxhosts"/>
	</params>
</keyword>
<keyword name="dom_attr_is_id" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_characterdata_append_data" type="function" returnType="void">
	<params>
		<param type="string" name="arg"/>
	</params>
</keyword>
<keyword name="dom_characterdata_delete_data" type="function" returnType="void">
	<params>
		<param type="int" name="offset"/>
		<param type="int" name="count"/>
	</params>
</keyword>
<keyword name="dom_characterdata_insert_data" type="function" returnType="void">
	<params>
		<param type="int" name="offset"/>
		<param type="string" name="arg"/>
	</params>
</keyword>
<keyword name="dom_characterdata_replace_data" type="function" returnType="void">
	<params>
		<param type="int" name="offset"/>
		<param type="int" name="count"/>
		<param type="string" name="arg"/>
	</params>
</keyword>
<keyword name="dom_characterdata_substring_data" type="function" returnType="string">
	<params>
		<param type="int" name="offset"/>
		<param type="int" name="count"/>
	</params>
</keyword>
<keyword name="dom_document_adopt_node" type="function" returnType="DOMNode">
	<params>
		<param type="DOMNode" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_create_attribute" type="function" returnType="DOMAttr">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_document_create_attribute_ns" type="function" returnType="DOMAttr">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
	</params>
</keyword>
<keyword name="dom_document_create_cdatasection" type="function" returnType="DOMCdataSection">
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="dom_document_create_comment" type="function" returnType="DOMComment">
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="dom_document_create_document_fragment" type="function" returnType="DOMDocumentFragment">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_document_create_element" type="function" returnType="DOMElement">
	<params>
		<param type="string" name="tagName"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="dom_document_create_element" type="function" returnType="DOMElement">
	<params>
		<param type="string" name="tagName"/>
	</params>
</keyword>
<keyword name="dom_document_create_element_ns" type="function" returnType="DOMElement">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="dom_document_create_element_ns" type="function" returnType="DOMElement">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
	</params>
</keyword>
<keyword name="dom_document_create_entity_reference" type="function" returnType="DOMEntityReference">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_document_create_processing_instruction" type="function" returnType="DOMProcessingInstruction">
	<params>
		<param type="string" name="target"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="dom_document_create_text_node" type="function" returnType="DOMText">
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="dom_document_get_element_by_id" type="function" returnType="DOMElement">
	<params>
		<param type="string" name="elementId"/>
	</params>
</keyword>
<keyword name="dom_document_get_elements_by_tag_name" type="function" returnType="DOMNodeList">
	<params>
		<param type="string" name="tagname"/>
	</params>
</keyword>
<keyword name="dom_document_get_elements_by_tag_name_ns" type="function" returnType="DOMNodeList">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_document_import_node" type="function" returnType="DOMNode">
	<params>
		<param type="DOMNode" name="importedNode"/>
		<param type="boolean" name="deep"/>
	</params>
</keyword>
<keyword name="dom_document_load" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMDocument::load</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Loads an XML document from a file.   </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    Unix style paths with forward slashes can cause significant performance    degradation on Windows systems; be sure to call <span class="function"><a href="function.realpath.php" class="function">realpath()</a></span>    in such a case.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="source"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="dom_document_load" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMDocument::load</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Loads an XML document from a file.   </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    Unix style paths with forward slashes can cause significant performance    degradation on Windows systems; be sure to call <span class="function"><a href="function.realpath.php" class="function">realpath()</a></span>    in such a case.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_load_html" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_load_html_file" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_loadxml" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMDocument::loadXML</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Loads an XML document from a string.   </p>]]></desc>
	<params>
		<param type="string" name="source"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="dom_document_loadxml" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMDocument::loadXML</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Loads an XML document from a string.   </p>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_normalize_document" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_document_relaxNG_validate_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="dom_document_relaxNG_validate_xml" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_rename_node" type="function" returnType="DOMNode">
	<params>
		<param type="node" name="n"/>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
	</params>
</keyword>
<keyword name="dom_document_save" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>DOMDocument::save</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates an XML document from the DOM representation. This function is usually    called after building a new dom document from scratch as in the example below.   </p>]]></desc>
	<params>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="dom_document_save_html" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_document_save_html_file" type="function" returnType="int">
	<params>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="dom_document_savexml" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">string</span> <span class="methodname"><strong>DOMDocument::saveXML</strong></span>    ([ <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$node</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Creates an XML document from the DOM representation. This function is usually    called after building a new dom document from scratch as in the example below.   </p>]]></desc>
	<params>
		<param type="node" name="n"/>
	</params>
</keyword>
<keyword name="dom_document_savexml" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">string</span> <span class="methodname"><strong>DOMDocument::saveXML</strong></span>    ([ <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$node</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Creates an XML document from the DOM representation. This function is usually    called after building a new dom document from scratch as in the example below.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="dom_document_schema_validate" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="dom_document_schema_validate_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="dom_document_validate" type="function" returnType="boolean">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">bool</span> <span class="methodname"><strong>DOMDocument::validate</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Validates the document based on its DTD.   </p>  <p class="para">   You can also use the <em>validateOnParse</em> property of    <a href="class.domdocument.php" class="classname">DOMDocument</a> to make a DTD validation.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_document_xinclude" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>DOMDocument::xinclude</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>  ] )</div>  <p class="para rdfs-comment">   This method substitutes <a href="http://www.w3.org/TR/xinclude/" class="link external">&raquo;&nbsp;XIncludes</a> in a DOMDocument object.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Due to libxml2 automatically resolving entities, this method will produce    unexpected results if the included XML file have an attached DTD.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="dom_document_xinclude" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>DOMDocument::xinclude</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>  ] )</div>  <p class="para rdfs-comment">   This method substitutes <a href="http://www.w3.org/TR/xinclude/" class="link external">&raquo;&nbsp;XIncludes</a> in a DOMDocument object.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Due to libxml2 automatically resolving entities, this method will produce    unexpected results if the included XML file have an attached DTD.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="dom_domconfiguration_can_set_parameter" type="function" returnType="boolean">
	<params>
		<param type="string" name="name"/>
		<param type="domuserdata" name="value"/>
	</params>
</keyword>
<keyword name="dom_domconfiguration_get_parameter" type="function" returnType="domdomuserdata">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_domimplementation_create_document" type="function" returnType="DOMDocument">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
		<param type="DOMDocumentType" name="doctype"/>
	</params>
</keyword>
<keyword name="dom_domimplementation_create_document_type" type="function" returnType="DOMDocumentType">
	<params>
		<param type="string" name="qualifiedName"/>
		<param type="string" name="publicId"/>
		<param type="string" name="systemId"/>
	</params>
</keyword>
<keyword name="dom_domimplementation_get_feature" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="feature"/>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="dom_domimplementation_has_feature" type="function" returnType="boolean">
	<params>
		<param type="string" name="feature"/>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="dom_domimplementationlist_item" type="function" returnType="domdomimplementation">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_domimplementationsource_get_domimplementation" type="function" returnType="domdomimplementation">
	<params>
		<param type="string" name="features"/>
	</params>
</keyword>
<keyword name="dom_domimplementationsource_get_domimplementations" type="function" returnType="domimplementationlist">
	<params>
		<param type="string" name="features"/>
	</params>
</keyword>
<keyword name="dom_domstringlist_item" type="function" returnType="domstring">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_element_get_attribute" type="function" returnType="string">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_element_get_attribute_node" type="function" returnType="DOMAttr">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_element_get_attribute_node_ns" type="function" returnType="DOMAttr">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_element_get_attribute_ns" type="function" returnType="string">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_element_get_elements_by_tag_name" type="function" returnType="DOMNodeList">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_element_get_elements_by_tag_name_ns" type="function" returnType="DOMNodeList">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_element_has_attribute" type="function" returnType="boolean">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_element_has_attribute_ns" type="function" returnType="boolean">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_element_remove_attribute" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_element_remove_attribute_node" type="function" returnType="DOMAttr">
	<params>
		<param type="DOMAttr" name="oldAttr"/>
	</params>
</keyword>
<keyword name="dom_element_remove_attribute_ns" type="function" returnType="void">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_element_set_attribute" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="dom_element_set_attribute_node" type="function" returnType="DOMAttr">
	<params>
		<param type="DOMAttr" name="newAttr"/>
	</params>
</keyword>
<keyword name="dom_element_set_attribute_node_ns" type="function" returnType="DOMAttr">
	<params>
		<param type="DOMAttr" name="newAttr"/>
	</params>
</keyword>
<keyword name="dom_element_set_attribute_ns" type="function" returnType="void">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="qualifiedName"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="dom_element_set_id_attribute" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="boolean" name="isId"/>
	</params>
</keyword>
<keyword name="dom_element_set_id_attribute_node" type="function" returnType="void">
	<params>
		<param type="attr" name="idAttr"/>
		<param type="boolean" name="isId"/>
	</params>
</keyword>
<keyword name="dom_element_set_id_attribute_ns" type="function" returnType="void">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
		<param type="boolean" name="isId"/>
	</params>
</keyword>
<keyword name="dom_import_simplexml" type="function" returnType="somNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.domelement.php" class="type DOMElement">DOMElement</a></span> <span class="methodname"><strong>dom_import_simplexml</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.simplexmlelement.php" class="type SimpleXMLElement">SimpleXMLElement</a></span> <code class="parameter">$node</code></span>   )</div>  <p class="para rdfs-comment">   This function takes the node <code class="parameter">node</code> of class   <a href="ref.simplexml.php" class="link">SimpleXML</a> and makes it into a   <a href="class.domelement.php" class="classname">DOMElement</a> node. This new object can then be used   as a native <a href="class.domelement.php" class="classname">DOMElement</a> node.   </p>]]></desc>
	<params>
		<param type="sxeobject" name="node"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_get_named_item" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_get_named_item_ns" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_item" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <span class="methodname"><strong>DOMNamedNodeMap::item</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves a node specified by <code class="parameter">index</code> within the    <a href="class.domnamednodemap.php" class="classname">DOMNamedNodeMap</a> object.  </p>]]></desc>
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_remove_named_item" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_remove_named_item_ns" type="function" returnType="DOMNode">
	<params>
		<param type="string" name="namespaceURI"/>
		<param type="string" name="localName"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_set_named_item" type="function" returnType="DOMNode">
	<params>
		<param type="DOMNode" name="arg"/>
	</params>
</keyword>
<keyword name="dom_namednodemap_set_named_item_ns" type="function" returnType="DOMNode">
	<params>
		<param type="DOMNode" name="arg"/>
	</params>
</keyword>
<keyword name="dom_namelist_get_name" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_namelist_get_namespace_uri" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_node_append_child" type="function" returnType="DomNode">
	<params>
		<param type="DomNode" name="newChild"/>
	</params>
</keyword>
<keyword name="dom_node_clone_node" type="function" returnType="DomNode">
	<params>
		<param type="boolean" name="deep"/>
	</params>
</keyword>
<keyword name="dom_node_compare_document_position" type="function" returnType="short">
	<params>
		<param type="DomNode" name="other"/>
	</params>
</keyword>
<keyword name="dom_node_get_feature" type="function" returnType="DomNode">
	<params>
		<param type="string" name="feature"/>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="dom_node_get_user_data" type="function" returnType="DomUserData">
	<params>
		<param type="string" name="key"/>
	</params>
</keyword>
<keyword name="dom_node_has_attributes" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_node_has_child_nodes" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_node_insert_before" type="function" returnType="domnode">
	<params>
		<param type="DomNode" name="newChild"/>
		<param type="DomNode" name="refChild"/>
	</params>
</keyword>
<keyword name="dom_node_is_default_namespace" type="function" returnType="boolean">
	<params>
		<param type="string" name="namespaceURI"/>
	</params>
</keyword>
<keyword name="dom_node_is_equal_node" type="function" returnType="boolean">
	<params>
		<param type="DomNode" name="arg"/>
	</params>
</keyword>
<keyword name="dom_node_is_same_node" type="function" returnType="boolean">
	<params>
		<param type="DomNode" name="other"/>
	</params>
</keyword>
<keyword name="dom_node_is_supported" type="function" returnType="boolean">
	<params>
		<param type="string" name="feature"/>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="dom_node_lookup_namespace_uri" type="function" returnType="string">
	<params>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="dom_node_lookup_prefix" type="function" returnType="string">
	<params>
		<param type="string" name="namespaceURI"/>
	</params>
</keyword>
<keyword name="dom_node_normalize" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>DOMNode::normalize</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Remove empty text nodes and merge adjacent text nodes in this node and all   its children.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_node_remove_child" type="function" returnType="DomNode">
	<params>
		<param type="DomNode" name="oldChild"/>
	</params>
</keyword>
<keyword name="dom_node_replace_child" type="function" returnType="DomNode">
	<params>
		<param type="DomNode" name="newChild"/>
		<param type="DomNode" name="oldChild"/>
	</params>
</keyword>
<keyword name="dom_node_set_user_data" type="function" returnType="DomUserData">
	<params>
		<param type="string" name="key"/>
		<param type="DomUserData" name="data"/>
		<param type="userdatahandler" name="handler"/>
	</params>
</keyword>
<keyword name="dom_nodelist_item" type="function" returnType="DOMNode">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <span class="methodname"><strong>DOMNodelist::item</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves a node specified by <code class="parameter">index</code> within the    <a href="class.domnodelist.php" class="classname">DOMNodeList</a> object.  </p>  <div class="tip"><strong class="tip">Tip</strong>   <p class="para">    If you need to know the number of nodes in the collection, use     the <em>length</em> property of the     <a href="class.domnodelist.php" class="classname">DOMNodeList</a> object.   </p>  </div>]]></desc>
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="dom_text_is_whitespace_in_element_content" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="dom_text_replace_whole_text" type="function" returnType="DOMText">
	<params>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="dom_text_split_text" type="function" returnType="DOMText">
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="dom_xpath_evaluate" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMXPath::evaluate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$contextnode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$registerNodeNS</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the given XPath <code class="parameter">expression</code> and returns   a typed result if possible.  </p>]]></desc>
	<params>
		<param type="string" name="expr"/>
		<param type="DOMNode" name="context"/>
	</params>
</keyword>
<keyword name="dom_xpath_evaluate" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>DOMXPath::evaluate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$contextnode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$registerNodeNS</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the given XPath <code class="parameter">expression</code> and returns   a typed result if possible.  </p>]]></desc>
	<params>
		<param type="string" name="expr"/>
	</params>
</keyword>
<keyword name="dom_xpath_query" type="function" returnType="DOMNodeList">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="class.domnodelist.php" class="type DOMNodeList">DOMNodeList</a></span> <span class="methodname"><strong>DOMXPath::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$contextnode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$registerNodeNS</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the given XPath <code class="parameter">expression</code>.  </p>]]></desc>
	<params>
		<param type="string" name="expr"/>
		<param type="DOMNode" name="context"/>
	</params>
</keyword>
<keyword name="dom_xpath_query" type="function" returnType="DOMNodeList">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><a href="class.domnodelist.php" class="type DOMNodeList">DOMNodeList</a></span> <span class="methodname"><strong>DOMXPath::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type"><a href="class.domnode.php" class="type DOMNode">DOMNode</a></span> <code class="parameter">$contextnode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$registerNodeNS</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the given XPath <code class="parameter">expression</code>.  </p>]]></desc>
	<params>
		<param type="string" name="expr"/>
	</params>
</keyword>
<keyword name="dom_xpath_register_ns" type="function" returnType="boolean">
	<params>
		<param type="string" name="prefix"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="dom_xpath_register_php_functions" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DOMAttr::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMAttr::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="DOMCdataSection::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMComment::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMComment::__construct" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="DOMDocument::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="version"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="DOMDocument::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="DOMDocument::__construct" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="DOMDocument::registerNodeClass" type="function" returnType="boolean">
	<params>
		<param type="string" name="baseclass"/>
		<param type="string" name="extendedclass"/>
	</params>
</keyword>
<keyword name="DOMDocumentFragment::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DOMDocumentFragment::appendXML" type="function" returnType="void">
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="DOMElement::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="DOMElement::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMElement::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="DOMEntityReference::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="DOMNode::getNodePath" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="DOMProcessingInstruction::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMProcessingInstruction::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="DOMText::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="DOMText::__construct" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="DOMXPath::__construct" type="function" returnType="void">
	<params>
		<param type="DOMDocument" name="doc"/>
	</params>
</keyword>
<keyword name="EmptyIterator::current" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="EmptyIterator::key" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="EmptyIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="EmptyIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="EmptyIterator::valid" type="function" returnType="false">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ereg" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ereg</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>  ] )</div>  <p class="simpara">   Searches a <code class="parameter">string</code> for matches to the regular   expression given in <code class="parameter">pattern</code> in a case-sensitive   way.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="array" name="registers"/>
	</params>
</keyword>
<keyword name="ereg" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ereg</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>  ] )</div>  <p class="simpara">   Searches a <code class="parameter">string</code> for matches to the regular   expression given in <code class="parameter">pattern</code> in a case-sensitive   way.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="ereg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ereg_replace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="simpara">   This function scans <code class="parameter">string</code> for matches to   <code class="parameter">pattern</code>, then replaces the matched text   with <code class="parameter">replacement</code>.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="replacement"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="eregi" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>eregi</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>  ] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.ereg.php" class="function">ereg()</a></span> except that it   ignores case distinction when matching alphabetic characters.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="array" name="registers"/>
	</params>
</keyword>
<keyword name="eregi" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>eregi</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$regs</code></span>  ] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.ereg.php" class="function">ereg()</a></span> except that it   ignores case distinction when matching alphabetic characters.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="error_get_last" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>error_get_last</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets information about the last error that occurred.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="error_log" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>error_log</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$message_type</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$destination</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$extra_headers</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Sends an error message to the web server&#039;s error log or to a file.  </p>]]></desc>
	<params>
		<param type="string" name="message"/>
		<param type="int" name="message_type"/>
		<param type="string" name="destination"/>
		<param type="string" name="extra_headers"/>
	</params>
</keyword>
<keyword name="error_log" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>error_log</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$message_type</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$destination</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$extra_headers</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Sends an error message to the web server&#039;s error log or to a file.  </p>]]></desc>
	<params>
		<param type="string" name="message"/>
		<param type="int" name="message_type"/>
		<param type="string" name="destination"/>
	</params>
</keyword>
<keyword name="error_log" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>error_log</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$message_type</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$destination</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$extra_headers</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Sends an error message to the web server&#039;s error log or to a file.  </p>]]></desc>
	<params>
		<param type="string" name="message"/>
		<param type="int" name="message_type"/>
	</params>
</keyword>
<keyword name="error_log" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>error_log</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$message_type</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$destination</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$extra_headers</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Sends an error message to the web server&#039;s error log or to a file.  </p>]]></desc>
	<params>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="error_reporting" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>error_reporting</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>error_reporting()</strong></span> function sets the   <a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a>   directive at runtime.  PHP has many levels of errors, using   this function sets that level for the duration (runtime) of   your script. If the optional <code class="parameter">level</code> is   not set, <span class="function"><strong>error_reporting()</strong></span> will just return   the current error reporting level.  </p>]]></desc>
	<params>
		<param type="int" name="new_error_level"/>
	</params>
</keyword>
<keyword name="ErrorException::getSeverity" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="escapeshellcmd" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>escapeshellcmd</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>escapeshellcmd()</strong></span> escapes any characters in a   string that might be used to trick a shell command into executing   arbitrary commands.  This function should be used to make sure   that any data coming from user input is escaped before this data   is passed to the <span class="function"><a href="function.exec.php" class="function">exec()</a></span> or   <span class="function"><a href="function.system.php" class="function">system()</a></span> functions, or to the <a href="language.operators.execution.php" class="link">backtick   operator</a>.  </p>  <p class="para">   Following characters are preceded by a backslash:   <em>#&amp;;`|*?~&lt;&gt;^()[]{}$\</em>, <em>\x0A</em>   and <em>\xFF</em>. <em>&#039;</em> and <em>&quot;</em>   are escaped only if they are not paired. In Windows, all these characters   plus <em>%</em> are replaced by a space instead.  </p>]]></desc>
	<params>
		<param type="string" name="command"/>
	</params>
</keyword>
<keyword name="Exception::__clone" type="function" returnType="Exception">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::__toString" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getCode" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getFile" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getLine" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getMessage" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getTrace" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="Exception::getTraceAsString" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="exif_tagname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>exif_tagname</strong></span>         ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>]]></desc>
	<params>
		<param type="x"/>
	</params>
</keyword>
<keyword name="extract" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>extract</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = EXTR_OVERWRITE</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Import variables from an array into the current symbol table.  </p>  <p class="para">   Checks each key to see whether it has a valid variable name.    It also checks for collisions with existing variables in   the symbol table.  </p>]]></desc>
	<params>
		<param type="array" name="var_array"/>
		<param type="int" name="extract_type"/>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="extract" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>extract</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = EXTR_OVERWRITE</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Import variables from an array into the current symbol table.  </p>  <p class="para">   Checks each key to see whether it has a valid variable name.    It also checks for collisions with existing variables in   the symbol table.  </p>]]></desc>
	<params>
		<param type="array" name="var_array"/>
		<param type="int" name="extract_type"/>
	</params>
</keyword>
<keyword name="extract" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>extract</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = EXTR_OVERWRITE</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Import variables from an array into the current symbol table.  </p>  <p class="para">   Checks each key to see whether it has a valid variable name.    It also checks for collisions with existing variables in   the symbol table.  </p>]]></desc>
	<params>
		<param type="array" name="var_array"/>
	</params>
</keyword>
<keyword name="ezmlm_hash" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ezmlm_hash</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$addr</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>ezmlm_hash()</strong></span> calculates the hash value needed   when keeping EZMLM mailing lists in a MySQL database.  </p>]]></desc>
	<params>
		<param type="string" name="addr"/>
	</params>
</keyword>
<keyword name="fbsql_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_affected_rows()</strong></span> returns the number   of rows affected by the last INSERT, UPDATE or DELETE query   associated with <code class="parameter">link_identifier</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you are using transactions, you need to call    <span class="function"><strong>fbsql_affected_rows()</strong></span> after your INSERT,    UPDATE, or DELETE query, not after the commit.   </p>  </p></blockquote>  <p class="para">   If the last query was a DELETE query with no WHERE clause, all of   the records will have been deleted from the table but this   function will return zero.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When using UPDATE, FrontBase will not update columns where the    new value is the same as the old value.  This creates the    possibility that <span class="function"><strong>fbsql_affected_rows()</strong></span> may not    actually equal the number of rows matched, only the number of    rows that were literally affected by the query.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_affected_rows()</strong></span> returns the number   of rows affected by the last INSERT, UPDATE or DELETE query   associated with <code class="parameter">link_identifier</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you are using transactions, you need to call    <span class="function"><strong>fbsql_affected_rows()</strong></span> after your INSERT,    UPDATE, or DELETE query, not after the commit.   </p>  </p></blockquote>  <p class="para">   If the last query was a DELETE query with no WHERE clause, all of   the records will have been deleted from the table but this   function will return zero.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When using UPDATE, FrontBase will not update columns where the    new value is the same as the old value.  This creates the    possibility that <span class="function"><strong>fbsql_affected_rows()</strong></span> may not    actually equal the number of rows matched, only the number of    rows that were literally affected by the query.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_autocommit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_autocommit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the current autocommit status.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="bool" name="OnOff"/>
	</params>
</keyword>
<keyword name="fbsql_autocommit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_autocommit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the current autocommit status.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_blob_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_blob_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the size of the given BLOB.  </p>]]></desc>
	<params>
		<param type="string" name="blob_handle"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_blob_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_blob_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the size of the given BLOB.  </p>]]></desc>
	<params>
		<param type="string" name="blob_handle"/>
	</params>
</keyword>
<keyword name="fbsql_change_user" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_change_user</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_change_user()</strong></span> changes the logged in user of the   specified connection. If the new user and password authorization fails,    the current connected user stays active.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="database"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_change_user" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_change_user</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_change_user()</strong></span> changes the logged in user of the   specified connection. If the new user and password authorization fails,    the current connected user stays active.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="fbsql_change_user" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_change_user</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_change_user()</strong></span> changes the logged in user of the   specified connection. If the new user and password authorization fails,    the current connected user stays active.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="fbsql_clob_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_clob_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the size of the given CLOB.  </p>]]></desc>
	<params>
		<param type="string" name="clob_handle"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_clob_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_clob_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the size of the given CLOB.  </p>]]></desc>
	<params>
		<param type="string" name="clob_handle"/>
	</params>
</keyword>
<keyword name="fbsql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the connection to the FrontBase server that&#039;s associated with the   specified link identifier.  </p>  <p class="para">   Using <span class="function"><strong>fbsql_close()</strong></span> isn&#039;t usually necessary,   as non-persistent open links are automatically closed at the end   of the script&#039;s execution.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the connection to the FrontBase server that&#039;s associated with the   specified link identifier.  </p>  <p class="para">   Using <span class="function"><strong>fbsql_close()</strong></span> isn&#039;t usually necessary,   as non-persistent open links are automatically closed at the end   of the script&#039;s execution.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_commit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_commit</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Ends the current transaction by writing all inserts, updates and deletes   to the disk and unlocking all row and table locks held by the transaction.   This command is only needed if autocommit is set to false.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_commit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_commit</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Ends the current transaction by writing all inserts, updates and deletes   to the disk and unlocking all row and table locks held by the transaction.   This command is only needed if autocommit is set to false.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_connect()</strong></span> establishes a connection to a   FrontBase server.    </p>  <p class="para">   If a second call is made to <span class="function"><strong>fbsql_connect()</strong></span>   with the same arguments, no new link will be established, but   instead, the link identifier of the already opened link will be   returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.fbsql-close.php" class="function">fbsql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="fbsql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_connect()</strong></span> establishes a connection to a   FrontBase server.    </p>  <p class="para">   If a second call is made to <span class="function"><strong>fbsql_connect()</strong></span>   with the same arguments, no new link will be established, but   instead, the link identifier of the already opened link will be   returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.fbsql-close.php" class="function">fbsql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="fbsql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_connect()</strong></span> establishes a connection to a   FrontBase server.    </p>  <p class="para">   If a second call is made to <span class="function"><strong>fbsql_connect()</strong></span>   with the same arguments, no new link will be established, but   instead, the link identifier of the already opened link will be   returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.fbsql-close.php" class="function">fbsql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="fbsql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_connect()</strong></span> establishes a connection to a   FrontBase server.    </p>  <p class="para">   If a second call is made to <span class="function"><strong>fbsql_connect()</strong></span>   with the same arguments, no new link will be established, but   instead, the link identifier of the already opened link will be   returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.fbsql-close.php" class="function">fbsql_close()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_create_blob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_create_blob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_data</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a BLOB from the given data.  </p>]]></desc>
	<params>
		<param type="string" name="blob_data"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_create_blob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_create_blob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_data</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a BLOB from the given data.  </p>]]></desc>
	<params>
		<param type="string" name="blob_data"/>
	</params>
</keyword>
<keyword name="fbsql_create_clob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_create_clob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_data</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a CLOB from the given data.    </p>]]></desc>
	<params>
		<param type="string" name="clob_data"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_create_clob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_create_clob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_data</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a CLOB from the given data.    </p>]]></desc>
	<params>
		<param type="string" name="clob_data"/>
	</params>
</keyword>
<keyword name="fbsql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_create_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to create a new database on the specified server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="database_options"/>
	</params>
</keyword>
<keyword name="fbsql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_create_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to create a new database on the specified server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_create_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to create a new database on the specified server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_data_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_data_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   )</div>  <p class="para rdfs-comment">   Moves the internal row pointer of the FrontBase result associated with the   specified result identifier to point to the specified row number.  </p>  <p class="para">   The next call to <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span> would return that    row.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="row_number"/>
	</params>
</keyword>
<keyword name="fbsql_database" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_database</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the database name used with the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="fbsql_database" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_database</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the database name used with the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_database_password" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_database_password</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_password</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets and retrieves the database password used by the connection. If a   database is protected by a database password, the user must call this   function before calling <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   If no link is open, the function will try to establish a link as if   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> was called, and use it.  </p>  <p class="para">   This function does not change the database password in the database   nor can it be used to retrieve the database password for a database.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="database_password"/>
	</params>
</keyword>
<keyword name="fbsql_database_password" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_database_password</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_password</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets and retrieves the database password used by the connection. If a   database is protected by a database password, the user must call this   function before calling <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   If no link is open, the function will try to establish a link as if   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> was called, and use it.  </p>  <p class="para">   This function does not change the database password in the database   nor can it be used to retrieve the database password for a database.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Selects a database and executes a query on it.   </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Selects a database and executes a query on it.   </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="fbsql_db_status" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_db_status</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the current status of the specified database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_db_status" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_db_status</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the current status of the specified database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_drop_db" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_drop_db()</strong></span> attempts to drop (remove) an entire   database from the server associated with the specified link identifier.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_drop_db" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_drop_db()</strong></span> attempts to drop (remove) an entire   database from the server associated with the specified link identifier.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_errno</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the numerical value of the error message from previous FrontBase   operation.  </p>  <p class="para">   Errors coming back from the fbsql database backend don&#039;t issue warnings.   Instead, use <span class="function"><strong>fbsql_errno()</strong></span> to retrieve the error code.   Note that this function only returns the error code from the most recently   executed fbsql function (not including <span class="function"><a href="function.fbsql-error.php" class="function">fbsql_error()</a></span>    and <span class="function"><strong>fbsql_errno()</strong></span>), so if you want to use it, make sure   you check the value before calling another fbsql function.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_errno</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the numerical value of the error message from previous FrontBase   operation.  </p>  <p class="para">   Errors coming back from the fbsql database backend don&#039;t issue warnings.   Instead, use <span class="function"><strong>fbsql_errno()</strong></span> to retrieve the error code.   Note that this function only returns the error code from the most recently   executed fbsql function (not including <span class="function"><a href="function.fbsql-error.php" class="function">fbsql_error()</a></span>    and <span class="function"><strong>fbsql_errno()</strong></span>), so if you want to use it, make sure   you check the value before calling another fbsql function.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error message from previous FrontBase operation.  </p>  <p class="para">   Errors coming back from the fbsql database backend don&#039;t issue warnings.   Instead, use <span class="function"><strong>fbsql_error()</strong></span> to retrieve the error text.   Note that this function only returns the error code from the most recently   executed fbsql function (not including <span class="function"><strong>fbsql_error()</strong></span>    and <span class="function"><a href="function.fbsql-errno.php" class="function">fbsql_errno()</a></span>), so if you want to use it, make sure   you check the value before calling another fbsql function.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error message from previous FrontBase operation.  </p>  <p class="para">   Errors coming back from the fbsql database backend don&#039;t issue warnings.   Instead, use <span class="function"><strong>fbsql_error()</strong></span> to retrieve the error text.   Note that this function only returns the error code from the most recently   executed fbsql function (not including <span class="function"><strong>fbsql_error()</strong></span>    and <span class="function"><a href="function.fbsql-errno.php" class="function">fbsql_errno()</a></span>), so if you want to use it, make sure   you check the value before calling another fbsql function.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_fetch_array()</strong></span> is a combination of   <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span> and    <span class="function"><a href="function.fbsql-fetch-assoc.php" class="function">fbsql_fetch_assoc()</a></span>.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>fbsql_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_fetch_array()</strong></span> is a combination of   <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span> and    <span class="function"><a href="function.fbsql-fetch-assoc.php" class="function">fbsql_fetch_assoc()</a></span>.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>fbsql_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_assoc" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Calling <span class="function"><strong>fbsql_fetch_assoc()</strong></span> is equivalent to calling   <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span> with    <strong><code>FBSQL_ASSOC</code></strong> as second parameter. It only returns an   associative array.  </p>  <p class="para">   This is the way <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span> originally   worked.  If you need the numeric indices as well as the   associative, use <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span>.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>fbsql_fetch_assoc()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>fbsql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Used in order to obtain information about fields in a certain query result.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>fbsql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Used in order to obtain information about fields in a certain query result.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_lengths" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_fetch_lengths</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Stores the lengths of each result column in the last row returned by   <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span>,    <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span> and   <span class="function"><a href="function.fbsql-fetch-object.php" class="function">fbsql_fetch_object()</a></span> in an array.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>fbsql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>  <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>fbsql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>  <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.fbsql-fetch-array.php" class="function">fbsql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.fbsql-fetch-row.php" class="function">fbsql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_fetch_row()</strong></span> fetches one row of data from   the result associated with the specified result identifier.   </p>  <p class="para">   Subsequent call to <span class="function"><strong>fbsql_fetch_row()</strong></span> would   return the next row in the result set, or <strong><code>FALSE</code></strong> if there are no   more rows.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_flags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the flags associated with the specified field in a result.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_flags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the flags associated with the specified field in a result.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_len" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_field_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the length of the specified field.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_len" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_field_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the length of the specified field.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_index</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of the specified field index.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_index</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of the specified field index.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset. If the next call to   <span class="function"><a href="function.fbsql-fetch-field.php" class="function">fbsql_fetch_field()</a></span> doesn&#039;t include a field   offset, the field offset specified in   <span class="function"><strong>fbsql_field_seek()</strong></span> will be returned.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset. If the next call to   <span class="function"><a href="function.fbsql-fetch-field.php" class="function">fbsql_fetch_field()</a></span> doesn&#039;t include a field   offset, the field offset specified in   <span class="function"><strong>fbsql_field_seek()</strong></span> will be returned.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_table" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of the table that the specified field is in.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_table" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of the table that the specified field is in.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_field_type()</strong></span> is similar to the   <span class="function"><a href="function.fbsql-field-name.php" class="function">fbsql_field_name()</a></span> function, but the field type is   returned instead.   </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="fbsql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_field_type()</strong></span> is similar to the   <span class="function"><a href="function.fbsql-field-name.php" class="function">fbsql_field_name()</a></span> function, but the field type is   returned instead.   </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Frees all memory associated with the given <code class="parameter">result</code>   identifier.  </p>  <p class="para">   <span class="function"><strong>fbsql_free_result()</strong></span> only needs to be called if   you are concerned about how much memory is being used for queries   that return large result sets.  All associated result memory is   automatically freed at the end of the script&#039;s execution.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_get_autostart_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_get_autostart_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_get_autostart_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fbsql_get_autostart_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_hostname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_hostname</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$host_name</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets or sets the host name used with a connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="host_name"/>
	</params>
</keyword>
<keyword name="fbsql_hostname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_hostname</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$host_name</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets or sets the host name used with a connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_insert_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_insert_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the id generated from the previous INSERT operation which created a   DEFAULT UNIQUE value.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The value of the FrontBase SQL function    <span class="function"><strong>fbsql_insert_id()</strong></span> always contains the most recently    generated DEFAULT UNIQUE value, and is not reset between queries.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_insert_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_insert_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the id generated from the previous INSERT operation which created a   DEFAULT UNIQUE value.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The value of the FrontBase SQL function    <span class="function"><strong>fbsql_insert_id()</strong></span> always contains the most recently    generated DEFAULT UNIQUE value, and is not reset between queries.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Return a result pointer containing the databases available from the   current fbsql daemon. Use the <span class="function"><a href="function.fbsql-tablename.php" class="function">fbsql_tablename()</a></span> to   traverse this result pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Return a result pointer containing the databases available from the   current fbsql daemon. Use the <span class="function"><a href="function.fbsql-tablename.php" class="function">fbsql_tablename()</a></span> to   traverse this result pointer.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about the given table.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about the given table.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
	</params>
</keyword>
<keyword name="fbsql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns a result pointer describing the <code class="parameter">database</code>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns a result pointer describing the <code class="parameter">database</code>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="fbsql_next_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_next_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   When sending more than one SQL statement to the server or   executing a stored procedure with multiple results will cause the   server to return multiple result sets.  This function will test   for additional results available form the server. If an   additional result set exists it will free the existing result set   and prepare to fetch the words from the new result set.    </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of fields in the given <code class="parameter">result</code>    set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of rows in the given <code class="parameter">result</code> set.  </p>  <p class="para">   This function is only valid for SELECT statements. To retrieve the number   of rows returned from a INSERT, UPDATE or DELETE query, use   <span class="function"><a href="function.fbsql-affected-rows.php" class="function">fbsql_affected_rows()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_password" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_password</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the user password used with a connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="fbsql_password" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_password</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the user password used with a connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a persistent connection to a FrontBase server.  </p>  <p class="para">   To set the server port number, use <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   <span class="function"><strong>fbsql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> with two major differences:  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use.  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="fbsql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a persistent connection to a FrontBase server.  </p>  <p class="para">   To set the server port number, use <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   <span class="function"><strong>fbsql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> with two major differences:  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use.  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="fbsql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a persistent connection to a FrontBase server.  </p>  <p class="para">   To set the server port number, use <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   <span class="function"><strong>fbsql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> with two major differences:  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use.  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="fbsql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = ini_get(&quot;fbsql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;fbsql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;fbsql.default_password&quot;)</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a persistent connection to a FrontBase server.  </p>  <p class="para">   To set the server port number, use <span class="function"><a href="function.fbsql-select-db.php" class="function">fbsql_select_db()</a></span>.  </p>  <p class="para">   <span class="function"><strong>fbsql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.fbsql-connect.php" class="function">fbsql_connect()</a></span> with two major differences:  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use.  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends a <code class="parameter">query</code> to the currently active database on   the server.  </p>  <p class="para">   If the query succeeds, you can call <span class="function"><a href="function.fbsql-num-rows.php" class="function">fbsql_num_rows()</a></span> to   find out how many rows were returned for a SELECT statement or   <span class="function"><a href="function.fbsql-affected-rows.php" class="function">fbsql_affected_rows()</a></span> to find out how many rows were   affected by a DELETE, INSERT, REPLACE, or UPDATE statement.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="link_identifier"/>
		<param type="long" name="batch_size"/>
	</params>
</keyword>
<keyword name="fbsql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends a <code class="parameter">query</code> to the currently active database on   the server.  </p>  <p class="para">   If the query succeeds, you can call <span class="function"><a href="function.fbsql-num-rows.php" class="function">fbsql_num_rows()</a></span> to   find out how many rows were returned for a SELECT statement or   <span class="function"><a href="function.fbsql-affected-rows.php" class="function">fbsql_affected_rows()</a></span> to find out how many rows were   affected by a DELETE, INSERT, REPLACE, or UPDATE statement.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fbsql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends a <code class="parameter">query</code> to the currently active database on   the server.  </p>  <p class="para">   If the query succeeds, you can call <span class="function"><a href="function.fbsql-num-rows.php" class="function">fbsql_num_rows()</a></span> to   find out how many rows were returned for a SELECT statement or   <span class="function"><a href="function.fbsql-affected-rows.php" class="function">fbsql_affected_rows()</a></span> to find out how many rows were   affected by a DELETE, INSERT, REPLACE, or UPDATE statement.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="fbsql_read_blob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_read_blob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads BLOB data from the database.  </p>  <p class="para">   If a select statement contains BLOB and/or CLOB columns FrontBase will   return the data directly when data is fetched. This default behavior can   be changed with <span class="function"><a href="function.fbsql-set-lob-mode.php" class="function">fbsql_set_lob_mode()</a></span> so the fetch   functions will return handles to BLOB and CLOB data.  If a handle is   fetched a user must call <span class="function"><strong>fbsql_read_blob()</strong></span> to get the   actual BLOB data from the database.  </p>]]></desc>
	<params>
		<param type="string" name="blob_handle"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_read_blob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_read_blob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads BLOB data from the database.  </p>  <p class="para">   If a select statement contains BLOB and/or CLOB columns FrontBase will   return the data directly when data is fetched. This default behavior can   be changed with <span class="function"><a href="function.fbsql-set-lob-mode.php" class="function">fbsql_set_lob_mode()</a></span> so the fetch   functions will return handles to BLOB and CLOB data.  If a handle is   fetched a user must call <span class="function"><strong>fbsql_read_blob()</strong></span> to get the   actual BLOB data from the database.  </p>]]></desc>
	<params>
		<param type="string" name="blob_handle"/>
	</params>
</keyword>
<keyword name="fbsql_read_clob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_read_clob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads CLOB data from the database.  </p>  <p class="para">   If a select statement contains BLOB and/or CLOB columns FrontBase will   return the data directly when data is fetched. This default behavior can   be changed with <span class="function"><a href="function.fbsql-set-lob-mode.php" class="function">fbsql_set_lob_mode()</a></span> so the fetch   functions will return handles to BLOB and CLOB data.  If a handle is   fetched a user must call <span class="function"><strong>fbsql_read_clob()</strong></span> to get the   actual CLOB data from the database.  </p>]]></desc>
	<params>
		<param type="string" name="clob_handle"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_read_clob" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_read_clob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$clob_handle</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads CLOB data from the database.  </p>  <p class="para">   If a select statement contains BLOB and/or CLOB columns FrontBase will   return the data directly when data is fetched. This default behavior can   be changed with <span class="function"><a href="function.fbsql-set-lob-mode.php" class="function">fbsql_set_lob_mode()</a></span> so the fetch   functions will return handles to BLOB and CLOB data.  If a handle is   fetched a user must call <span class="function"><strong>fbsql_read_clob()</strong></span> to get the   actual CLOB data from the database.  </p>]]></desc>
	<params>
		<param type="string" name="clob_handle"/>
	</params>
</keyword>
<keyword name="fbsql_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fbsql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the contents of one cell from a FrontBase    <code class="parameter">result</code> set.   </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than <span class="function"><strong>fbsql_result()</strong></span>.  </p>  <p class="para">   Calls to <span class="function"><strong>fbsql_result()</strong></span> should not be mixed   with calls to other functions that deal with the result set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="fbsql_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fbsql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the contents of one cell from a FrontBase    <code class="parameter">result</code> set.   </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than <span class="function"><strong>fbsql_result()</strong></span>.  </p>  <p class="para">   Calls to <span class="function"><strong>fbsql_result()</strong></span> should not be mixed   with calls to other functions that deal with the result set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="fbsql_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fbsql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the contents of one cell from a FrontBase    <code class="parameter">result</code> set.   </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than <span class="function"><strong>fbsql_result()</strong></span>.  </p>  <p class="para">   Calls to <span class="function"><strong>fbsql_result()</strong></span> should not be mixed   with calls to other functions that deal with the result set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_rollback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_rollback</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Ends the current transaction by rolling back all statements issued since   last commit.  </p>  <p class="para">   This command is only needed if autocommit is set to false.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_rollback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_rollback</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Ends the current transaction by rolling back all statements issued since   last commit.  </p>  <p class="para">   This command is only needed if autocommit is set to false.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_rows_fetched" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fbsql_rows_fetched</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of rows affected by the last statement.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="fbsql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_select_db</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sets the current active database on the given link identifier.  </p>  <p class="para">   The client contacts FBExec to obtain the port number to use for   the connection to the database. If the database name is a number   the system will use that as a port number and it will not ask   FBExec for the port number.  The FrontBase server can be stared   as FRontBase -FBExec=No -port=&lt;port number&gt; &lt;database   name&gt;.  </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.fbsql-query.php" class="function">fbsql_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_select_db</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sets the current active database on the given link identifier.  </p>  <p class="para">   The client contacts FBExec to obtain the port number to use for   the connection to the database. If the database name is a number   the system will use that as a port number and it will not ask   FBExec for the port number.  The FrontBase server can be stared   as FRontBase -FBExec=No -port=&lt;port number&gt; &lt;database   name&gt;.  </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.fbsql-query.php" class="function">fbsql_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_select_db</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sets the current active database on the given link identifier.  </p>  <p class="para">   The client contacts FBExec to obtain the port number to use for   the connection to the database. If the database name is a number   the system will use that as a port number and it will not ask   FBExec for the port number.  The FrontBase server can be stared   as FRontBase -FBExec=No -port=&lt;port number&gt; &lt;database   name&gt;.  </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.fbsql-query.php" class="function">fbsql_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fbsql_set_characterset" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>fbsql_set_characterset</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$characterset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$in_out_both</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="long" name="charcterset"/>
		<param type="long" name="in_out_both"/>
	</params>
</keyword>
<keyword name="fbsql_set_characterset" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>fbsql_set_characterset</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$characterset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$in_out_both</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="long" name="charcterset"/>
	</params>
</keyword>
<keyword name="fbsql_set_lob_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_set_lob_mode</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$lob_mode</code></span>   )</div>  <p class="para rdfs-comment">   Sets the mode for retrieving LOB data from the database.  </p>  <p class="para">   When BLOB and CLOB data is retrieved in FrontBase it can be retrieved    direct or indirect.  Direct retrieved LOB data will always be fetched no   matter the setting of the lob mode. If the LOB data is less than 512 bytes   it will always be retrieved directly.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="lob_mode"/>
	</params>
</keyword>
<keyword name="fbsql_set_password" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_set_password</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$old_password</code></span>   )</div>  <p class="para rdfs-comment">   Changes the password for the given <code class="parameter">user</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="old_password"/>
	</params>
</keyword>
<keyword name="fbsql_set_transaction" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>fbsql_set_transaction</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$locking</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$isolation</code></span>   )</div>  <p class="para rdfs-comment">   Sets the transaction <code class="parameter">locking</code> and   <code class="parameter">isolation</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="int" name="locking"/>
		<param type="int" name="isolation"/>
	</params>
</keyword>
<keyword name="fbsql_start_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_start_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Start a database on local or remote server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="database_options"/>
	</params>
</keyword>
<keyword name="fbsql_start_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_start_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Start a database on local or remote server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_start_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_start_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_options</code></span>  ]] )</div>  <p class="para rdfs-comment">   Start a database on local or remote server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_stop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_stop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Stops a database on local or remote server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_stop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_stop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Stops a database on local or remote server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="fbsql_table_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_table_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fbsql_table_name()</strong></span> gets the name of the current table in   the given <code class="parameter">result</code> set.  </p>  <p class="para">   The <span class="function"><a href="function.fbsql-num-rows.php" class="function">fbsql_num_rows()</a></span> function may be used to determine   the number of tables in the result pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="fbsql_username" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_username</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the username used for the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="fbsql_username" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fbsql_username</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>  ] )</div>  <p class="para rdfs-comment">   Get or set the username used for the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="fbsql_warnings" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_warnings</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code></span>  ] )</div>  <p class="para rdfs-comment">   Enables or disables FrontBase warnings.  </p>]]></desc>
	<params>
		<param type="int" name="flag"/>
	</params>
</keyword>
<keyword name="fbsql_warnings" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fbsql_warnings</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code></span>  ] )</div>  <p class="para rdfs-comment">   Enables or disables FrontBase warnings.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fclose" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fclose</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   The file pointed to by <code class="parameter">handle</code> is closed.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fdf_add_doc_javascript" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_add_doc_javascript</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$script_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$script_code</code></span>   )</div>  <p class="para rdfs-comment">   Adds a script to the FDF, which Acrobat then adds to the doc-level scripts   of a document, once the FDF is imported into it.   </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="scriptname"/>
		<param type="string" name="script"/>
	</params>
</keyword>
<keyword name="fdf_add_template" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_add_template</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$newpage</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$template</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$rename</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="int" name="newpage"/>
		<param type="string" name="filename"/>
		<param type="string" name="template"/>
		<param type="int" name="rename"/>
	</params>
</keyword>
<keyword name="fdf_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>fdf_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   )</div>  <p class="para rdfs-comment">   Closes the FDF document.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fdf_create</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Creates a new FDF document.   </p>  <p class="para">   This function is needed if one would like to populate input fields in a   PDF document with data.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="fdf_enum_values" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_enum_values</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="callback" name="function"/>
		<param type="mixed" name="userdata"/>
	</params>
</keyword>
<keyword name="fdf_enum_values" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_enum_values</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$userdata</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="callback" name="function"/>
	</params>
</keyword>
<keyword name="fdf_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fdf_errno</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the error code set by the last FDF function call.  </p>  <p class="para">   A textual description of the error may be obtained using with   <span class="function"><a href="function.fdf-error.php" class="function">fdf_error()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="fdf_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_error</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_code</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets a textual description for the FDF error code given in   <code class="parameter">error_code</code>.  </p>]]></desc>
	<params>
		<param type="int" name="errno"/>
	</params>
</keyword>
<keyword name="fdf_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_error</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_code</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets a textual description for the FDF error code given in   <code class="parameter">error_code</code>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fdf_get_ap" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_get_ap</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$face</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the appearance of a <code class="parameter">field</code> (i.e. the value of   the /AP key) and stores it in a file.   </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="face"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fdf_get_attachment" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fdf_get_attachment</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$savepath</code></span>   )</div>  <p class="para rdfs-comment">   Extracts a file uploaded by means of the &quot;file selection&quot; field   <code class="parameter">fieldname</code> and stores it under   <code class="parameter">savepath</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="string" name="savepath"/>
	</params>
</keyword>
<keyword name="fdf_get_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_get_encoding</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   )</div>  <p class="para rdfs-comment">   Gets the value of the <em>/Encoding</em> key.  </p>]]></desc>
	<params>
		<param type="resource" name="fdf"/>
	</params>
</keyword>
<keyword name="fdf_get_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_get_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   )</div>  <p class="para rdfs-comment">   Gets the value of the <em>/F</em> key.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_get_flags" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fdf_get_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$whichflags</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resorce" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="whichflags"/>
	</params>
</keyword>
<keyword name="fdf_get_opt" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fdf_get_opt</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$element</code><span class="initializer"> = -1</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdof"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="element"/>
	</params>
</keyword>
<keyword name="fdf_get_opt" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fdf_get_opt</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$element</code><span class="initializer"> = -1</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdof"/>
		<param type="string" name="fieldname"/>
	</params>
</keyword>
<keyword name="fdf_get_status" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_get_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   )</div>  <p class="para rdfs-comment">   Gets the value of the <em>/STATUS</em> key.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_get_value" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fdf_get_value</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$which</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the value for the requested field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="which"/>
	</params>
</keyword>
<keyword name="fdf_get_value" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fdf_get_value</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$which</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the value for the requested field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
	</params>
</keyword>
<keyword name="fdf_get_version" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_get_version</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>  ] )</div>  <p class="para rdfs-comment">   Return the FDF version for the given document, or the toolkit API version   number if no parameter is given.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_get_version" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_get_version</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>  ] )</div>  <p class="para rdfs-comment">   Return the FDF version for the given document, or the toolkit API version   number if no parameter is given.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="fdf_header" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>fdf_header</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This is a convenience function to set appropriate HTTP headers for FDF   output. It sets the <em>Content-type:</em> to    <em>application/vnd.fdf</em>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="fdf_next_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_next_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the name of the field after the given field. This name can be used   with several functions.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
	</params>
</keyword>
<keyword name="fdf_next_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_next_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the name of the field after the given field. This name can be used   with several functions.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fdf_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Opens a file with form data.   </p>  <p class="para">   You can also use <span class="function"><a href="function.fdf-open-string.php" class="function">fdf_open_string()</a></span> to process the   results of a PDF form POST request.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fdf_open_string" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fdf_open_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$fdf_data</code></span>   )</div>  <p class="para rdfs-comment">   Reads form data from a string.   </p>  <p class="para">   You can use <span class="function"><strong>fdf_open_string()</strong></span> together with   <var class="varname"><var class="varname">$HTTP_FDF_DATA</var></var> to process FDF form input from a remote   client.  </p>]]></desc>
	<params>
		<param type="string" name="fdf_data"/>
	</params>
</keyword>
<keyword name="fdf_remove_item" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_remove_item</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$item</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="item"/>
	</params>
</keyword>
<keyword name="fdf_save" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_save</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   Saves a FDF document.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fdf_save" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_save</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   Saves a FDF document.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_save_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fdf_save_string</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   )</div>  <p class="para rdfs-comment">   Returns the FDF document as a string.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
	</params>
</keyword>
<keyword name="fdf_set_ap" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_ap</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_name</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$face</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$page_number</code></span>   )</div>  <p class="para rdfs-comment">   Sets the appearance of a field (i.e. the value of the    <em>/AP</em> key).  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="face"/>
		<param type="string" name="filename"/>
		<param type="int" name="pagenr"/>
	</params>
</keyword>
<keyword name="fdf_set_encoding" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_encoding</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   )</div>  <p class="para rdfs-comment">   Sets the character encoding for the FDF document.  </p>]]></desc>
	<params>
		<param type="resource" name="fdf_document"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="fdf_set_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$target_frame</code></span>  ] )</div>  <p class="para rdfs-comment">   Selects a different PDF document to display the form results in then the   form it originated from.   </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="filename"/>
		<param type="string" name="target_frame"/>
	</params>
</keyword>
<keyword name="fdf_set_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$target_frame</code></span>  ] )</div>  <p class="para rdfs-comment">   Selects a different PDF document to display the form results in then the   form it originated from.   </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fdf_set_flags" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$whichFlags</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$newFlags</code></span>   )</div>  <p class="para rdfs-comment">   Sets certain flags of the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="whichflags"/>
		<param type="int" name="newflags"/>
	</params>
</keyword>
<keyword name="fdf_set_javascript_action" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_javascript_action</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$trigger</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$script</code></span>   )</div>  <p class="para rdfs-comment">   Sets a javascript action for the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="whichtrigger"/>
		<param type="string" name="script"/>
	</params>
</keyword>
<keyword name="fdf_set_on_import_javascript" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_on_import_javascript</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$script</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_data_import</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="script"/>
		<param type="bool" name="before_data_import"/>
	</params>
</keyword>
<keyword name="fdf_set_opt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_opt</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$element</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   Sets options of the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="element"/>
		<param type="string" name="value"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="fdf_set_status" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   Sets the value of the <em>/STATUS</em> key. When a client   receives a FDF with a status set it will present the value in an alert   box.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="status"/>
	</params>
</keyword>
<keyword name="fdf_set_submit_form_action" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_submit_form_action</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$trigger</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$script</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   )</div>  <p class="para rdfs-comment">   Sets a submit form action for the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="int" name="whichtrigger"/>
		<param type="string" name="url"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="fdf_set_target_frame" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_target_frame</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$frame_name</code></span>   )</div>  <p class="para rdfs-comment">   Sets the target frame to display a result PDF defined with    <span class="function"><strong>fdf_save_file()</strong></span> in.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="target"/>
	</params>
</keyword>
<keyword name="fdf_set_value" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_value</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$isName</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets the <code class="parameter">value</code> for the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="mixed" name="value"/>
		<param type="int" name="isname"/>
	</params>
</keyword>
<keyword name="fdf_set_value" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_value</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fieldname</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$isName</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets the <code class="parameter">value</code> for the given field.  </p>]]></desc>
	<params>
		<param type="resource" name="fdfdoc"/>
		<param type="string" name="fieldname"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="fdf_set_version" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fdf_set_version</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$fdf_document</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$version</code></span>   )</div>  <p class="para rdfs-comment">   Sets the FDF <code class="parameter">version</code> for the given document.  </p>  <p class="para">   Some features supported by this extension are only available in newer FDF   versions.  </p>]]></desc>
	<params>
		<param type="resourece" name="fdfdoc"/>
		<param type="string" name="version"/>
	</params>
</keyword>
<keyword name="feof" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>feof</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   Tests for end-of-file on a file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fflush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fflush</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   This function forces a write of all buffered output to the resource   pointed to by the file <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fgetc" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fgetc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   Gets a character from the given file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fgetcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fgetcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="length"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
		<param type="string" name="escape"/>
	</params>
</keyword>
<keyword name="fgetcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fgetcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="length"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
	</params>
</keyword>
<keyword name="fgetcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fgetcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="length"/>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="fgetcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fgetcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="fgetcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fgetcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Similar to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except that   <span class="function"><strong>fgetcsv()</strong></span> parses the line it reads for fields in   <acronym title="Comma Separated Value">CSV</acronym> format and returns an array containing the fields   read.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fgets" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fgets</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets a line from file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="lengthish"/>
	</params>
</keyword>
<keyword name="fgets" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fgets</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets a line from file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="fgetss" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fgetss</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$allowable_tags</code></span>  ]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span>, except that   <span class="function"><strong>fgetss()</strong></span> attempts to strip any NUL bytes, HTML and PHP tags from   the text it reads.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="lengthish"/>
		<param type="string" name="allowable_tags"/>
	</params>
</keyword>
<keyword name="fgetss" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>fgetss</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$allowable_tags</code></span>  ]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span>, except that   <span class="function"><strong>fgetss()</strong></span> attempts to strip any NUL bytes, HTML and PHP tags from   the text it reads.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="file" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Reads an entire file into an array.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    You can use <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span> to return the contents    of a file as a string.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="file" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Reads an entire file into an array.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    You can use <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span> to return the contents    of a file as a string.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="file" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Reads an entire file into an array.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    You can use <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span> to return the contents    of a file as a string.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="file_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>file_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether a file or directory exists.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="file_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>file_get_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code></span>  ]]]] )</div>  <p class="para rdfs-comment">    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>  <p class="para">   <span class="function"><strong>file_get_contents()</strong></span> is the preferred way to read the   contents of a file into a string.  It will use memory mapping techniques if   supported by your OS to enhance performance.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you&#039;re opening a URI with special characters, such as spaces, you    need to encode the URI with <span class="function"><a href="function.urlencode.php" class="function">urlencode()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="long" name="flags"/>
		<param type="resource" name="context"/>
		<param type="long" name="offset"/>
		<param type="long" name="maxlen"/>
	</params>
</keyword>
<keyword name="file_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>file_get_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code></span>  ]]]] )</div>  <p class="para rdfs-comment">    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>  <p class="para">   <span class="function"><strong>file_get_contents()</strong></span> is the preferred way to read the   contents of a file into a string.  It will use memory mapping techniques if   supported by your OS to enhance performance.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you&#039;re opening a URI with special characters, such as spaces, you    need to encode the URI with <span class="function"><a href="function.urlencode.php" class="function">urlencode()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="long" name="flags"/>
		<param type="resource" name="context"/>
		<param type="long" name="offset"/>
	</params>
</keyword>
<keyword name="file_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>file_get_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code></span>  ]]]] )</div>  <p class="para rdfs-comment">    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>  <p class="para">   <span class="function"><strong>file_get_contents()</strong></span> is the preferred way to read the   contents of a file into a string.  It will use memory mapping techniques if   supported by your OS to enhance performance.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you&#039;re opening a URI with special characters, such as spaces, you    need to encode the URI with <span class="function"><a href="function.urlencode.php" class="function">urlencode()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="long" name="flags"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="file_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>file_get_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code></span>  ]]]] )</div>  <p class="para rdfs-comment">    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>  <p class="para">   <span class="function"><strong>file_get_contents()</strong></span> is the preferred way to read the   contents of a file into a string.  It will use memory mapping techniques if   supported by your OS to enhance performance.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you&#039;re opening a URI with special characters, such as spaces, you    need to encode the URI with <span class="function"><a href="function.urlencode.php" class="function">urlencode()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="long" name="flags"/>
	</params>
</keyword>
<keyword name="file_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>file_get_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code></span>  ]]]] )</div>  <p class="para rdfs-comment">    This function is similar to <span class="function"><a href="function.file.php" class="function">file()</a></span>, except that   <span class="function"><strong>file_get_contents()</strong></span> returns the file in a    <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, starting at the specified <code class="parameter">offset</code>    up to <code class="parameter">maxlen</code> bytes. On failure,    <span class="function"><strong>file_get_contents()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>  <p class="para">   <span class="function"><strong>file_get_contents()</strong></span> is the preferred way to read the   contents of a file into a string.  It will use memory mapping techniques if   supported by your OS to enhance performance.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you&#039;re opening a URI with special characters, such as spaces, you    need to encode the URI with <span class="function"><a href="function.urlencode.php" class="function">urlencode()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="file_put_contents" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>file_put_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">    This function is identical to calling <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,    <span class="function"><a href="function.fwrite.php" class="function">fwrite()</a></span> and <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> successively   to write data to a file.  </p>  <p class="para">   If <code class="parameter">filename</code> does not exist, the file is created.   Otherwise, the existing file is overwritten, unless the    <strong><code>FILE_APPEND</code></strong> flag is set.  </p>]]></desc>
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="data"/>
		<param type="int" name="flags"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="file_put_contents" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>file_put_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">    This function is identical to calling <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,    <span class="function"><a href="function.fwrite.php" class="function">fwrite()</a></span> and <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> successively   to write data to a file.  </p>  <p class="para">   If <code class="parameter">filename</code> does not exist, the file is created.   Otherwise, the existing file is overwritten, unless the    <strong><code>FILE_APPEND</code></strong> flag is set.  </p>]]></desc>
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="data"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="file_put_contents" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>file_put_contents</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">    This function is identical to calling <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,    <span class="function"><a href="function.fwrite.php" class="function">fwrite()</a></span> and <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> successively   to write data to a file.  </p>  <p class="para">   If <code class="parameter">filename</code> does not exist, the file is created.   Otherwise, the existing file is overwritten, unless the    <strong><code>FILE_APPEND</code></strong> flag is set.  </p>]]></desc>
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="data"/>
	</params>
</keyword>
<keyword name="fileatime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fileatime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="simpara">   Gets the last access time of the given file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filectime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>filectime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the inode change time of a file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filegroup" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>filegroup</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the file group. The group ID is returned in numerical format, use   <span class="function"><a href="function.posix-getgrgid.php" class="function">posix_getgrgid()</a></span> to resolve it to a group name.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fileinode" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fileinode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the file inode.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filemtime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>filemtime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the time when the data blocks of a file were being   written to, that is, the time when the content of the file was changed.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fileowner" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fileowner</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the file owner.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fileperms" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fileperms</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets permissions for the given file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filesize" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>filesize</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gets the size for the given file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filetype" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>filetype</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Returns the type of the given file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="filter_has_var" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>filter_has_var</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable_name</code></span>   )</div>]]></desc>
	<params>
		<param type="constant" name="type"/>
		<param type="string" name="variable_name"/>
	</params>
</keyword>
<keyword name="filter_input" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_input</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable_name</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="constant" name="type"/>
		<param type="string" name="variable_name"/>
		<param type="long" name="filter"/>
		<param type="mixed" name="options"/>
	</params>
</keyword>
<keyword name="filter_input" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_input</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable_name</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="constant" name="type"/>
		<param type="string" name="variable_name"/>
		<param type="long" name="filter"/>
	</params>
</keyword>
<keyword name="filter_input" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_input</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$variable_name</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="constant" name="type"/>
		<param type="string" name="variable_name"/>
	</params>
</keyword>
<keyword name="filter_input_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_input_array</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$definition</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$add_empty</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function is useful for retrieving many values without   repetitively calling <span class="function"><a href="function.filter-input.php" class="function">filter_input()</a></span>.  </p>]]></desc>
	<params>
		<param type="constant" name="type"/>
		<param type="mixed" name="options"/>
	</params>
</keyword>
<keyword name="filter_input_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_input_array</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$definition</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$add_empty</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function is useful for retrieving many values without   repetitively calling <span class="function"><a href="function.filter-input.php" class="function">filter_input()</a></span>.  </p>]]></desc>
	<params>
		<param type="constant" name="type"/>
	</params>
</keyword>
<keyword name="filter_var" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_var</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="mixed" name="variable"/>
		<param type="long" name="filter"/>
		<param type="mixed" name="options"/>
	</params>
</keyword>
<keyword name="filter_var" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_var</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="mixed" name="variable"/>
		<param type="long" name="filter"/>
	</params>
</keyword>
<keyword name="filter_var" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_var</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filter</code><span class="initializer"> = FILTER_DEFAULT</span></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$options</code></span>  ]] )</div>]]></desc>
	<params>
		<param type="mixed" name="variable"/>
	</params>
</keyword>
<keyword name="filter_var_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_var_array</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$definition</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$add_empty</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function is useful for retrieving many values without   repetitively calling <span class="function"><a href="function.filter-var.php" class="function">filter_var()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="data"/>
		<param type="mixed" name="options"/>
	</params>
</keyword>
<keyword name="filter_var_array" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>filter_var_array</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$definition</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$add_empty</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function is useful for retrieving many values without   repetitively calling <span class="function"><a href="function.filter-var.php" class="function">filter_var()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="data"/>
	</params>
</keyword>
<keyword name="FilterIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
	</params>
</keyword>
<keyword name="FilterIterator::current" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="FilterIterator::getInnerIterator" type="function" returnType="Iterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="FilterIterator::key" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="FilterIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="FilterIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="FilterIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="flock" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>flock</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$operation</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$wouldblock</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>flock()</strong></span> allows you to perform a simple reader/writer   model which can be used on virtually every platform (including most Unix   derivatives and even Windows).  </p>  <p class="para">   On versions of PHP before 5.3.2, the lock is released also by   <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> (which is also called automatically when script   finished).  </p>  <p class="para">   PHP supports a portable way of locking complete files in an advisory way   (which means all accessing programs have to use the same way of locking   or it will not work). By default, this function will block until the   requested lock is acquired; this may be controlled (on non-Windows   platforms) with the <strong><code>LOCK_NB</code></strong> option documented below.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="operation"/>
		<param type="int" name="&amp;wouldblock"/>
	</params>
</keyword>
<keyword name="flock" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>flock</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$operation</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$wouldblock</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>flock()</strong></span> allows you to perform a simple reader/writer   model which can be used on virtually every platform (including most Unix   derivatives and even Windows).  </p>  <p class="para">   On versions of PHP before 5.3.2, the lock is released also by   <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> (which is also called automatically when script   finished).  </p>  <p class="para">   PHP supports a portable way of locking complete files in an advisory way   (which means all accessing programs have to use the same way of locking   or it will not work). By default, this function will block until the   requested lock is acquired; this may be controlled (on non-Windows   platforms) with the <strong><code>LOCK_NB</code></strong> option documented below.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="operation"/>
	</params>
</keyword>
<keyword name="floor" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>floor</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$value</code></span>    )</div>  <p class="simpara">   Returns the next lowest integer value by rounding down   <code class="parameter">value</code> if necessary.   </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="flush" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>flush</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Flushes the write buffers of PHP and whatever backend PHP is using (CGI,   a web server, etc).  This attempts to push current output all the way to   the browser with a few caveats.  </p>  <p class="para">   <span class="function"><strong>flush()</strong></span> may not be able to override the buffering scheme   of your web server and it has no effect on any client-side buffering in the   browser.  It also doesn&#039;t affect PHP&#039;s userspace output buffering mechanism.   This means you will have to call both <span class="function"><a href="function.ob-flush.php" class="function">ob_flush()</a></span> and   <span class="function"><strong>flush()</strong></span> to flush the ob output buffers if you are using   those.  </p>  <p class="para">   Several servers, especially on Win32, will still buffer the output from   your script until it terminates before transmitting the results to the   browser.  </p>  <p class="para">   Server modules for Apache like mod_gzip may do buffering of their own that   will cause <span class="function"><strong>flush()</strong></span> to not result in data being sent   immediately to the client.  </p>  <p class="para">   Even the browser may buffer its input before displaying it. Netscape, for   example, buffers text until it receives an end-of-line or the beginning of   a tag, and it won&#039;t render tables until the &lt;/table&gt; tag of the   outermost table is seen.  </p>  <p class="para">   Some versions of Microsoft Internet Explorer will only start to display   the page after they have received 256 bytes of output, so you may need to   send extra whitespace before flushing to get those browsers to display the   page.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="fmod" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>fmod</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$x</code></span>    , <span class="methodparam"><span class="type">float</span> <code class="parameter">$y</code></span>    )</div>  <p class="para rdfs-comment">   Returns the floating point remainder of dividing the dividend   (<code class="parameter">x</code>) by the divisor (<code class="parameter">y</code>).   The remainder (<var class="varname"><var class="varname">r</var></var>) is defined as: x = i * y + r, for    some integer <var class="varname"><var class="varname">i</var></var>. If <code class="parameter">y</code> is   non-zero, <var class="varname"><var class="varname">r</var></var> has the same sign as   <code class="parameter">x</code> and a magnitude less than the magnitude of   <code class="parameter">y</code>.  </p>]]></desc>
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="fnmatch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fnmatch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fnmatch()</strong></span> checks if the passed <code class="parameter">string</code> would   match the given shell wildcard <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="fnmatch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>fnmatch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fnmatch()</strong></span> checks if the passed <code class="parameter">string</code> would   match the given shell wildcard <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="fopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fopen()</strong></span> binds a named resource, specified by   <code class="parameter">filename</code>, to a stream.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="fopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fopen()</strong></span> binds a named resource, specified by   <code class="parameter">filename</code>, to a stream.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="fopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fopen()</strong></span> binds a named resource, specified by   <code class="parameter">filename</code>, to a stream.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="fprintf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fprintf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Write a string produced according to <code class="parameter">format</code> to the   stream resource specified by <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="fprintf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fprintf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Write a string produced according to <code class="parameter">format</code> to the   stream resource specified by <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="fprintf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fprintf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Write a string produced according to <code class="parameter">format</code> to the   stream resource specified by <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="fputcsv" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fputcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$fields</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fputcsv()</strong></span> formats a line (passed as a   <code class="parameter">fields</code> array) as CSV and write it (terminated by a   newline) to the specified file <code class="parameter">handle</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="array" name="fields"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
	</params>
</keyword>
<keyword name="fputcsv" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fputcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$fields</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fputcsv()</strong></span> formats a line (passed as a   <code class="parameter">fields</code> array) as CSV and write it (terminated by a   newline) to the specified file <code class="parameter">handle</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="array" name="fields"/>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="fputcsv" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>fputcsv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$fields</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>fputcsv()</strong></span> formats a line (passed as a   <code class="parameter">fields</code> array) as CSV and write it (terminated by a   newline) to the specified file <code class="parameter">handle</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="array" name="fields"/>
	</params>
</keyword>
<keyword name="frenchtojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>frenchtojd</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   Converts a date from the French Republican Calendar to a Julian   Day Count.  </p>  <p class="para">   These routines only convert dates in years 1 through 14   (Gregorian dates 22 September 1792 through 22 September   1806). This more than covers the period when the calendar was in   use.  </p>]]></desc>
	<params>
		<param type="int" name="month"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="fscanf" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fscanf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>fscanf()</strong></span> is similar to   <span class="function"><a href="function.sscanf.php" class="function">sscanf()</a></span>, but it takes its input from a file   associated with <code class="parameter">handle</code> and interprets the   input according to the specified <code class="parameter">format</code>, which is   described in the documentation for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>.   </p>  <p class="para">   Any whitespace in the format string matches any whitespace in the input   stream. This means that even a tab <em>\t</em> in the format   string can match a single space character in the input stream.  </p>  <p class="para">   Each call to <span class="function"><strong>fscanf()</strong></span> reads one line from the file.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="fscanf" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>fscanf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>fscanf()</strong></span> is similar to   <span class="function"><a href="function.sscanf.php" class="function">sscanf()</a></span>, but it takes its input from a file   associated with <code class="parameter">handle</code> and interprets the   input according to the specified <code class="parameter">format</code>, which is   described in the documentation for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>.   </p>  <p class="para">   Any whitespace in the format string matches any whitespace in the input   stream. This means that even a tab <em>\t</em> in the format   string can match a single space character in the input stream.  </p>  <p class="para">   Each call to <span class="function"><strong>fscanf()</strong></span> reads one line from the file.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="fsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Initiates a socket connection to the resource specified by   <code class="parameter">hostname</code>.  </p>  <p class="para">   PHP supports targets in the Internet and Unix domains as described in   <a href="transports.php" class="xref">List of Supported Socket Transports</a>.  A list of supported transports can also be   retrieved using <span class="function"><a href="function.stream-get-transports.php" class="function">stream_get_transports()</a></span>.  </p>  <p class="para">   The socket will by default be opened in blocking mode.  You can   switch it to non-blocking mode by using   <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.  </p>  <p class="para">   The function <span class="function"><a href="function.stream-socket-client.php" class="function">stream_socket_client()</a></span> is similar but   provides a richer set of options, including non-blocking connection and the   ability to provide a stream context.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
		<param type="string" name="errstr"/>
		<param type="float" name="timeout"/>
	</params>
</keyword>
<keyword name="fsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Initiates a socket connection to the resource specified by   <code class="parameter">hostname</code>.  </p>  <p class="para">   PHP supports targets in the Internet and Unix domains as described in   <a href="transports.php" class="xref">List of Supported Socket Transports</a>.  A list of supported transports can also be   retrieved using <span class="function"><a href="function.stream-get-transports.php" class="function">stream_get_transports()</a></span>.  </p>  <p class="para">   The socket will by default be opened in blocking mode.  You can   switch it to non-blocking mode by using   <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.  </p>  <p class="para">   The function <span class="function"><a href="function.stream-socket-client.php" class="function">stream_socket_client()</a></span> is similar but   provides a richer set of options, including non-blocking connection and the   ability to provide a stream context.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
		<param type="string" name="errstr"/>
	</params>
</keyword>
<keyword name="fsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Initiates a socket connection to the resource specified by   <code class="parameter">hostname</code>.  </p>  <p class="para">   PHP supports targets in the Internet and Unix domains as described in   <a href="transports.php" class="xref">List of Supported Socket Transports</a>.  A list of supported transports can also be   retrieved using <span class="function"><a href="function.stream-get-transports.php" class="function">stream_get_transports()</a></span>.  </p>  <p class="para">   The socket will by default be opened in blocking mode.  You can   switch it to non-blocking mode by using   <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.  </p>  <p class="para">   The function <span class="function"><a href="function.stream-socket-client.php" class="function">stream_socket_client()</a></span> is similar but   provides a richer set of options, including non-blocking connection and the   ability to provide a stream context.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
	</params>
</keyword>
<keyword name="fsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>fsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Initiates a socket connection to the resource specified by   <code class="parameter">hostname</code>.  </p>  <p class="para">   PHP supports targets in the Internet and Unix domains as described in   <a href="transports.php" class="xref">List of Supported Socket Transports</a>.  A list of supported transports can also be   retrieved using <span class="function"><a href="function.stream-get-transports.php" class="function">stream_get_transports()</a></span>.  </p>  <p class="para">   The socket will by default be opened in blocking mode.  You can   switch it to non-blocking mode by using   <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.  </p>  <p class="para">   The function <span class="function"><a href="function.stream-socket-client.php" class="function">stream_socket_client()</a></span> is similar but   provides a richer set of options, including non-blocking connection and the   ability to provide a stream context.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="fstat" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>fstat</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   Gathers the statistics of the file opened by the file   pointer <code class="parameter">handle</code>. This function is similar to the   <span class="function"><a href="function.stat.php" class="function">stat()</a></span> function except that it operates   on an open file pointer instead of a filename.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="ftell" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftell</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   Returns the position of the file pointer referenced by <code class="parameter">handle</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="ftok" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftok</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$proj</code></span>   )</div>  <p class="para rdfs-comment">   The function converts the <code class="parameter">pathname</code> of an existing   accessible file and a project identifier into an   <em>integer</em> for use with for example   <span class="function"><a href="function.shmop-open.php" class="function">shmop_open()</a></span> and other System V IPC keys.   </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="string" name="proj"/>
	</params>
</keyword>
<keyword name="ftp_alloc" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_alloc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$filesize</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$result</code></span>  ] )</div>  <p class="para rdfs-comment">   Sends an <em>ALLO</em> command to the remote FTP server to    allocate space for a file to be uploaded.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Many FTP servers do not support this command.  These servers may return a failure     code (<strong><code>FALSE</code></strong>) indicating the command is not supported or a success code (<strong><code>TRUE</code></strong>)    to indicate that pre-allocation is not necessary and the client should continue    as though the operation were successful.  Because of this, it may be best to reserve    this function for servers which explicitly require preallocation.   </p>  </p></blockquote>  <p class="para">  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="size"/>
		<param type="" name="&amp;response"/>
	</params>
</keyword>
<keyword name="ftp_alloc" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_alloc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$filesize</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$result</code></span>  ] )</div>  <p class="para rdfs-comment">   Sends an <em>ALLO</em> command to the remote FTP server to    allocate space for a file to be uploaded.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Many FTP servers do not support this command.  These servers may return a failure     code (<strong><code>FALSE</code></strong>) indicating the command is not supported or a success code (<strong><code>TRUE</code></strong>)    to indicate that pre-allocation is not necessary and the client should continue    as though the operation were successful.  Because of this, it may be best to reserve    this function for servers which explicitly require preallocation.   </p>  </p></blockquote>  <p class="para">  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="size"/>
	</params>
</keyword>
<keyword name="ftp_cdup" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_cdup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   )</div>  <p class="para rdfs-comment">    Changes to the parent directory.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="ftp_chdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_chdir</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">    Changes the current directory to the specified one.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="ftp_chmod" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_chmod</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">    Sets the permissions on the specified remote file to    <code class="parameter">mode</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="mode"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="ftp_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_connect()</strong></span> opens an FTP connection to the   specified <code class="parameter">host</code>.    </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="int" name="port"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="ftp_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_connect()</strong></span> opens an FTP connection to the   specified <code class="parameter">host</code>.    </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="ftp_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_connect()</strong></span> opens an FTP connection to the   specified <code class="parameter">host</code>.    </p>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="ftp_delete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_delete</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_delete()</strong></span> deletes the file specified by   <code class="parameter">path</code> from the FTP server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="ftp_exec" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   )</div>  <p class="para rdfs-comment">   Sends a SITE EXEC <code class="parameter">command</code> request to the FTP   server.   </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="command"/>
	</params>
</keyword>
<keyword name="ftp_fget" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_fget</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_fget()</strong></span> retrieves <code class="parameter">remote_file</code>   from the FTP server, and writes it to the given file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="resource" name="fp"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
		<param type="int" name="resumepos"/>
	</params>
</keyword>
<keyword name="ftp_fget" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_fget</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_fget()</strong></span> retrieves <code class="parameter">remote_file</code>   from the FTP server, and writes it to the given file pointer.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="resource" name="fp"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_fput" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_fput</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_fput()</strong></span> uploads the data from a file pointer   to a remote file on the FTP server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="resource" name="fp"/>
		<param type="int" name="mode"/>
		<param type="int" name="startpos"/>
	</params>
</keyword>
<keyword name="ftp_fput" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_fput</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_fput()</strong></span> uploads the data from a file pointer   to a remote file on the FTP server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="resource" name="fp"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_get" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_get</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_get()</strong></span> retrieves a remote file from the FTP server,   and saves it into a local file.   </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="local_file"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
		<param type="int" name="resume_pos"/>
	</params>
</keyword>
<keyword name="ftp_get" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_get</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_get()</strong></span> retrieves a remote file from the FTP server,   and saves it into a local file.   </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="local_file"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_get_option" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ftp_get_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the value for the requested    <code class="parameter">option</code> from the specified FTP connection.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="option"/>
	</params>
</keyword>
<keyword name="ftp_mdtm" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_mdtm</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_mdtm()</strong></span> gets the last modified time for a remote   file.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Not all servers support this feature!   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>ftp_mdtm()</strong></span> does not work with directories.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="ftp_mkdir" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ftp_mkdir</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">    Creates the specified <code class="parameter">directory</code> on the FTP server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="ftp_nb_continue" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_continue</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   )</div>  <p class="para rdfs-comment">    Continues retrieving/sending a file non-blocking.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="ftp_nb_fget" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_fget</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_fget()</strong></span> retrieves a remote file from the FTP    server.  </p>  <p class="para">   The difference between this function and <span class="function"><a href="function.ftp-fget.php" class="function">ftp_fget()</a></span> is    that this function retrieves the file asynchronously, so your program can    perform other operations while the file is being downloaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="resource" name="fp"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
		<param type="int" name="resumepos"/>
	</params>
</keyword>
<keyword name="ftp_nb_fget" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_fget</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_fget()</strong></span> retrieves a remote file from the FTP    server.  </p>  <p class="para">   The difference between this function and <span class="function"><a href="function.ftp-fget.php" class="function">ftp_fget()</a></span> is    that this function retrieves the file asynchronously, so your program can    perform other operations while the file is being downloaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="resource" name="fp"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_nb_fput" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_fput</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_fput()</strong></span> uploads the data from a file pointer to   a remote file on the FTP server.  </p>  <p class="para">   The difference between this function and the <span class="function"><a href="function.ftp-fput.php" class="function">ftp_fput()</a></span>    is that this function uploads the file asynchronously, so your program can   perform other operations while the file is being uploaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="resource" name="fp"/>
		<param type="int" name="mode"/>
		<param type="int" name="startpos"/>
	</params>
</keyword>
<keyword name="ftp_nb_fput" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_fput</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_fput()</strong></span> uploads the data from a file pointer to   a remote file on the FTP server.  </p>  <p class="para">   The difference between this function and the <span class="function"><a href="function.ftp-fput.php" class="function">ftp_fput()</a></span>    is that this function uploads the file asynchronously, so your program can   perform other operations while the file is being uploaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="resource" name="fp"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_nb_get" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_get</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_get()</strong></span> retrieves a remote file from the FTP server,   and saves it into a local file.   </p>  <p class="para">   The difference between this function and <span class="function"><a href="function.ftp-get.php" class="function">ftp_get()</a></span> is that   this function retrieves the file asynchronously, so your program can perform    other operations while the file is being downloaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="local_file"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
		<param type="int" name="resume_pos"/>
	</params>
</keyword>
<keyword name="ftp_nb_get" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_get</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resumepos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_get()</strong></span> retrieves a remote file from the FTP server,   and saves it into a local file.   </p>  <p class="para">   The difference between this function and <span class="function"><a href="function.ftp-get.php" class="function">ftp_get()</a></span> is that   this function retrieves the file asynchronously, so your program can perform    other operations while the file is being downloaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="local_file"/>
		<param type="string" name="remote_file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_nb_put" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_put</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_put()</strong></span> stores a local file on the FTP server.  </p>  <p class="para">   The difference between this function and the <span class="function"><a href="function.ftp-put.php" class="function">ftp_put()</a></span>   is that this function uploads the file asynchronously, so your program can   perform other operations while the file is being uploaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="string" name="local_file"/>
		<param type="int" name="mode"/>
		<param type="int" name="startpos"/>
	</params>
</keyword>
<keyword name="ftp_nb_put" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ftp_nb_put</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$startpos</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_nb_put()</strong></span> stores a local file on the FTP server.  </p>  <p class="para">   The difference between this function and the <span class="function"><a href="function.ftp-put.php" class="function">ftp_put()</a></span>   is that this function uploads the file asynchronously, so your program can   perform other operations while the file is being uploaded.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="remote_file"/>
		<param type="string" name="local_file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ftp_nlist" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ftp_nlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="ftp_pasv" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_pasv</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pasv</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_pasv()</strong></span> turns on or off passive mode. In   passive mode, data connections are initiated by the client,   rather than by the server.   It may be needed if the client is behind firewall.  </p>  <p class="para">   Please note that <span class="function"><strong>ftp_pasv()</strong></span> can only be called after a   successfull login or otherwise it will fail.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="bool" name="pasv"/>
	</params>
</keyword>
<keyword name="ftp_pwd" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ftp_pwd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   )</div>  <p class="para rdfs-comment">  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="ftp_raw" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ftp_raw</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   )</div>  <p class="para rdfs-comment">   Sends an arbitrary <code class="parameter">command</code> to the FTP server.   </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="command"/>
	</params>
</keyword>
<keyword name="ftp_rawlist" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ftp_rawlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_rawlist()</strong></span> executes the FTP    <strong class="command">LIST</strong> command, and returns the result as an array.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
		<param type="bool" name="recursive"/>
	</params>
</keyword>
<keyword name="ftp_rawlist" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ftp_rawlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_rawlist()</strong></span> executes the FTP    <strong class="command">LIST</strong> command, and returns the result as an array.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="ftp_rename" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_rename</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$oldname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$newname</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_rename()</strong></span> renames a file or a directory on the FTP   server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="src"/>
		<param type="string" name="dest"/>
	</params>
</keyword>
<keyword name="ftp_rmdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_rmdir</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">    Removes the specified <code class="parameter">directory</code> on the FTP server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="ftp_set_option" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_set_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   This function controls various runtime options for the specified FTP    stream.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="option"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="ftp_site" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ftp_site</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$ftp_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_site()</strong></span> sends the given <em>SITE</em>    command to the FTP server.  </p>  <p class="para">   <em>SITE</em> commands are not standardized, and vary from server   to server. They are useful for handling such things as file permissions and    group membership.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="cmd"/>
	</params>
</keyword>
<keyword name="ftp_ssl_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_ssl_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_ssl_connect()</strong></span> opens an explicit SSL-FTP connection to the   specified <code class="parameter">host</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <strong>Why this function may not exist</strong><br />   <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is only available if both    the ftp module and the <a href="ref.openssl.php" class="link">OpenSSL</a>    support is built statically into php, this means that on Windows this    function will be undefined in the official PHP builds. To make this    function available on Windows you must compile your own PHP binaries.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is not intended for use with sFTP.    To use sFTP with PHP, please see <span class="function"><a href="function.ssh2-sftp.php" class="function">ssh2_sftp()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="int" name="port"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="ftp_ssl_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_ssl_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_ssl_connect()</strong></span> opens an explicit SSL-FTP connection to the   specified <code class="parameter">host</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <strong>Why this function may not exist</strong><br />   <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is only available if both    the ftp module and the <a href="ref.openssl.php" class="link">OpenSSL</a>    support is built statically into php, this means that on Windows this    function will be undefined in the official PHP builds. To make this    function available on Windows you must compile your own PHP binaries.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is not intended for use with sFTP.    To use sFTP with PHP, please see <span class="function"><a href="function.ssh2-sftp.php" class="function">ssh2_sftp()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="ftp_ssl_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ftp_ssl_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 21</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 90</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ftp_ssl_connect()</strong></span> opens an explicit SSL-FTP connection to the   specified <code class="parameter">host</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <strong>Why this function may not exist</strong><br />   <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is only available if both    the ftp module and the <a href="ref.openssl.php" class="link">OpenSSL</a>    support is built statically into php, this means that on Windows this    function will be undefined in the official PHP builds. To make this    function available on Windows you must compile your own PHP binaries.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>ftp_ssl_connect()</strong></span> is not intended for use with sFTP.    To use sFTP with PHP, please see <span class="function"><a href="function.ssh2-sftp.php" class="function">ssh2_sftp()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="gd_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gd_info</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets information about the version and capabilities of the installed GD   library.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_browser" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>get_browser</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_agent</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return_array</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to determine the capabilities of the user&#039;s browser, by looking   up the browser&#039;s information in the <var class="filename">browscap.ini</var>   file.  </p>]]></desc>
	<params>
		<param type="string" name="browser_name"/>
		<param type="bool" name="return_array"/>
	</params>
</keyword>
<keyword name="get_browser" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>get_browser</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_agent</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return_array</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to determine the capabilities of the user&#039;s browser, by looking   up the browser&#039;s information in the <var class="filename">browscap.ini</var>   file.  </p>]]></desc>
	<params>
		<param type="string" name="browser_name"/>
	</params>
</keyword>
<keyword name="get_browser" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>get_browser</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_agent</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return_array</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to determine the capabilities of the user&#039;s browser, by looking   up the browser&#039;s information in the <var class="filename">browscap.ini</var>   file.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_cfg_var" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_cfg_var</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code></span>   )</div>  <p class="para rdfs-comment">   Gets the value of a PHP configuration <code class="parameter">option</code>.  </p>  <p class="para">   This function will not return configuration information set when the PHP   was compiled, or read from an Apache configuration file.  </p>  <p class="para">   To check whether the system is using a <a href="configuration.file.php" class="link">configuration file</a>, try retrieving the   value of the cfg_file_path configuration setting. If this is available, a   configuration file is being used.  </p>]]></desc>
	<params>
		<param type="string" name="option_name"/>
	</params>
</keyword>
<keyword name="get_class" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_class</strong></span>    ([ <span class="methodparam"><span class="type">object</span> <code class="parameter">$object</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the name of the class of the given <code class="parameter">object</code>.  </p>]]></desc>
	<params>
		<param type="object" name="object"/>
	</params>
</keyword>
<keyword name="get_class" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_class</strong></span>    ([ <span class="methodparam"><span class="type">object</span> <code class="parameter">$object</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the name of the class of the given <code class="parameter">object</code>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_class_methods" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_class_methods</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$class_name</code></span>   )</div>  <p class="para rdfs-comment">   Gets the class methods names.  </p>]]></desc>
	<params>
		<param type="mixed" name="class"/>
	</params>
</keyword>
<keyword name="get_class_vars" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_class_vars</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   )</div>  <p class="para rdfs-comment">   Get the default properties of the given class.  </p>]]></desc>
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="get_current_user" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_current_user</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Returns the name of the owner of the current PHP script.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_declared_classes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_declared_classes</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the declared classes.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_declared_interfaces" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_declared_interfaces</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the declared interfaces.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_defined_constants" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_defined_constants</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$categorize</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the names and values of all the constants currently defined.   This includes those created by extensions as well as those created with   the <span class="function"><a href="function.define.php" class="function">define()</a></span> function.  </p>]]></desc>
	<params>
		<param type="bool" name="categorize"/>
	</params>
</keyword>
<keyword name="get_defined_constants" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_defined_constants</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$categorize</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the names and values of all the constants currently defined.   This includes those created by extensions as well as those created with   the <span class="function"><a href="function.define.php" class="function">define()</a></span> function.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_defined_functions" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_defined_functions</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets an array of all defined functions.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_defined_vars" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_defined_vars</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function returns a multidimensional array containing a list of   all defined variables, be them environment, server or user-defined   variables, within the scope that <span class="function"><strong>get_defined_vars()</strong></span> is   called.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_extension_funcs" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_extension_funcs</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$module_name</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the names of all the functions defined in   the module indicated by <code class="parameter">module_name</code>.  </p>]]></desc>
	<params>
		<param type="string" name="extension_name"/>
	</params>
</keyword>
<keyword name="get_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_headers</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>get_headers()</strong></span> returns an array with the headers sent   by the server in response to a HTTP request.  </p>]]></desc>
	<params>
		<param type="string" name="url"/>
		<param type="int" name="format"/>
	</params>
</keyword>
<keyword name="get_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_headers</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>get_headers()</strong></span> returns an array with the headers sent   by the server in response to a HTTP request.  </p>]]></desc>
	<params>
		<param type="string" name="url"/>
	</params>
</keyword>
<keyword name="get_html_translation_table" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_html_translation_table</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$table</code><span class="initializer"> = HTML_SPECIALCHARS</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>get_html_translation_table()</strong></span> will return the   translation table that is used internally for   <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Special characters can be encoded in several ways. E.g.    <em>&quot;</em> can be encoded as <em>&amp;quot;</em>,    <em>&amp;#34;</em> or <em>&amp;#x22</em>.    <span class="function"><strong>get_html_translation_table()</strong></span> returns only the form used    by <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and    <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="table"/>
		<param type="int" name="quote_style"/>
	</params>
</keyword>
<keyword name="get_html_translation_table" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_html_translation_table</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$table</code><span class="initializer"> = HTML_SPECIALCHARS</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>get_html_translation_table()</strong></span> will return the   translation table that is used internally for   <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Special characters can be encoded in several ways. E.g.    <em>&quot;</em> can be encoded as <em>&amp;quot;</em>,    <em>&amp;#34;</em> or <em>&amp;#x22</em>.    <span class="function"><strong>get_html_translation_table()</strong></span> returns only the form used    by <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and    <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="table"/>
	</params>
</keyword>
<keyword name="get_html_translation_table" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_html_translation_table</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$table</code><span class="initializer"> = HTML_SPECIALCHARS</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>get_html_translation_table()</strong></span> will return the   translation table that is used internally for   <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Special characters can be encoded in several ways. E.g.    <em>&quot;</em> can be encoded as <em>&amp;quot;</em>,    <em>&amp;#34;</em> or <em>&amp;#x22</em>.    <span class="function"><strong>get_html_translation_table()</strong></span> returns only the form used    by <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> and    <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_include_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_include_path</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Gets the current <a href="ini.core.php#ini.include-path" class="link">include_path</a>   configuration option value.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_included_files" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_included_files</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the names of all files that have been included using   <span class="function"><a href="function.include.php" class="function">include</a></span>, <span class="function"><a href="function.include-once.php" class="function">include_once</a></span>,   <span class="function"><a href="function.require.php" class="function">require</a></span> or <span class="function"><a href="function.require-once.php" class="function">require_once</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="get_loaded_extensions" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_loaded_extensions</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$zend_extensions</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns the names of all the modules compiled and   loaded in the PHP interpreter.  </p>]]></desc>
	<params>
		<param type="bool" name="zend_extensions"/>
	</params>
</keyword>
<keyword name="get_loaded_extensions" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_loaded_extensions</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$zend_extensions</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns the names of all the modules compiled and   loaded in the PHP interpreter.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_meta_tags" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_meta_tags</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Opens <code class="parameter">filename</code> and parses it line by line for   &lt;meta&gt; tags in the file. The parsing stops at   <em>&lt;/head&gt;</em>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="get_meta_tags" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_meta_tags</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_include_path</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Opens <code class="parameter">filename</code> and parses it line by line for   &lt;meta&gt; tags in the file. The parsing stops at   <em>&lt;/head&gt;</em>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="get_object_vars" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>get_object_vars</strong></span>    ( <span class="methodparam"><span class="type">object</span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Gets the accessible non-static properties of the given    <code class="parameter">object</code> according to scope.  </p>]]></desc>
	<params>
		<param type="object" name="obj"/>
	</params>
</keyword>
<keyword name="get_parent_class" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_parent_class</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the parent class name for object or class.  </p>]]></desc>
	<params>
		<param type="mixed" name="object"/>
	</params>
</keyword>
<keyword name="get_parent_class" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_parent_class</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the parent class name for object or class.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="get_resource_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>get_resource_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   This function gets the type of the given resource.  </p>]]></desc>
	<params>
		<param type="resource" name="res"/>
	</params>
</keyword>
<keyword name="getallheaders" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getallheaders</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Fetches all HTTP headers from the current request.  </p>  <p class="para">   This function is an alias for <span class="function"><a href="function.apache-request-headers.php" class="function">apache_request_headers()</a></span>.   Please read the <span class="function"><a href="function.apache-request-headers.php" class="function">apache_request_headers()</a></span>   documentation for more information on how this function works.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getArchiveComment" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getCommentIndex" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="getCommentName" type="function" returnType="string">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="getdate" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getdate</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an associative <span class="type"><a href="language.types.array.php" class="type array">array</a></span> containing the date   information of the <code class="parameter">timestamp</code>, or the current   local time if no <code class="parameter">timestamp</code> is given.  </p>]]></desc>
	<params>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="getdate" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getdate</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an associative <span class="type"><a href="language.types.array.php" class="type array">array</a></span> containing the date   information of the <code class="parameter">timestamp</code>, or the current   local time if no <code class="parameter">timestamp</code> is given.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="getenv" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>getenv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$varname</code></span>   )</div>  <p class="para rdfs-comment">   Gets the value of an environment variable.  </p>  <p class="para">   You can see a list of all the environmental variables by using   <span class="function"><a href="function.phpinfo.php" class="function">phpinfo()</a></span>. Many of these variables are listed within   <a href="http://www.faqs.org/rfcs/rfc3875" class="link external">&raquo;&nbsp;RFC 3875</a>, specifically   section 4.1, &quot;Request Meta-Variables&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="varname"/>
	</params>
</keyword>
<keyword name="getFromIndex" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
		<param type="int" name="len"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="getFromIndex" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="getFromIndex" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
	</params>
</keyword>
<keyword name="getFromName" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
		<param type="int" name="len"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="getFromName" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="getFromName" type="function" returnType="string">
	<params>
		<param type="string" name="entryname"/>
	</params>
</keyword>
<keyword name="gethostbyaddr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gethostbyaddr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$ip_address</code></span>   )</div>  <p class="para rdfs-comment">   Returns the host name of the Internet host specified by   <code class="parameter">ip_address</code>.  </p>]]></desc>
	<params>
		<param type="string" name="ip_address"/>
	</params>
</keyword>
<keyword name="gethostbyname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gethostbyname</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   )</div>  <p class="para rdfs-comment">   Returns the IPv4 address of the Internet host specified by   <code class="parameter">hostname</code>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="gethostbynamel" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gethostbynamel</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   )</div>  <p class="para rdfs-comment">   Returns a list of IPv4 addresses to which the Internet host   specified by <code class="parameter">hostname</code> resolves.   </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="getimagesize" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getimagesize</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$imageinfo</code></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>getimagesize()</strong></span> function will determine the   size of any given image file and return the dimensions along with   the file type and a <em>height/width</em> text string to be used inside a   normal <acronym title="Hyper Text Markup Language">HTML</acronym> <code class="tag">IMG</code> tag and the   correspondant <acronym title="Hypertext Transfer Protocol">HTTP</acronym> content type.  </p>  <p class="para">   <span class="function"><strong>getimagesize()</strong></span> can also return some more information   in <code class="parameter">imageinfo</code> parameter.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    Note that JPC and JP2 are capable of having components with different     bit depths. In this case, the value for &quot;bits&quot; is the highest bit depth encountered. Also, JP2    files may contain <em>multiple JPEG 2000 codestreams</em>. In this case,    <span class="function"><strong>getimagesize()</strong></span> returns the values for the first    codestream it encounters in the root of the file.   </span>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    The information about icons are retrieved from the icon with the highest    bitrate.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="imagefile"/>
		<param type="array" name="info"/>
	</params>
</keyword>
<keyword name="getimagesize" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getimagesize</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$imageinfo</code></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>getimagesize()</strong></span> function will determine the   size of any given image file and return the dimensions along with   the file type and a <em>height/width</em> text string to be used inside a   normal <acronym title="Hyper Text Markup Language">HTML</acronym> <code class="tag">IMG</code> tag and the   correspondant <acronym title="Hypertext Transfer Protocol">HTTP</acronym> content type.  </p>  <p class="para">   <span class="function"><strong>getimagesize()</strong></span> can also return some more information   in <code class="parameter">imageinfo</code> parameter.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    Note that JPC and JP2 are capable of having components with different     bit depths. In this case, the value for &quot;bits&quot; is the highest bit depth encountered. Also, JP2    files may contain <em>multiple JPEG 2000 codestreams</em>. In this case,    <span class="function"><strong>getimagesize()</strong></span> returns the values for the first    codestream it encounters in the root of the file.   </span>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    The information about icons are retrieved from the icon with the highest    bitrate.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="imagefile"/>
	</params>
</keyword>
<keyword name="getlastmod" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getlastmod</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the time of the last modification of the main script of execution.  </p>  <p class="para">   If you&#039;re interested in getting the last modification time   of a different file, consider using <span class="function"><a href="function.filemtime.php" class="function">filemtime()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getmygid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getmygid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Gets the group ID of the current script.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getmyinode" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getmyinode</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the inode of the current script.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getmypid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getmypid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the current PHP process ID.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getmyuid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getmyuid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Gets the user ID of the current script.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getNameIndex" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="getNameIndex" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="getopt" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getopt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$longopts</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses options passed to the script.  </p>]]></desc>
	<params>
		<param type="string" name="options"/>
		<param type="array" name="longopts"/>
	</params>
</keyword>
<keyword name="getopt" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getopt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$longopts</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses options passed to the script.  </p>]]></desc>
	<params>
		<param type="string" name="options"/>
	</params>
</keyword>
<keyword name="getprotobyname" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>getprotobyname</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>getprotobyname()</strong></span> returns the protocol number   associated with the protocol <code class="parameter">name</code> as per   <var class="filename">/etc/protocols</var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="getprotobynumber" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>getprotobynumber</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>getprotobynumber()</strong></span> returns the protocol name   associated with protocol <code class="parameter">number</code> as per   <var class="filename">/etc/protocols</var>.  </p>]]></desc>
	<params>
		<param type="int" name="proto"/>
	</params>
</keyword>
<keyword name="getrandmax" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>getrandmax</strong></span>     ( <span class="methodparam">void</span>    )</div>  <p class="simpara">   Returns the maximum value that can be returned by a call to   <span class="function"><a href="function.rand.php" class="function">rand()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="getrusage" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getrusage</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$who</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This is an interface to <strong class="command">getrusage(2)</strong>. It gets data returned   from the system call.   </p>]]></desc>
	<params>
		<param type="int" name="who"/>
	</params>
</keyword>
<keyword name="getrusage" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>getrusage</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$who</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This is an interface to <strong class="command">getrusage(2)</strong>. It gets data returned   from the system call.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="getStream" type="function" returnType="resource">
	<params>
		<param type="string" name="entryname"/>
	</params>
</keyword>
<keyword name="gettext" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gettext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   )</div>  <p class="para rdfs-comment">   Looks up a message in the current domain.  </p>]]></desc>
	<params>
		<param type="string" name="msgid"/>
	</params>
</keyword>
<keyword name="gettimeofday" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>gettimeofday</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return_float</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   This is an interface to gettimeofday(2). It returns an   associative array containing the data returned from the system   call.  </p>]]></desc>
	<params>
		<param type="bool" name="get_as_float"/>
	</params>
</keyword>
<keyword name="gettimeofday" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>gettimeofday</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return_float</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   This is an interface to gettimeofday(2). It returns an   associative array containing the data returned from the system   call.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="gettype" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gettype</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Returns the type of the PHP variable <code class="parameter">var</code>. For   type checking, use <em>is_*</em> functions.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="glob" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>glob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>glob()</strong></span> function searches for all the pathnames   matching <code class="parameter">pattern</code> according to the rules used by   the libc glob() function, which is similar to the rules used by common   shells.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="glob" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>glob</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>glob()</strong></span> function searches for all the pathnames   matching <code class="parameter">pattern</code> according to the rules used by   the libc glob() function, which is similar to the rules used by common   shells.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="gmdate" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmdate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Identical to the <span class="function"><a href="function.date.php" class="function">date()</a></span> function except that   the time returned is Greenwich Mean Time (GMT).   </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="long" name="timestamp"/>
	</params>
</keyword>
<keyword name="gmdate" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmdate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Identical to the <span class="function"><a href="function.date.php" class="function">date()</a></span> function except that   the time returned is Greenwich Mean Time (GMT).   </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
		<param type="int" name="day"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
	</params>
</keyword>
<keyword name="gmmktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmmktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = gmdate(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = gmdate(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = gmdate(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = gmdate(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = gmdate(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = gmdate(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Identical to <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span> except the passed parameters represents a    GMT date. <span class="function"><strong>gmmktime()</strong></span> internally uses <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>   so only times valid in derived local time can be used.  </p>  <p class="para">   Like <span class="function"><a href="function.mktime.php" class="function">mktime()</a></span>, arguments may be left out in order   from right to left, with any omitted arguments being set to the   current corresponding GMT value.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="gmp_abs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_abs</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Get the absolute value of a number.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_add" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_add</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>  , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Add two numbers.   </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_and" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_and</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Calculates bitwise AND of two GMP numbers.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_clrbit" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>gmp_clrbit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   Clears (sets to 0) bit <code class="parameter">index</code> in   <code class="parameter">a</code>. The index starts at 0.  </p>]]></desc>
	<params>
		<param type="resource" name="&amp;a"/>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="gmp_cmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_cmp</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Compares two numbers.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_com" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_com</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Returns the one&#039;s complement of <code class="parameter">a</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_div_q" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_div_q</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   Divides <code class="parameter">a</code> by <code class="parameter">b</code> and   returns the integer result.   </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
		<param type="int" name="round"/>
	</params>
</keyword>
<keyword name="gmp_div_q" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_div_q</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   Divides <code class="parameter">a</code> by <code class="parameter">b</code> and   returns the integer result.   </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_div_qr" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gmp_div_qr</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   The function divides <code class="parameter">n</code> by <code class="parameter">d</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
		<param type="int" name="round"/>
	</params>
</keyword>
<keyword name="gmp_div_qr" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gmp_div_qr</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   The function divides <code class="parameter">n</code> by <code class="parameter">d</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_div_r" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_div_r</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>  , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>  [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   Calculates remainder of the integer division of   <code class="parameter">n</code> by <code class="parameter">d</code>. The   remainder has the sign of the <code class="parameter">n</code> argument,   if not zero.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
		<param type="int" name="round"/>
	</params>
</keyword>
<keyword name="gmp_div_r" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_div_r</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>  , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>  [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$round</code><span class="initializer"> = GMP_ROUND_ZERO</span></span>  ] )</div>  <p class="para rdfs-comment">   Calculates remainder of the integer division of   <code class="parameter">n</code> by <code class="parameter">d</code>. The   remainder has the sign of the <code class="parameter">n</code> argument,   if not zero.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_divexact" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_divexact</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>   )</div>  <p class="para rdfs-comment">   Divides <code class="parameter">n</code> by <code class="parameter">d</code>,   using fast &quot;exact division&quot; algorithm. This function produces   correct results only when it is known in advance that   <code class="parameter">d</code> divides <code class="parameter">n</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_fact" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_fact</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Calculates factorial (<em>a!</em>) of <code class="parameter">a</code>.  </p>]]></desc>
	<params>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="gmp_gcd" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_gcd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Calculate greatest common divisor of <code class="parameter">a</code> and   <code class="parameter">b</code>. The result is always positive even if   either of, or both, input operands are negative.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_gcdext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gmp_gcdext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Calculates g, s, and t, such that <em>a*s + b*t = g =   gcd(a,b)</em>, where gcd is the greatest common divisor. Returns   an array with respective elements g, s and t.  </p>  <p class="para">   This function can be used to solve linear Diophantine equations in two   variables. These are equations that allow only integer solutions and have the form:   <em>a*x + b*y = c</em>.   For more information, go to the <a href="http://mathworld.wolfram.com/DiophantineEquation.html" class="link external">&raquo;&nbsp;&quot;Diophantine   Equation&quot; page at MathWorld</a>  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_hamdist" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_hamdist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Returns the hamming distance between <code class="parameter">a</code> and   <code class="parameter">b</code>. Both operands should be non-negative.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_init</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$base</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Creates a GMP number from an integer or string.   </p>]]></desc>
	<params>
		<param type="mixed" name="number"/>
		<param type="int" name="base"/>
	</params>
</keyword>
<keyword name="gmp_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_init</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$base</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Creates a GMP number from an integer or string.   </p>]]></desc>
	<params>
		<param type="mixed" name="number"/>
	</params>
</keyword>
<keyword name="gmp_intval" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_intval</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$gmpnumber</code></span>   )</div>  <p class="para rdfs-comment">   This function allows to convert GMP number to integer.  </p>]]></desc>
	<params>
		<param type="resource" name="gmpnumber"/>
	</params>
</keyword>
<keyword name="gmp_invert" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_invert</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Computes the inverse of <code class="parameter">a</code> modulo   <code class="parameter">b</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_jacobi" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_jacobi</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$p</code></span>   )</div>  <p class="para rdfs-comment">   Computes   <a href="http://primes.utm.edu/glossary/page.php?sort=JacobiSymbol" class="link external">&raquo;&nbsp;Jacobi symbol</a> of <code class="parameter">a</code> and   <code class="parameter">p</code>. <code class="parameter">p</code> should be odd   and must be positive.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_legendre" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_legendre</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$p</code></span>   )</div>  <p class="para rdfs-comment">   Compute the   <a href="http://primes.utm.edu/glossary/page.php?sort=LegendreSymbol" class="link external">&raquo;&nbsp;   Legendre symbol</a> of <code class="parameter">a</code> and   <code class="parameter">p</code>. <code class="parameter">p</code> should be odd   and must be positive.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_mod" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_mod</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$n</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$d</code></span>   )</div>  <p class="para rdfs-comment">   Calculates <code class="parameter">n</code> modulo   <code class="parameter">d</code>. The result is always non-negative, the   sign of <code class="parameter">d</code> is ignored.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_mul" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_mul</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>  , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Multiplies <code class="parameter">a</code> by <code class="parameter">b</code>   and returns the result.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_neg" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_neg</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Returns the negative value of a number.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_nextprime" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_nextprime</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Find next prime number  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_or" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_or</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Calculates bitwise inclusive OR of two GMP numbers.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_perfect_square" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>gmp_perfect_square</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Check if a number is a perfect square.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_popcount" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_popcount</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Get the population count.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_pow" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_pow</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$base</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$exp</code></span>   )</div>  <p class="para rdfs-comment">   Raise <code class="parameter">base</code> into power <code class="parameter">exp</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="base"/>
		<param type="int" name="exp"/>
	</params>
</keyword>
<keyword name="gmp_powm" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_powm</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$base</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$exp</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$mod</code></span>   )</div>  <p class="para rdfs-comment">   Calculate (<code class="parameter">base</code> raised into power   <code class="parameter">exp</code>) modulo <code class="parameter">mod</code>. If   <code class="parameter">exp</code> is negative, result is undefined.  </p>]]></desc>
	<params>
		<param type="resource" name="base"/>
		<param type="resource" name="exp"/>
		<param type="resource" name="mod"/>
	</params>
</keyword>
<keyword name="gmp_prob_prime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_prob_prime</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$reps</code><span class="initializer"> = 10</span></span>  ] )</div>  <p class="para rdfs-comment">   The function uses Miller-Rabin&#039;s probabilistic test to check if a number is a prime.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="int" name="reps"/>
	</params>
</keyword>
<keyword name="gmp_prob_prime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_prob_prime</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$reps</code><span class="initializer"> = 10</span></span>  ] )</div>  <p class="para rdfs-comment">   The function uses Miller-Rabin&#039;s probabilistic test to check if a number is a prime.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_random" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_random</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$limiter</code><span class="initializer"> = 20</span></span>  ] )</div>  <p class="para rdfs-comment">   Generate a random number. The number will be between   zero and the number of bits per limb multiplied by   <code class="parameter">limiter</code>. If <code class="parameter">limiter</code>   is negative, negative numbers are generated.  </p>  <p class="para">   A limb is an internal GMP mechanism. The number of bits in a limb is   not static, and can vary from system to system. Generally, the number   of bits in a limb is either 16 or 32, but this is not guaranteed.  </p>]]></desc>
	<params>
		<param type="int" name="limiter"/>
	</params>
</keyword>
<keyword name="gmp_random" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_random</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$limiter</code><span class="initializer"> = 20</span></span>  ] )</div>  <p class="para rdfs-comment">   Generate a random number. The number will be between   zero and the number of bits per limb multiplied by   <code class="parameter">limiter</code>. If <code class="parameter">limiter</code>   is negative, negative numbers are generated.  </p>  <p class="para">   A limb is an internal GMP mechanism. The number of bits in a limb is   not static, and can vary from system to system. Generally, the number   of bits in a limb is either 16 or 32, but this is not guaranteed.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="gmp_setbit" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>gmp_setbit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter reference">&$a</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$bit_on</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets bit <code class="parameter">index</code> in <code class="parameter">a</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="&amp;a"/>
		<param type="int" name="index"/>
		<param type="bool" name="set_clear"/>
	</params>
</keyword>
<keyword name="gmp_setbit" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>gmp_setbit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter reference">&$a</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$bit_on</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets bit <code class="parameter">index</code> in <code class="parameter">a</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="&amp;a"/>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="gmp_sign" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gmp_sign</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Checks the sign of a number.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_sqrt" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_sqrt</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Calculates square root of <code class="parameter">a</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_sqrtrem" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gmp_sqrtrem</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   )</div>  <p class="para rdfs-comment">   Calculate the square root of a number, with remainder.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
	</params>
</keyword>
<keyword name="gmp_strval" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmp_strval</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$gmpnumber</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$base</code><span class="initializer"> = 10</span></span>  ] )</div>  <p class="para rdfs-comment">   Convert GMP number to string representation in base   <code class="parameter">base</code>. The default base is 10.    </p>]]></desc>
	<params>
		<param type="resource" name="gmpnumber"/>
		<param type="int" name="base"/>
	</params>
</keyword>
<keyword name="gmp_strval" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmp_strval</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$gmpnumber</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$base</code><span class="initializer"> = 10</span></span>  ] )</div>  <p class="para rdfs-comment">   Convert GMP number to string representation in base   <code class="parameter">base</code>. The default base is 10.    </p>]]></desc>
	<params>
		<param type="resource" name="gmpnumber"/>
	</params>
</keyword>
<keyword name="gmp_sub" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_sub</strong></span>   ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>  , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Subtracts <code class="parameter">b</code> from <code class="parameter">a</code>   and returns the result.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmp_testbit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>gmp_testbit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   Tests if the specified bit is set.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="gmp_xor" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gmp_xor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$a</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$b</code></span>   )</div>  <p class="para rdfs-comment">   Calculates bitwise exclusive OR (XOR) of two GMP numbers.  </p>]]></desc>
	<params>
		<param type="resource" name="a"/>
		<param type="resource" name="b"/>
	</params>
</keyword>
<keyword name="gmstrftime" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmstrftime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Behaves the same as <span class="function"><a href="function.strftime.php" class="function">strftime()</a></span> except that the   time returned is Greenwich Mean Time (GMT). For example, when run   in Eastern Standard Time (GMT -0500), the first line below prints   &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999   01:00:00&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="gmstrftime" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gmstrftime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Behaves the same as <span class="function"><a href="function.strftime.php" class="function">strftime()</a></span> except that the   time returned is Greenwich Mean Time (GMT). For example, when run   in Eastern Standard Time (GMT -0500), the first line below prints   &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999   01:00:00&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="gregoriantojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>gregoriantojd</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.</p>  <p class="para">   Although this function can handle dates all the way back to 4714   B.C., such use may not be meaningful. The Gregorian calendar was   not instituted until October 15, 1582 (or October 5, 1582 in the   Julian calendar). Some countries did not accept it until much   later. For example, Britain converted in 1752, The USSR in 1918   and Greece in 1923. Most European countries used the Julian   calendar prior to the Gregorian.  </p>]]></desc>
	<params>
		<param type="int" name="month"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="gzcompress" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_DEFLATE</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compress the given string using the <em>ZLIB</em>   data format.  </p>  <p class="para">   For details on the ZLIB compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1950" class="link external">&raquo;&nbsp;ZLIB Compressed Data Format   Specification version 3.3</a>&quot; (RFC 1950).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This is <em class="emphasis">not</em> the same as gzip compression,    which includes some header data. See <span class="function"><a href="function.gzencode.php" class="function">gzencode()</a></span>    for gzip compression.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
		<param type="int" name="encoding"/>
	</params>
</keyword>
<keyword name="gzcompress" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_DEFLATE</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compress the given string using the <em>ZLIB</em>   data format.  </p>  <p class="para">   For details on the ZLIB compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1950" class="link external">&raquo;&nbsp;ZLIB Compressed Data Format   Specification version 3.3</a>&quot; (RFC 1950).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This is <em class="emphasis">not</em> the same as gzip compression,    which includes some header data. See <span class="function"><a href="function.gzencode.php" class="function">gzencode()</a></span>    for gzip compression.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="gzcompress" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzcompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_DEFLATE</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compress the given string using the <em>ZLIB</em>   data format.  </p>  <p class="para">   For details on the ZLIB compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1950" class="link external">&raquo;&nbsp;ZLIB Compressed Data Format   Specification version 3.3</a>&quot; (RFC 1950).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This is <em class="emphasis">not</em> the same as gzip compression,    which includes some header data. See <span class="function"><a href="function.gzencode.php" class="function">gzencode()</a></span>    for gzip compression.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="gzdecode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzdecode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">      This function returns a decoded version of the input   <code class="parameter">data</code>.  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="max_decoded_len"/>
	</params>
</keyword>
<keyword name="gzdecode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzdecode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">      This function returns a decoded version of the input   <code class="parameter">data</code>.  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="gzdeflate" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzdeflate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_RAW</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compresses the given string using the <em>DEFLATE</em>   data format.  </p>  <p class="para">   For details on the DEFLATE compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1951" class="link external">&raquo;&nbsp;DEFLATE Compressed Data Format   Specification version 1.3</a>&quot; (RFC 1951).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
		<param type="int" name="encoding"/>
	</params>
</keyword>
<keyword name="gzdeflate" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzdeflate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_RAW</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compresses the given string using the <em>DEFLATE</em>   data format.  </p>  <p class="para">   For details on the DEFLATE compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1951" class="link external">&raquo;&nbsp;DEFLATE Compressed Data Format   Specification version 1.3</a>&quot; (RFC 1951).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="gzdeflate" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzdeflate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding</code><span class="initializer"> = ZLIB_ENCODING_RAW</span></span>  ]] )</div>  <p class="para rdfs-comment">   This function compresses the given string using the <em>DEFLATE</em>   data format.  </p>  <p class="para">   For details on the DEFLATE compression algorithm see the document   &quot;<a href="http://www.faqs.org/rfcs/rfc1951" class="link external">&raquo;&nbsp;DEFLATE Compressed Data Format   Specification version 1.3</a>&quot; (RFC 1951).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="gzencode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzencode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding_mode</code><span class="initializer"> = FORCE_GZIP</span></span>  ]] )</div>  <p class="para rdfs-comment">      This function returns a compressed version of the input   <code class="parameter">data</code> compatible with the output of the   <strong class="command">gzip</strong> program.  </p>  <p class="para">   For more information on the GZIP file format, see the document:   <a href="http://www.faqs.org/rfcs/rfc1952" class="link external">&raquo;&nbsp;GZIP file format specification   version 4.3</a> (RFC 1952).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
		<param type="int" name="encoding"/>
	</params>
</keyword>
<keyword name="gzencode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzencode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding_mode</code><span class="initializer"> = FORCE_GZIP</span></span>  ]] )</div>  <p class="para rdfs-comment">      This function returns a compressed version of the input   <code class="parameter">data</code> compatible with the output of the   <strong class="command">gzip</strong> program.  </p>  <p class="para">   For more information on the GZIP file format, see the document:   <a href="http://www.faqs.org/rfcs/rfc1952" class="link external">&raquo;&nbsp;GZIP file format specification   version 4.3</a> (RFC 1952).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="gzencode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzencode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$encoding_mode</code><span class="initializer"> = FORCE_GZIP</span></span>  ]] )</div>  <p class="para rdfs-comment">      This function returns a compressed version of the input   <code class="parameter">data</code> compatible with the output of the   <strong class="command">gzip</strong> program.  </p>  <p class="para">   For more information on the GZIP file format, see the document:   <a href="http://www.faqs.org/rfcs/rfc1952" class="link external">&raquo;&nbsp;GZIP file format specification   version 4.3</a> (RFC 1952).  </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="gzfile" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gzfile</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">    This function is identical to <span class="function"><a href="function.readgzfile.php" class="function">readgzfile()</a></span>, except that   it returns the file in an array.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="use_include_path"/>
	</params>
</keyword>
<keyword name="gzfile" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>gzfile</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">    This function is identical to <span class="function"><a href="function.readgzfile.php" class="function">readgzfile()</a></span>, except that   it returns the file in an array.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="gzinflate" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzinflate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">      This function inflates a deflated string.    </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="max_decoded_len"/>
	</params>
</keyword>
<keyword name="gzinflate" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzinflate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">      This function inflates a deflated string.    </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="gzopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gzopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Opens a gzip (.gz) file for reading or writing.   </p>  <p class="para">   <span class="function"><strong>gzopen()</strong></span> can be used to read a file which is   not in gzip format; in this case <span class="function"><a href="function.gzread.php" class="function">gzread()</a></span> will   directly read from the file without decompression.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="int" name="use_include_path"/>
	</params>
</keyword>
<keyword name="gzopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>gzopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Opens a gzip (.gz) file for reading or writing.   </p>  <p class="para">   <span class="function"><strong>gzopen()</strong></span> can be used to read a file which is   not in gzip format; in this case <span class="function"><a href="function.gzread.php" class="function">gzread()</a></span> will   directly read from the file without decompression.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="gzuncompress" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzuncompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">      This function uncompress a compressed string.    </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="max_decoded_len"/>
	</params>
</keyword>
<keyword name="gzuncompress" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>gzuncompress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">      This function uncompress a compressed string.    </p>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="hash" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="data"/>
		<param type="bool" name="raw_output"/>
	</params>
</keyword>
<keyword name="hash" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="hash_algos" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>hash_algos</strong></span>    ( <span class="methodparam">void</span>   )</div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="hash_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="filename"/>
		<param type="bool" name="raw_output"/>
	</params>
</keyword>
<keyword name="hash_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="hash_final" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_final</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="bool" name="raw_output"/>
	</params>
</keyword>
<keyword name="hash_final" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_final</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="hash_hmac" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_hmac</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="data"/>
		<param type="string" name="key"/>
		<param type="bool" name="raw_output"/>
	</params>
</keyword>
<keyword name="hash_hmac" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_hmac</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="data"/>
		<param type="string" name="key"/>
	</params>
</keyword>
<keyword name="hash_hmac_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_hmac_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="filename"/>
		<param type="string" name="key"/>
		<param type="bool" name="raw_output"/>
	</params>
</keyword>
<keyword name="hash_hmac_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hash_hmac_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$raw_output</code><span class="initializer"> = false</span></span>  ] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="string" name="filename"/>
		<param type="string" name="key"/>
	</params>
</keyword>
<keyword name="hash_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>hash_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
		<param type="int" name="options"/>
		<param type="string" name="key"/>
	</params>
</keyword>
<keyword name="hash_init" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>hash_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algo</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>]]></desc>
	<params>
		<param type="string" name="algo"/>
	</params>
</keyword>
<keyword name="hash_update" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>hash_update</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="hash_update_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>hash_update_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$hcontext</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$scontext</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="string" name="filename"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="hash_update_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>hash_update_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$hcontext</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$scontext</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="hash_update_stream" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>hash_update_stream</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = -1</span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="resource" name="handle"/>
		<param type="integer" name="length"/>
	</params>
</keyword>
<keyword name="hash_update_stream" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>hash_update_stream</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = -1</span></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="resource" name="handle"/>
	</params>
</keyword>
<keyword name="header" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>header</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$replace</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$http_response_code</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>header()</strong></span> is used to send a raw <acronym title="Hypertext Transfer Protocol">HTTP</acronym>   header. See the <a href="http://www.faqs.org/rfcs/rfc2616" class="link external">&raquo;&nbsp;HTTP/1.1 specification</a>   for more information on <acronym title="Hypertext Transfer Protocol">HTTP</acronym> headers.  </p>  <p class="para">   Remember that <span class="function"><strong>header()</strong></span> must be called before any   actual output is sent, either by normal HTML tags, blank lines in a   file, or from PHP. It is a very common error to read code with   <span class="function"><a href="function.include.php" class="function">include</a></span>, or <span class="function"><a href="function.require.php" class="function">require</a></span>,    functions, or another file access function, and have spaces or empty   lines that are output before <span class="function"><strong>header()</strong></span> is called.   The same problem exists when using a single PHP/HTML file.   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000">&lt;html&gt;<br /><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/*&nbsp;This&nbsp;will&nbsp;give&nbsp;an&nbsp;error.&nbsp;Note&nbsp;the&nbsp;output<br />&nbsp;*&nbsp;above,&nbsp;which&nbsp;is&nbsp;before&nbsp;the&nbsp;header()&nbsp;call&nbsp;*/<br /></span><span style="color: #0000BB">header</span><span style="color: #007700">(</span><span style="color: #DD0000">'Location:&nbsp;http://www.example.com/'</span><span style="color: #007700">);<br />exit;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>  </p>]]></desc>
	<params>
		<param type="string" name="header"/>
		<param type="bool" name="replace"/>
		<param type="int" name="http_response_code"/>
	</params>
</keyword>
<keyword name="header" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>header</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$replace</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$http_response_code</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>header()</strong></span> is used to send a raw <acronym title="Hypertext Transfer Protocol">HTTP</acronym>   header. See the <a href="http://www.faqs.org/rfcs/rfc2616" class="link external">&raquo;&nbsp;HTTP/1.1 specification</a>   for more information on <acronym title="Hypertext Transfer Protocol">HTTP</acronym> headers.  </p>  <p class="para">   Remember that <span class="function"><strong>header()</strong></span> must be called before any   actual output is sent, either by normal HTML tags, blank lines in a   file, or from PHP. It is a very common error to read code with   <span class="function"><a href="function.include.php" class="function">include</a></span>, or <span class="function"><a href="function.require.php" class="function">require</a></span>,    functions, or another file access function, and have spaces or empty   lines that are output before <span class="function"><strong>header()</strong></span> is called.   The same problem exists when using a single PHP/HTML file.   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000">&lt;html&gt;<br /><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/*&nbsp;This&nbsp;will&nbsp;give&nbsp;an&nbsp;error.&nbsp;Note&nbsp;the&nbsp;output<br />&nbsp;*&nbsp;above,&nbsp;which&nbsp;is&nbsp;before&nbsp;the&nbsp;header()&nbsp;call&nbsp;*/<br /></span><span style="color: #0000BB">header</span><span style="color: #007700">(</span><span style="color: #DD0000">'Location:&nbsp;http://www.example.com/'</span><span style="color: #007700">);<br />exit;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>  </p>]]></desc>
	<params>
		<param type="string" name="header"/>
		<param type="bool" name="replace"/>
	</params>
</keyword>
<keyword name="header" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>header</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$replace</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$http_response_code</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>header()</strong></span> is used to send a raw <acronym title="Hypertext Transfer Protocol">HTTP</acronym>   header. See the <a href="http://www.faqs.org/rfcs/rfc2616" class="link external">&raquo;&nbsp;HTTP/1.1 specification</a>   for more information on <acronym title="Hypertext Transfer Protocol">HTTP</acronym> headers.  </p>  <p class="para">   Remember that <span class="function"><strong>header()</strong></span> must be called before any   actual output is sent, either by normal HTML tags, blank lines in a   file, or from PHP. It is a very common error to read code with   <span class="function"><a href="function.include.php" class="function">include</a></span>, or <span class="function"><a href="function.require.php" class="function">require</a></span>,    functions, or another file access function, and have spaces or empty   lines that are output before <span class="function"><strong>header()</strong></span> is called.   The same problem exists when using a single PHP/HTML file.   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000">&lt;html&gt;<br /><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/*&nbsp;This&nbsp;will&nbsp;give&nbsp;an&nbsp;error.&nbsp;Note&nbsp;the&nbsp;output<br />&nbsp;*&nbsp;above,&nbsp;which&nbsp;is&nbsp;before&nbsp;the&nbsp;header()&nbsp;call&nbsp;*/<br /></span><span style="color: #0000BB">header</span><span style="color: #007700">(</span><span style="color: #DD0000">'Location:&nbsp;http://www.example.com/'</span><span style="color: #007700">);<br />exit;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>  </p>]]></desc>
	<params>
		<param type="string" name="header"/>
	</params>
</keyword>
<keyword name="headers_list" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>headers_list</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>headers_list()</strong></span> will return a list of headers to be sent   to the browser / client.  To determine whether or not these headers have   been sent yet, use <span class="function"><a href="function.headers-sent.php" class="function">headers_sent()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="headers_sent" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>headers_sent</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$line</code></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if or where headers have been sent.  </p>  <p class="para">   You can&#039;t add any more header lines using the <span class="function"><a href="function.header.php" class="function">header()</a></span>   function once the header block has already been sent. Using this function   you can at least prevent getting HTTP header related error messages.   Another option is to use <a href="ref.outcontrol.php" class="link">Output Buffering</a>.  </p>]]></desc>
	<params>
		<param type="string" name="&amp;$file"/>
		<param type="int" name="&amp;$line"/>
	</params>
</keyword>
<keyword name="headers_sent" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>headers_sent</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$line</code></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if or where headers have been sent.  </p>  <p class="para">   You can&#039;t add any more header lines using the <span class="function"><a href="function.header.php" class="function">header()</a></span>   function once the header block has already been sent. Using this function   you can at least prevent getting HTTP header related error messages.   Another option is to use <a href="ref.outcontrol.php" class="link">Output Buffering</a>.  </p>]]></desc>
	<params>
		<param type="string" name="&amp;$file"/>
	</params>
</keyword>
<keyword name="headers_sent" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>headers_sent</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$line</code></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if or where headers have been sent.  </p>  <p class="para">   You can&#039;t add any more header lines using the <span class="function"><a href="function.header.php" class="function">header()</a></span>   function once the header block has already been sent. Using this function   you can at least prevent getting HTTP header related error messages.   Another option is to use <a href="ref.outcontrol.php" class="link">Output Buffering</a>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="hebrev" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hebrev</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts logical Hebrew text to visual text.  </p>  <p class="para">   The function tries to avoid breaking words.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="max_chars_per_line"/>
	</params>
</keyword>
<keyword name="hebrev" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hebrev</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts logical Hebrew text to visual text.  </p>  <p class="para">   The function tries to avoid breaking words.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="hebrevc" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hebrevc</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is similar to <span class="function"><a href="function.hebrev.php" class="function">hebrev()</a></span> with the   difference that it converts newlines (\n) to &quot;&lt;br&gt;\n&quot;.  </p>  <p class="para">   The function tries to avoid breaking words.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="max_chars_per_line"/>
	</params>
</keyword>
<keyword name="hebrevc" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>hebrevc</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hebrew_text</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_chars_per_line</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is similar to <span class="function"><a href="function.hebrev.php" class="function">hebrev()</a></span> with the   difference that it converts newlines (\n) to &quot;&lt;br&gt;\n&quot;.  </p>  <p class="para">   The function tries to avoid breaking words.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="hexdec" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>hexdec</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hex_string</code></span>    )</div>  <p class="para rdfs-comment">   Returns the decimal equivalent of the hexadecimal number   represented by the <code class="parameter">hex_string</code> argument.   <span class="function"><strong>hexdec()</strong></span> converts a hexadecimal string to a   decimal number.   </p>  <p class="para">   <span class="function"><strong>hexdec()</strong></span> will ignore any non-hexadecimal    characters it encounters.  </p>]]></desc>
	<params>
		<param type="string" name="hexadecimal_number"/>
	</params>
</keyword>
<keyword name="highlight_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>highlight_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Prints out or returns a syntax highlighted version of the code contained   in <code class="parameter">filename</code> using the colors defined in the   built-in syntax highlighter for PHP.  </p>  <p class="para">   Many servers are configured to automatically highlight files   with a <em class="emphasis">phps</em> extension. For example,   <var class="filename">example.phps</var> when viewed will show the   syntax highlighted source of the file. To enable this, add this   line to the <var class="filename">httpd.conf</var>:  </p>  <div class="example-contents screen"><div class="descriptioncode"><pre class="descriptioncode">AddType application/x-httpd-php-source .phps</pre></div>  </div>]]></desc>
	<params>
		<param type="string" name="file_name"/>
		<param type="bool" name="return"/>
	</params>
</keyword>
<keyword name="highlight_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>highlight_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Prints out or returns a syntax highlighted version of the code contained   in <code class="parameter">filename</code> using the colors defined in the   built-in syntax highlighter for PHP.  </p>  <p class="para">   Many servers are configured to automatically highlight files   with a <em class="emphasis">phps</em> extension. For example,   <var class="filename">example.phps</var> when viewed will show the   syntax highlighted source of the file. To enable this, add this   line to the <var class="filename">httpd.conf</var>:  </p>  <div class="example-contents screen"><div class="descriptioncode"><pre class="descriptioncode">AddType application/x-httpd-php-source .phps</pre></div>  </div>]]></desc>
	<params>
		<param type="string" name="file_name"/>
	</params>
</keyword>
<keyword name="highlight_string" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>highlight_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="simpara">   Outputs or returns html markup for a syntax highlighted version of the given PHP code   using the colors defined in the built-in syntax highlighter for PHP.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="bool" name="return"/>
	</params>
</keyword>
<keyword name="highlight_string" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>highlight_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="simpara">   Outputs or returns html markup for a syntax highlighted version of the given PHP code   using the colors defined in the built-in syntax highlighter for PHP.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="html_entity_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>html_entity_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>html_entity_decode()</strong></span> is the opposite of   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> in that it converts all HTML entities   in the <code class="parameter">string</code> to their applicable characters.  </p>  <p class="para">   More precisely, this function decodes all the entities (including all numeric   entities) that a) are necessarily valid for the chosen document type � i.e.,   for XML, this function does not decode named entities that might be defined   in some DTD � and b) whose character or characters are in the coded character   set associated with the chosen encoding and are permitted in the chosen   document type. All other entities are left as is.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="html_entity_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>html_entity_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>html_entity_decode()</strong></span> is the opposite of   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> in that it converts all HTML entities   in the <code class="parameter">string</code> to their applicable characters.  </p>  <p class="para">   More precisely, this function decodes all the entities (including all numeric   entities) that a) are necessarily valid for the chosen document type � i.e.,   for XML, this function does not decode named entities that might be defined   in some DTD � and b) whose character or characters are in the coded character   set associated with the chosen encoding and are permitted in the chosen   document type. All other entities are left as is.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
	</params>
</keyword>
<keyword name="html_entity_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>html_entity_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>html_entity_decode()</strong></span> is the opposite of   <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> in that it converts all HTML entities   in the <code class="parameter">string</code> to their applicable characters.  </p>  <p class="para">   More precisely, this function decodes all the entities (including all numeric   entities) that a) are necessarily valid for the chosen document type � i.e.,   for XML, this function does not decode named entities that might be defined   in some DTD � and b) whose character or characters are in the coded character   set associated with the chosen encoding and are permitted in the chosen   document type. All other entities are left as is.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="htmlentities" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlentities</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> in all   ways, except with <span class="function"><strong>htmlentities()</strong></span>, all characters which   have HTML character entity equivalents are translated into these entities.  </p>  <p class="para">   If you want to decode instead (the reverse) you can use   <span class="function"><a href="function.html-entity-decode.php" class="function">html_entity_decode()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
		<param type="string" name="charset"/>
		<param type="bool" name="double_encode"/>
	</params>
</keyword>
<keyword name="htmlentities" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlentities</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> in all   ways, except with <span class="function"><strong>htmlentities()</strong></span>, all characters which   have HTML character entity equivalents are translated into these entities.  </p>  <p class="para">   If you want to decode instead (the reverse) you can use   <span class="function"><a href="function.html-entity-decode.php" class="function">html_entity_decode()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="htmlentities" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlentities</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> in all   ways, except with <span class="function"><strong>htmlentities()</strong></span>, all characters which   have HTML character entity equivalents are translated into these entities.  </p>  <p class="para">   If you want to decode instead (the reverse) you can use   <span class="function"><a href="function.html-entity-decode.php" class="function">html_entity_decode()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
	</params>
</keyword>
<keyword name="htmlentities" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlentities</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function is identical to <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span> in all   ways, except with <span class="function"><strong>htmlentities()</strong></span>, all characters which   have HTML character entity equivalents are translated into these entities.  </p>  <p class="para">   If you want to decode instead (the reverse) you can use   <span class="function"><a href="function.html-entity-decode.php" class="function">html_entity_decode()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="htmlspecialchars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Certain characters have special significance in HTML, and should   be represented by HTML entities if they are to preserve their   meanings. This function returns a string with these   conversions made. If you require all input substrings that have associated   named entities to be translated, use <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>   instead.  </p>  <p class="para">   If the input string passed to this function and the final document share the   same character set, this function is sufficient to prepare input for   inclusion in most contexts of an HTML document. If, however, the input can   represent characters that are not coded in the final document character set   and you wish to retain those characters (as numeric or named entities),   both this function and <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> (which only encodes   substrings that have named entity equivalents) may be insufficient.   You may have to use <span class="function"><a href="function.mb-encode-numericentity.php" class="function">mb_encode_numericentity()</a></span> instead.  </p>  <p class="para">   The translations performed are:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &#039;&amp;&#039; (ampersand) becomes &#039;&amp;amp;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&quot;&#039; (double quote) becomes &#039;&amp;quot;&#039; when <strong><code>ENT_NOQUOTES</code></strong>      is not set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;&#039;&quot; (single quote) becomes &#039;&amp;#039;&#039; (or &amp;apos;)      only when <strong><code>ENT_QUOTES</code></strong> is set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&gt;&#039; (greater than) becomes &#039;&amp;gt;&#039;     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
		<param type="string" name="charset"/>
		<param type="bool" name="double_encode"/>
	</params>
</keyword>
<keyword name="htmlspecialchars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Certain characters have special significance in HTML, and should   be represented by HTML entities if they are to preserve their   meanings. This function returns a string with these   conversions made. If you require all input substrings that have associated   named entities to be translated, use <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>   instead.  </p>  <p class="para">   If the input string passed to this function and the final document share the   same character set, this function is sufficient to prepare input for   inclusion in most contexts of an HTML document. If, however, the input can   represent characters that are not coded in the final document character set   and you wish to retain those characters (as numeric or named entities),   both this function and <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> (which only encodes   substrings that have named entity equivalents) may be insufficient.   You may have to use <span class="function"><a href="function.mb-encode-numericentity.php" class="function">mb_encode_numericentity()</a></span> instead.  </p>  <p class="para">   The translations performed are:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &#039;&amp;&#039; (ampersand) becomes &#039;&amp;amp;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&quot;&#039; (double quote) becomes &#039;&amp;quot;&#039; when <strong><code>ENT_NOQUOTES</code></strong>      is not set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;&#039;&quot; (single quote) becomes &#039;&amp;#039;&#039; (or &amp;apos;)      only when <strong><code>ENT_QUOTES</code></strong> is set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&gt;&#039; (greater than) becomes &#039;&amp;gt;&#039;     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="htmlspecialchars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Certain characters have special significance in HTML, and should   be represented by HTML entities if they are to preserve their   meanings. This function returns a string with these   conversions made. If you require all input substrings that have associated   named entities to be translated, use <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>   instead.  </p>  <p class="para">   If the input string passed to this function and the final document share the   same character set, this function is sufficient to prepare input for   inclusion in most contexts of an HTML document. If, however, the input can   represent characters that are not coded in the final document character set   and you wish to retain those characters (as numeric or named entities),   both this function and <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> (which only encodes   substrings that have named entity equivalents) may be insufficient.   You may have to use <span class="function"><a href="function.mb-encode-numericentity.php" class="function">mb_encode_numericentity()</a></span> instead.  </p>  <p class="para">   The translations performed are:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &#039;&amp;&#039; (ampersand) becomes &#039;&amp;amp;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&quot;&#039; (double quote) becomes &#039;&amp;quot;&#039; when <strong><code>ENT_NOQUOTES</code></strong>      is not set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;&#039;&quot; (single quote) becomes &#039;&amp;#039;&#039; (or &amp;apos;)      only when <strong><code>ENT_QUOTES</code></strong> is set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&gt;&#039; (greater than) becomes &#039;&amp;gt;&#039;     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
	</params>
</keyword>
<keyword name="htmlspecialchars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;UTF-8&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$double_encode</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Certain characters have special significance in HTML, and should   be represented by HTML entities if they are to preserve their   meanings. This function returns a string with these   conversions made. If you require all input substrings that have associated   named entities to be translated, use <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span>   instead.  </p>  <p class="para">   If the input string passed to this function and the final document share the   same character set, this function is sufficient to prepare input for   inclusion in most contexts of an HTML document. If, however, the input can   represent characters that are not coded in the final document character set   and you wish to retain those characters (as numeric or named entities),   both this function and <span class="function"><a href="function.htmlentities.php" class="function">htmlentities()</a></span> (which only encodes   substrings that have named entity equivalents) may be insufficient.   You may have to use <span class="function"><a href="function.mb-encode-numericentity.php" class="function">mb_encode_numericentity()</a></span> instead.  </p>  <p class="para">   The translations performed are:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &#039;&amp;&#039; (ampersand) becomes &#039;&amp;amp;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&quot;&#039; (double quote) becomes &#039;&amp;quot;&#039; when <strong><code>ENT_NOQUOTES</code></strong>      is not set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;&#039;&quot; (single quote) becomes &#039;&amp;#039;&#039; (or &amp;apos;)      only when <strong><code>ENT_QUOTES</code></strong> is set.     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039;     </span>    </li>    <li class="listitem">     <span class="simpara">      &#039;&gt;&#039; (greater than) becomes &#039;&amp;gt;&#039;     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="htmlspecialchars_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is the opposite of <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span>. It   converts special HTML entities back to characters.  </p>  <p class="para">   The converted entities are: <em>&amp;amp;</em>,   <em>&amp;quot;</em> (when <strong><code>ENT_NOQUOTES</code></strong> is not set),   <em>&amp;#039;</em> (when <strong><code>ENT_QUOTES</code></strong> is set),   <em>&amp;lt;</em> and <em>&amp;gt;</em>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="quote_style"/>
	</params>
</keyword>
<keyword name="htmlspecialchars_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>htmlspecialchars_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = ENT_COMPAT | ENT_HTML401</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is the opposite of <span class="function"><a href="function.htmlspecialchars.php" class="function">htmlspecialchars()</a></span>. It   converts special HTML entities back to characters.  </p>  <p class="para">   The converted entities are: <em>&amp;amp;</em>,   <em>&amp;quot;</em> (when <strong><code>ENT_NOQUOTES</code></strong> is not set),   <em>&amp;#039;</em> (when <strong><code>ENT_QUOTES</code></strong> is set),   <em>&amp;lt;</em> and <em>&amp;gt;</em>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="http_build_query" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>http_build_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$query_data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$numeric_prefix</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$arg_separator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$enc_type</code><span class="initializer"> = <strong><code>PHP_QUERY_RFC1738</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Generates a URL-encoded query string from the associative (or indexed)   array provided.  </p>]]></desc>
	<params>
		<param type="mixed" name="formdata"/>
		<param type="string" name="prefix"/>
		<param type="string" name="arg_separator"/>
	</params>
</keyword>
<keyword name="http_build_query" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>http_build_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$query_data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$numeric_prefix</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$arg_separator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$enc_type</code><span class="initializer"> = <strong><code>PHP_QUERY_RFC1738</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Generates a URL-encoded query string from the associative (or indexed)   array provided.  </p>]]></desc>
	<params>
		<param type="mixed" name="formdata"/>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="http_build_query" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>http_build_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$query_data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$numeric_prefix</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$arg_separator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$enc_type</code><span class="initializer"> = <strong><code>PHP_QUERY_RFC1738</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Generates a URL-encoded query string from the associative (or indexed)   array provided.  </p>]]></desc>
	<params>
		<param type="mixed" name="formdata"/>
	</params>
</keyword>
<keyword name="http_response_code" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>http_response_code</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$response_code</code></span>  ] )</div>  <p class="para rdfs-comment">  If you pass no parameters then http_response_code will get the current status code.  If you pass a parameter it will set the response code.  </p>]]></desc>
	<params>
		<param type="int" name="response_code"/>
	</params>
</keyword>
<keyword name="http_response_code" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>http_response_code</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$response_code</code></span>  ] )</div>  <p class="para rdfs-comment">  If you pass no parameters then http_response_code will get the current status code.  If you pass a parameter it will set the response code.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="hypot" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">float</span> <span class="methodname"><strong>hypot</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$y</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>hypot()</strong></span> returns the length of the hypotenuse of a   right-angle triangle with sides of length <code class="parameter">x</code> and   <code class="parameter">y</code>, or the distance of the point   (<code class="parameter">x</code>, <code class="parameter">y</code>) from the origin.   This is equivalent to <em>sqrt(x*x + y*y)</em>.  </p>]]></desc>
	<params>
		<param type="float" name="num1"/>
		<param type="float" name="num2"/>
	</params>
</keyword>
<keyword name="ibase_add_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_add_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
		<param type="string" name="last_name"/>
	</params>
</keyword>
<keyword name="ibase_add_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_add_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
	</params>
</keyword>
<keyword name="ibase_add_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_add_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
	</params>
</keyword>
<keyword name="ibase_add_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_add_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="ibase_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ibase_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns the number of rows that were affected by the   previous query (INSERT, UPDATE or DELETE) that was executed from within   the specified transaction context.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier "/>
	</params>
</keyword>
<keyword name="ibase_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ibase_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns the number of rows that were affected by the   previous query (INSERT, UPDATE or DELETE) that was executed from within   the specified transaction context.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="ibase_backup" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_backup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_db"/>
		<param type="string" name="dest_file"/>
		<param type="int" name="options"/>
		<param type="bool" name="verbose"/>
	</params>
</keyword>
<keyword name="ibase_backup" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_backup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_db"/>
		<param type="string" name="dest_file"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="ibase_backup" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_backup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_db"/>
		<param type="string" name="dest_file"/>
	</params>
</keyword>
<keyword name="ibase_blob_echo" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_blob_echo</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_blob_echo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   This function opens a BLOB for reading and sends its contents directly to   standard output (the browser, in most cases).  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_blob_echo" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_blob_echo</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_blob_echo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   This function opens a BLOB for reading and sends its contents directly to   standard output (the browser, in most cases).  </p>]]></desc>
	<params>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_blob_import" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_blob_import</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$file_handle</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_blob_import</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$file_handle</code></span>   )</div>  <p class="para rdfs-comment">   This function creates a BLOB, reads an entire file into it, closes it and   returns the assigned BLOB id.  </p>]]></desc>
	<params>
		<param type="resource" name="file"/>
	</params>
</keyword>
<keyword name="ibase_blob_import" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_blob_import</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$file_handle</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_blob_import</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$file_handle</code></span>   )</div>  <p class="para rdfs-comment">   This function creates a BLOB, reads an entire file into it, closes it and   returns the assigned BLOB id.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="resource" name="file"/>
	</params>
</keyword>
<keyword name="ibase_blob_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_blob_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_blob_info</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   Returns the BLOB length and other useful information.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_blob_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_blob_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_blob_info</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   Returns the BLOB length and other useful information.  </p>]]></desc>
	<params>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_blob_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_blob_open</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_blob_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   Opens an existing BLOB for reading.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_blob_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_blob_open</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_blob_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$blob_id</code></span>   )</div>  <p class="para rdfs-comment">   Opens an existing BLOB for reading.   </p>]]></desc>
	<params>
		<param type="string" name="blob_id"/>
	</params>
</keyword>
<keyword name="ibase_commit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_commit</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_or_trans_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Commits a transaction.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_commit_ret" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_commit_ret</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_or_trans_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Commits a transaction without closing it.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
		<param type="int" name="buffers"/>
		<param type="int" name="dialect"/>
		<param type="string" name="role"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
		<param type="int" name="buffers"/>
		<param type="int" name="dialect"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
		<param type="int" name="buffers"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="ibase_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$dialect</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$role</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sync</code></span>  ]]]]]]]] )</div>  <p class="para rdfs-comment">   Establishes a connection to an Firebird/InterBase server.  </p>  <p class="para">   In case a second call is made to <span class="function"><strong>ibase_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the link   identifier of the already opened link will be returned. The link to the   server will be closed as soon as the execution of the script ends, unless   it&#039;s closed earlier by explicitly calling <span class="function"><a href="function.ibase-close.php" class="function">ibase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="ibase_db_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_db_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$action</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$argument</code><span class="initializer"> = 0</span></span>  ] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="db"/>
		<param type="int" name="action"/>
		<param type="int" name="argument"/>
	</params>
</keyword>
<keyword name="ibase_db_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_db_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$action</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$argument</code><span class="initializer"> = 0</span></span>  ] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="db"/>
		<param type="int" name="action"/>
	</params>
</keyword>
<keyword name="ibase_delete_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_delete_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
		<param type="string" name="last_name"/>
	</params>
</keyword>
<keyword name="ibase_delete_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_delete_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
	</params>
</keyword>
<keyword name="ibase_delete_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_delete_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
	</params>
</keyword>
<keyword name="ibase_delete_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_delete_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="ibase_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_drop_db</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   This functions drops a database that was opened by either <span class="function"><a href="function.ibase-connect.php" class="function">ibase_connect()</a></span>   or <span class="function"><a href="function.ibase-pconnect.php" class="function">ibase_pconnect()</a></span>. The database is closed and deleted from the server.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_drop_db</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   This functions drops a database that was opened by either <span class="function"><a href="function.ibase-connect.php" class="function">ibase_connect()</a></span>   or <span class="function"><a href="function.ibase-pconnect.php" class="function">ibase_pconnect()</a></span>. The database is closed and deleted from the server.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="ibase_errcode" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ibase_errcode</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the error code that resulted from the most recent InterBase function   call.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ibase_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$bind_arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Execute a query prepared by <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  <p class="para">   This is a lot more effective than using <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span>   if you are repeating a same kind of query several times with only   some parameters changing.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="mixed" name="bind_arg"/>
		<param type="mixed" name="bind_arg"/>
		<param type="" name="..."/>
	</params>
</keyword>
<keyword name="ibase_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$bind_arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Execute a query prepared by <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  <p class="para">   This is a lot more effective than using <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span>   if you are repeating a same kind of query several times with only   some parameters changing.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="mixed" name="bind_arg"/>
		<param type="mixed" name="bind_arg"/>
	</params>
</keyword>
<keyword name="ibase_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$bind_arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Execute a query prepared by <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  <p class="para">   This is a lot more effective than using <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span>   if you are repeating a same kind of query several times with only   some parameters changing.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="mixed" name="bind_arg"/>
	</params>
</keyword>
<keyword name="ibase_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$bind_arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Execute a query prepared by <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  <p class="para">   This is a lot more effective than using <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span>   if you are repeating a same kind of query several times with only   some parameters changing.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="ibase_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fetch_flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetch a result row from a query as an associative array.  </p>  <p class="para">   <span class="function"><strong>ibase_fetch_assoc()</strong></span> fetches one row of data from the   <code class="parameter">result</code>.  If two or more columns of the result   have the same field names, the last column will take precedence. To   access the other column(s) of the same name, you either need to access   the result with numeric indices by using   <span class="function"><a href="function.ibase-fetch-row.php" class="function">ibase_fetch_row()</a></span> or use alias names in your query.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="fetch_flags"/>
	</params>
</keyword>
<keyword name="ibase_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fetch_flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetch a result row from a query as an associative array.  </p>  <p class="para">   <span class="function"><strong>ibase_fetch_assoc()</strong></span> fetches one row of data from the   <code class="parameter">result</code>.  If two or more columns of the result   have the same field names, the last column will take precedence. To   access the other column(s) of the same name, you either need to access   the result with numeric indices by using   <span class="function"><a href="function.ibase-fetch-row.php" class="function">ibase_fetch_row()</a></span> or use alias names in your query.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ibase_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>ibase_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fetch_flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches a row as a pseudo-object from a given result identifier.  </p>  <p class="para">   Subsequent calls to <span class="function"><strong>ibase_fetch_object()</strong></span>   return the next row in the result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="fetch_flags"/>
	</params>
</keyword>
<keyword name="ibase_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>ibase_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fetch_flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches a row as a pseudo-object from a given result identifier.  </p>  <p class="para">   Subsequent calls to <span class="function"><strong>ibase_fetch_object()</strong></span>   return the next row in the result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ibase_field_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_field_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   Returns an array with information about a field after a select   query has been run.  </p>]]></desc>
	<params>
		<param type="resource" name="query_result"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="ibase_free_event_handler" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_free_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$event</code></span>   )</div>  <p class="para rdfs-comment">   This function causes the registered event handler specified by   <code class="parameter">event</code> to be cancelled. The callback function will   no longer be called for the events it was registered to handle.  </p>]]></desc>
	<params>
		<param type="resource" name="event"/>
	</params>
</keyword>
<keyword name="ibase_free_query" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_free_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   Frees a prepared query.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="ibase_gen_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_gen_id</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$generator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$increment</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="string" name="generator"/>
		<param type="int" name="increment"/>
		<param type="resource" name="link_identifier "/>
	</params>
</keyword>
<keyword name="ibase_gen_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_gen_id</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$generator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$increment</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="string" name="generator"/>
		<param type="int" name="increment"/>
	</params>
</keyword>
<keyword name="ibase_gen_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_gen_id</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$generator</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$increment</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="string" name="generator"/>
	</params>
</keyword>
<keyword name="ibase_maintain_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_maintain_db</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$action</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$argument</code><span class="initializer"> = 0</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="db"/>
		<param type="int" name="action"/>
		<param type="int" name="argument"/>
	</params>
</keyword>
<keyword name="ibase_maintain_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_maintain_db</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$action</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$argument</code><span class="initializer"> = 0</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="db"/>
		<param type="int" name="action"/>
	</params>
</keyword>
<keyword name="ibase_modify_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_modify_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
		<param type="string" name="last_name"/>
	</params>
</keyword>
<keyword name="ibase_modify_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_modify_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
		<param type="string" name="middle_name"/>
	</params>
</keyword>
<keyword name="ibase_modify_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_modify_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
		<param type="string" name="first_name"/>
	</params>
</keyword>
<keyword name="ibase_modify_user" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_modify_user</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$first_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$middle_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$last_name</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="user_name"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="ibase_name_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_name_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   This function assigns a name to a result set. This name can be used later in   UPDATE|DELETE ... WHERE CURRENT OF <code class="parameter">name</code> statements.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="ibase_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ibase_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Get the number of fields in a result set.  </p>]]></desc>
	<params>
		<param type="resource" name="query_result"/>
	</params>
</keyword>
<keyword name="ibase_num_params" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ibase_num_params</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the number of parameters in the prepared query specified   by <code class="parameter">query</code>. This is the number of binding arguments that   must be present when calling <span class="function"><a href="function.ibase-execute.php" class="function">ibase_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="ibase_num_rows" type="function" returnType="int">
	<params>
		<param type="resource" name="result_identifier"/>
	</params>
</keyword>
<keyword name="ibase_param_info" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ibase_param_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$param_number</code></span>   )</div>  <p class="para rdfs-comment">   Returns an array with information about a parameter after a   query has been prepared.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="ibase_prepare" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$trans</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="simpara">   Prepare a query for later binding of parameter placeholders and execution   (via <span class="function"><a href="function.ibase-execute.php" class="function">ibase_execute()</a></span>).  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_prepare" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$trans</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="simpara">   Prepare a query for later binding of parameter placeholders and execution   (via <span class="function"><a href="function.ibase-execute.php" class="function">ibase_execute()</a></span>).  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="query"/>
		<param type="mixed" name="bind_arg"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="mixed" name="bind_arg"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_query" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$bind_args</code></span>  ] )</div>  <p class="simpara">   Performs a query on an InterBase database.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="ibase_restore" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_restore</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_db</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_file"/>
		<param type="string" name="dest_db"/>
		<param type="int" name="options"/>
		<param type="bool" name="verbose"/>
	</params>
</keyword>
<keyword name="ibase_restore" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_restore</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_db</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_file"/>
		<param type="string" name="dest_db"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="ibase_restore" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ibase_restore</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$source_file</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dest_db</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$verbose</code><span class="initializer"> = false</span></span>  ]] )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="string" name="source_file"/>
		<param type="string" name="dest_db"/>
	</params>
</keyword>
<keyword name="ibase_rollback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_rollback</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_or_trans_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Rolls back a transaction.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_rollback_ret" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_rollback_ret</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_or_trans_identifier</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Rolls back a transaction without closing it.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_server_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_server_info</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$action</code></span>   )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
		<param type="int" name="action"/>
	</params>
</keyword>
<keyword name="ibase_service_attach" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_service_attach</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dba_username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dba_password</code></span>   )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="dba_username"/>
		<param type="string" name="dba_password"/>
	</params>
</keyword>
<keyword name="ibase_service_detach" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ibase_service_detach</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$service_handle</code></span>   )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="service_handle"/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
		<param type="string" name="event"/>
		<param type="" name="..."/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
		<param type="string" name="event"/>
		<param type="" name="..."/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="ibase_set_event_handler" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_set_event_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$event_handler</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function registers a PHP user function as event handler for the   specified events.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
		<param type="callback" name="handler"/>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
		<param type="" name="..."/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
		<param type="" name="... "/>
		<param type="int" name="trans_args"/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="trans_args"/>
	</params>
</keyword>
<keyword name="ibase_trans" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ibase_trans</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$trans_args</code></span>  ]] )</div>  <p class="para rdfs-comment">   Begins a transaction.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>ibase_trans()</strong></span> will not return the default transaction    of a connection. All transactions started by <span class="function"><strong>ibase_trans()</strong></span>    will be rolled back at the end of the script if they were not committed or    rolled back by either <span class="function"><a href="function.ibase-commit.php" class="function">ibase_commit()</a></span> or    <span class="function"><a href="function.ibase-rollback.php" class="function">ibase_rollback()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function will accept multiple <code class="parameter">trans_args</code>    and <code class="parameter">link_identifier</code> arguments. This allows transactions    over multiple database connections, which are committed using a 2-phase commit    algorithm. This means you can rely on the updates to either succeed in every    database, or fail in every database. It does NOT mean you can use tables from    different databases in the same query!   </p>   <p class="para">    If you use transactions over multiple databases, you will have to specify both    the <code class="parameter">link_id</code> and <code class="parameter">transaction_id</code>    in calls to <span class="function"><a href="function.ibase-query.php" class="function">ibase_query()</a></span> and <span class="function"><a href="function.ibase-prepare.php" class="function">ibase_prepare()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="ibase_wait_event" type="function" returnType="resource link_identifier">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function suspends execution of the script until one of the specified events   is posted by the database. The name of the event that was posted is returned. This   function accepts up to 15 event arguments.  </p>]]></desc>
	<params>
		<param type="string" name="event"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="ibase_wait_event" type="function" returnType="resource link_identifier">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function suspends execution of the script until one of the specified events   is posted by the database. The name of the event that was posted is returned. This   function accepts up to 15 event arguments.  </p>]]></desc>
	<params>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="ibase_wait_event" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function suspends execution of the script until one of the specified events   is posted by the database. The name of the event that was posted is returned. This   function accepts up to 15 event arguments.  </p>]]></desc>
	<params>
		<param type="string" name="event"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="ibase_wait_event" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ibase_wait_event</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name1</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$event_name2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   This function suspends execution of the script until one of the specified events   is posted by the database. The name of the event that was posted is returned. This   function accepts up to 15 event arguments.  </p>]]></desc>
	<params>
		<param type="string" name="event"/>
	</params>
</keyword>
<keyword name="iconv_get_encoding" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>iconv_get_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;all&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieve internal configuration variables of iconv extension.  </p>]]></desc>
	<params>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="iconv_get_encoding" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>iconv_get_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;all&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieve internal configuration variables of iconv extension.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="iconv_mime_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_mime_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_header</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Decodes a <em>MIME</em> header field.  </p>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
		<param type="int" name="mode"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_mime_decode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_mime_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_header</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Decodes a <em>MIME</em> header field.  </p>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
	</params>
</keyword>
<keyword name="iconv_mime_decode_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>iconv_mime_decode_headers</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_headers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Decodes multiple <em>MIME</em> header fields at once.  </p>]]></desc>
	<params>
		<param type="string" name="headers"/>
		<param type="int" name="mode"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_mime_decode_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>iconv_mime_decode_headers</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_headers</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Decodes multiple <em>MIME</em> header fields at once.  </p>]]></desc>
	<params>
		<param type="string" name="headers"/>
	</params>
</keyword>
<keyword name="iconv_mime_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_mime_encode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_value</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$preferences</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Composes and returns a string that represents a valid <em>MIME</em>   header field, which looks like the following:   <div class="example-contents screen"><div class="cdata"><pre>Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile</pre></div>   </div>   In the above example, &quot;Subject&quot; is the field name and the portion that   begins with &quot;=?ISO-8859-1?...&quot; is the field value.  </p>]]></desc>
	<params>
		<param type="string" name="field_name"/>
		<param type="string" name="field_value"/>
		<param type="array" name="preference"/>
	</params>
</keyword>
<keyword name="iconv_mime_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_mime_encode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_value</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$preferences</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Composes and returns a string that represents a valid <em>MIME</em>   header field, which looks like the following:   <div class="example-contents screen"><div class="cdata"><pre>Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile</pre></div>   </div>   In the above example, &quot;Subject&quot; is the field name and the portion that   begins with &quot;=?ISO-8859-1?...&quot; is the field value.  </p>]]></desc>
	<params>
		<param type="string" name="field_name"/>
		<param type="string" name="field_value"/>
	</params>
</keyword>
<keyword name="iconv_set_encoding" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>iconv_set_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   )</div>  <p class="para rdfs-comment">   Changes the value of the internal configuration variable specified by   <code class="parameter">type</code> to <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="type"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_strlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strlen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   In contrast to <span class="function"><a href="function.strlen.php" class="function">strlen()</a></span>,   <span class="function"><strong>iconv_strlen()</strong></span> counts the occurrences of characters   in the given byte sequence <code class="parameter">str</code> on the basis of   the specified character set, the result of which is not necessarily   identical to the length of the string in byte.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_strlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strlen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   In contrast to <span class="function"><a href="function.strlen.php" class="function">strlen()</a></span>,   <span class="function"><strong>iconv_strlen()</strong></span> counts the occurrences of characters   in the given byte sequence <code class="parameter">str</code> on the basis of   the specified character set, the result of which is not necessarily   identical to the length of the string in byte.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="iconv_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of first occurrence of a <code class="parameter">needle</code>   within a <code class="parameter">haystack</code>.  </p>  <p class="para">   In contrast to <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span>, the return value of   <span class="function"><strong>iconv_strpos()</strong></span> is the number of characters that   appear before the needle, rather than the offset in bytes to the   position where the needle has been found. The characters are counted   on the basis of the specified character set <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of first occurrence of a <code class="parameter">needle</code>   within a <code class="parameter">haystack</code>.  </p>  <p class="para">   In contrast to <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span>, the return value of   <span class="function"><strong>iconv_strpos()</strong></span> is the number of characters that   appear before the needle, rather than the offset in bytes to the   position where the needle has been found. The characters are counted   on the basis of the specified character set <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="iconv_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of first occurrence of a <code class="parameter">needle</code>   within a <code class="parameter">haystack</code>.  </p>  <p class="para">   In contrast to <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span>, the return value of   <span class="function"><strong>iconv_strpos()</strong></span> is the number of characters that   appear before the needle, rather than the offset in bytes to the   position where the needle has been found. The characters are counted   on the basis of the specified character set <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="iconv_strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Finds the last occurrence of a <code class="parameter">needle</code>   within a <code class="parameter">haystack</code>.  </p>  <p class="para">   In contrast to <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span>, the return value of   <span class="function"><strong>iconv_strrpos()</strong></span> is the number of characters that   appear before the needle, rather than the offset in bytes to the   position where the needle has been found. The characters are counted   on the basis of the specified character set <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iconv_strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Finds the last occurrence of a <code class="parameter">needle</code>   within a <code class="parameter">haystack</code>.  </p>  <p class="para">   In contrast to <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span>, the return value of   <span class="function"><strong>iconv_strrpos()</strong></span> is the number of characters that   appear before the needle, rather than the offset in bytes to the   position where the needle has been found. The characters are counted   on the basis of the specified character set <code class="parameter">charset</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="iconv_substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = iconv_strlen($str, $charset)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Cuts a portion of <code class="parameter">str</code> specified by the    <code class="parameter">offset</code> and <code class="parameter">length</code> parameters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="iconv_substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>iconv_substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = iconv_strlen($str, $charset)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = ini_get(&quot;iconv.internal_encoding&quot;)</span></span>  ]] )</div>  <p class="para rdfs-comment">   Cuts a portion of <code class="parameter">str</code> specified by the    <code class="parameter">offset</code> and <code class="parameter">length</code> parameters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="idate" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>idate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns a number formatted according to the given format string using the   given integer <code class="parameter">timestamp</code> or the current local time   if no timestamp is given. In other words, <code class="parameter">timestamp</code>   is optional and defaults to the value of <span class="function"><a href="function.time.php" class="function">time()</a></span>.  </p>  <p class="para">   Unlike the function <span class="function"><a href="function.date.php" class="function">date()</a></span>, <span class="function"><strong>idate()</strong></span>   accepts just one char in the <code class="parameter">format</code> parameter.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="idate" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>idate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns a number formatted according to the given format string using the   given integer <code class="parameter">timestamp</code> or the current local time   if no timestamp is given. In other words, <code class="parameter">timestamp</code>   is optional and defaults to the value of <span class="function"><a href="function.time.php" class="function">time()</a></span>.  </p>  <p class="para">   Unlike the function <span class="function"><a href="function.date.php" class="function">date()</a></span>, <span class="function"><strong>idate()</strong></span>   accepts just one char in the <code class="parameter">format</code> parameter.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="ignore_user_abort" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ignore_user_abort</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets whether a client disconnect should cause a script to be aborted.  </p>  <p class="para">   When running PHP as a command line script, and the script&#039;s tty goes   away without the script being terminated then the script will die the   next time it tries to write anything, unless   <code class="parameter">value</code> is set to <strong><code>TRUE</code></strong>  </p>]]></desc>
	<params>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="ignore_user_abort" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ignore_user_abort</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets whether a client disconnect should cause a script to be aborted.  </p>  <p class="para">   When running PHP as a command line script, and the script&#039;s tty goes   away without the script being terminated then the script will die the   next time it tries to write anything, unless   <code class="parameter">value</code> is set to <strong><code>TRUE</code></strong>  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="image_type_to_extension" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>image_type_to_extension</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$imagetype</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$include_dot</code><span class="initializer"> = <strong><code>TRUE</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the extension for the given <em>IMAGETYPE_XXX</em>   constant.  </p>]]></desc>
	<params>
		<param type="int" name="imagetype"/>
		<param type="bool" name="include_dot"/>
	</params>
</keyword>
<keyword name="image_type_to_extension" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>image_type_to_extension</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$imagetype</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$include_dot</code><span class="initializer"> = <strong><code>TRUE</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the extension for the given <em>IMAGETYPE_XXX</em>   constant.  </p>]]></desc>
	<params>
		<param type="int" name="imagetype"/>
	</params>
</keyword>
<keyword name="image_type_to_mime_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>image_type_to_mime_type</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$imagetype</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>image_type_to_mime_type()</strong></span> function will determine   the Mime-Type for an IMAGETYPE constant.  </p>]]></desc>
	<params>
		<param type="int" name="imagetype"/>
	</params>
</keyword>
<keyword name="imagealphablending" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagealphablending</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$blendmode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagealphablending()</strong></span> allows for two different   modes of drawing on truecolor images. In blending mode, the   alpha channel component of the color supplied to all drawing function,   such as <span class="function"><a href="function.imagesetpixel.php" class="function">imagesetpixel()</a></span> determines how much of the   underlying color should be allowed to shine through.  As a result, gd   automatically blends the existing color at that point with the drawing color,   and stores the result in the image.  The resulting pixel is opaque.  In   non-blending mode, the drawing color is copied literally with its alpha channel   information, replacing the destination pixel.  Blending mode is not available   when drawing on palette images.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="bool" name="on"/>
	</params>
</keyword>
<keyword name="imageantialias" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imageantialias</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$enabled</code></span>   )</div>  <p class="para rdfs-comment">   Activate the fast drawing antialiased methods for lines and wired polygons.   It does not support alpha components. It works using a direct blend   operation. It works only with truecolor images.  </p>  <p class="para">   Thickness and styled are not supported.  </p>  <p class="para">   Using antialiased primitives with transparent background color can end with   some unexpected results. The blend method uses the background color as any   other colors. The lack of alpha component support does not allow an alpha   based antialiasing method.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="bool" name="on"/>
	</params>
</keyword>
<keyword name="imagearc" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagearc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cx</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cy</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$end</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagearc()</strong></span> draws an arc of circle centered at the given   coordinates.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="cx"/>
		<param type="int" name="cy"/>
		<param type="int" name="w"/>
		<param type="int" name="h"/>
		<param type="int" name="s"/>
		<param type="int" name="e"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagechar" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagechar</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$c</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagechar()</strong></span> draws the first character of   <code class="parameter">c</code> in the image identified by   <code class="parameter">image</code> with its upper-left at   <code class="parameter">x</code>,<code class="parameter">y</code> (top left is 0,   0) with the color <code class="parameter">color</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="font"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="string" name="c"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagecharup" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecharup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$c</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws the character <code class="parameter">c</code> vertically at the specified   coordinate on the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="font"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="string" name="c"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagecolorallocate" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorallocate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   )</div>  <p class="para rdfs-comment">   Returns a color identifier representing the color composed of the given   <acronym title="Red-Green-Blue">RGB</acronym> components.  </p>  <p class="para">   <span class="function"><strong>imagecolorallocate()</strong></span> must be called   to create each color that is to be used in the image represented   by <code class="parameter">image</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The first call to <span class="function"><strong>imagecolorallocate()</strong></span> fills    the background color in palette-based images - images created using    <span class="function"><a href="function.imagecreate.php" class="function">imagecreate()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolorallocatealpha" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorallocatealpha</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$alpha</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecolorallocatealpha()</strong></span> behaves identically to   <span class="function"><a href="function.imagecolorallocate.php" class="function">imagecolorallocate()</a></span> with the addition of the transparency   parameter <code class="parameter">alpha</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
		<param type="int" name="alpha"/>
	</params>
</keyword>
<keyword name="imagecolorat" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorat</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   )</div>  <p class="para rdfs-comment">   Returns the index of the color of the pixel at the   specified location in the image specified by <code class="parameter">image</code>.  </p>  <p class="para">   If PHP is compiled against GD library 2.0 or higher and the image is a   truecolor image, this function returns the RGB value of that pixel as   integer. Use bitshifting and masking to access the distinct red, green and blue   component values:  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
	</params>
</keyword>
<keyword name="imagecolorclosest" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorclosest</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   )</div>  <p class="para rdfs-comment">   Returns the index of the color in the palette of the image which   is &quot;closest&quot; to the specified <acronym title="Red-Green-Blue">RGB</acronym> value.  </p>  <p class="para">   The &quot;distance&quot; between the desired color and each color in the   palette is calculated as if the <acronym title="Red-Green-Blue">RGB</acronym> values   represented points in three-dimensional space.  </p>  <p class="para">If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.</p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolorclosestalpha" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorclosestalpha</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$alpha</code></span>   )</div>  <p class="para rdfs-comment">   Returns the index of the color in the palette of the image which   is &quot;closest&quot; to the specified <acronym title="Red-Green-Blue">RGB</acronym> value and    <code class="parameter">alpha</code> level.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
		<param type="int" name="alpha"/>
	</params>
</keyword>
<keyword name="imagecolorclosesthwb" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorclosesthwb</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   )</div>  <p class="para rdfs-comment">   Get the index of the color which has the hue,    white and blackness nearest the given color.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolordeallocate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecolordeallocate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   De-allocates a color previously allocated with    <span class="function"><a href="function.imagecolorallocate.php" class="function">imagecolorallocate()</a></span> or   <span class="function"><a href="function.imagecolorallocatealpha.php" class="function">imagecolorallocatealpha()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="imagecolorexact" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorexact</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   )</div>  <p class="para rdfs-comment">   Returns the index of the specified color in the palette of the   image.  </p>  <p class="para">If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.</p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolorexactalpha" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorexactalpha</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$alpha</code></span>   )</div>  <p class="para rdfs-comment">   Returns the index of the specified color+alpha in the palette of the   image.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
		<param type="int" name="alpha"/>
	</params>
</keyword>
<keyword name="imagecolormatch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecolormatch</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image1</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image2</code></span>   )</div>  <p class="para rdfs-comment">   Makes the colors of the palette version of an image more closely match the true color version.  </p>]]></desc>
	<params>
		<param type="resource" name="im1"/>
		<param type="resource" name="im2"/>
	</params>
</keyword>
<keyword name="imagecolorresolve" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorresolve</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   )</div>  <p class="para rdfs-comment">   This function is guaranteed to return a color index for a   requested color, either the exact color or the closest possible   alternative.  </p>  <p class="para">If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.</p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolorresolvealpha" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorresolvealpha</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$alpha</code></span>   )</div>  <p class="para rdfs-comment">   This function is guaranteed to return a color index for a   requested color, either the exact color or the closest possible   alternative.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
		<param type="int" name="alpha"/>
	</params>
</keyword>
<keyword name="imagecolorset" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>imagecolorset</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$red</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$green</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$blue</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$alpha</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This sets the specified index in the palette to the specified   color. This is useful for creating flood-fill-like effects in   palleted images without the overhead of performing the actual   flood-fill.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="col"/>
		<param type="int" name="red"/>
		<param type="int" name="green"/>
		<param type="int" name="blue"/>
	</params>
</keyword>
<keyword name="imagecolorsforindex" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagecolorsforindex</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$index</code></span>   )</div>  <p class="para rdfs-comment">   Gets the color for a specified index.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagecolorstotal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolorstotal</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of colors in an image palette.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagecolortransparent" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolortransparent</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets the transparent color in the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagecolortransparent" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagecolortransparent</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>  ] )</div>  <p class="para rdfs-comment">   Sets the transparent color in the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imageconvolution" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imageconvolution</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$matrix</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$div</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$offset</code></span>   )</div>  <p class="para rdfs-comment">   Applies a convolution matrix on the image, using the given coefficient and   offset.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="array" name="matrix3x3"/>
		<param type="double" name="div"/>
		<param type="double" name="offset"/>
	</params>
</keyword>
<keyword name="imagecopy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecopy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dst_im</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$src_im</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_h</code></span>   )</div>  <p class="para rdfs-comment">   Copy a part of <code class="parameter">src_im</code> onto   <code class="parameter">dst_im</code> starting at the x,y coordinates   <code class="parameter">src_x</code>, <code class="parameter">src_y </code> with   a width of <code class="parameter">src_w</code> and a height of   <code class="parameter">src_h</code>.  The portion defined will be copied   onto the x,y coordinates, <code class="parameter">dst_x</code> and   <code class="parameter">dst_y</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="dst_im"/>
		<param type="resource" name="src_im"/>
		<param type="int" name="dst_x"/>
		<param type="int" name="dst_y"/>
		<param type="int" name="src_x"/>
		<param type="int" name="src_y"/>
		<param type="int" name="src_w"/>
		<param type="int" name="src_h"/>
	</params>
</keyword>
<keyword name="imagecopymerge" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecopymerge</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dst_im</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$src_im</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_h</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pct</code></span>   )</div>  <p class="para rdfs-comment">   Copy a part of <code class="parameter">src_im</code> onto   <code class="parameter">dst_im</code> starting at the x,y coordinates   <code class="parameter">src_x</code>, <code class="parameter">src_y </code> with   a width of <code class="parameter">src_w</code> and a height of   <code class="parameter">src_h</code>.  The portion defined will be copied   onto the x,y coordinates, <code class="parameter">dst_x</code> and   <code class="parameter">dst_y</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="resource" name="dst_im"/>
		<param type="int" name="dst_x"/>
		<param type="int" name="dst_y"/>
		<param type="int" name="src_x"/>
		<param type="int" name="src_y"/>
		<param type="int" name="src_w"/>
		<param type="int" name="src_h"/>
		<param type="int" name="pct"/>
	</params>
</keyword>
<keyword name="imagecopymergegray" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecopymergegray</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dst_im</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$src_im</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_h</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pct</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecopymergegray()</strong></span> copy a part of <code class="parameter">src_im</code> onto   <code class="parameter">dst_im</code> starting at the x,y coordinates   <code class="parameter">src_x</code>, <code class="parameter">src_y </code> with   a width of <code class="parameter">src_w</code> and a height of   <code class="parameter">src_h</code>.  The portion defined will be copied   onto the x,y coordinates, <code class="parameter">dst_x</code> and   <code class="parameter">dst_y</code>.  </p>  <p class="para">   This function is identical to <span class="function"><a href="function.imagecopymerge.php" class="function">imagecopymerge()</a></span> except   that when merging it preserves the hue of the source by converting   the destination pixels to gray scale before the copy operation.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="resource" name="dst_im"/>
		<param type="int" name="dst_x"/>
		<param type="int" name="dst_y"/>
		<param type="int" name="src_x"/>
		<param type="int" name="src_y"/>
		<param type="int" name="src_w"/>
		<param type="int" name="src_h"/>
		<param type="int" name="pct"/>
	</params>
</keyword>
<keyword name="imagecopyresampled" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecopyresampled</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dst_image</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$src_image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_h</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_h</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecopyresampled()</strong></span> copies a rectangular   portion of one image to another image, smoothly interpolating pixel   values so that, in particular, reducing the size of an image still   retains a great deal of clarity.  </p>  <p class="para">   In other words, <span class="function"><strong>imagecopyresampled()</strong></span> will take a    rectangular area from <code class="parameter">src_image</code> of width    <code class="parameter">src_w</code> and height <code class="parameter">src_h</code> at    position (<code class="parameter">src_x</code>,<code class="parameter">src_y</code>)    and place it in a rectangular area of <code class="parameter">dst_image</code>    of width <code class="parameter">dst_w</code> and height <code class="parameter">dst_h</code>   at position (<code class="parameter">dst_x</code>,<code class="parameter">dst_y</code>).  </p>  <p class="para">   If the source and destination coordinates and width and heights   differ, appropriate stretching or shrinking of the image fragment   will be performed. The coordinates refer to the upper left   corner.  This function can be used to copy regions within the   same image (if <code class="parameter">dst_image</code> is the same as   <code class="parameter">src_image</code>) but if the regions overlap the   results will be unpredictable.  </p>]]></desc>
	<params>
		<param type="resource" name="dst_im"/>
		<param type="resource" name="src_im"/>
		<param type="int" name="dst_x"/>
		<param type="int" name="dst_y"/>
		<param type="int" name="src_x"/>
		<param type="int" name="src_y"/>
		<param type="int" name="dst_w"/>
		<param type="int" name="dst_h"/>
		<param type="int" name="src_w"/>
		<param type="int" name="src_h"/>
	</params>
</keyword>
<keyword name="imagecopyresized" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagecopyresized</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dst_image</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$src_image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$dst_h</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_w</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$src_h</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecopyresized()</strong></span> copies a rectangular   portion of one image to another image.   <code class="parameter">dst_image</code> is the destination image,   <code class="parameter">src_image</code> is the source image identifier.  </p>  <p class="para">   In other words, <span class="function"><strong>imagecopyresized()</strong></span> will take a    rectangular area from <code class="parameter">src_image</code> of width    <code class="parameter">src_w</code> and height <code class="parameter">src_h</code> at    position (<code class="parameter">src_x</code>,<code class="parameter">src_y</code>)    and place it in a rectangular area of <code class="parameter">dst_image</code>    of width <code class="parameter">dst_w</code> and height <code class="parameter">dst_h</code>   at position (<code class="parameter">dst_x</code>,<code class="parameter">dst_y</code>).  </p>  <p class="para">   If the source and destination coordinates and width and heights   differ, appropriate stretching or shrinking of the image fragment   will be performed. The coordinates refer to the upper left   corner. This function can be used to copy regions within the   same image (if <code class="parameter">dst_image</code> is the same as   <code class="parameter">src_image</code>) but if the regions overlap the   results will be unpredictable.  </p>]]></desc>
	<params>
		<param type="resource" name="dst_im"/>
		<param type="resource" name="src_im"/>
		<param type="int" name="dst_x"/>
		<param type="int" name="dst_y"/>
		<param type="int" name="src_x"/>
		<param type="int" name="src_y"/>
		<param type="int" name="dst_w"/>
		<param type="int" name="dst_h"/>
		<param type="int" name="src_w"/>
		<param type="int" name="src_h"/>
	</params>
</keyword>
<keyword name="imagecreate" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreate</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreate()</strong></span> returns an image identifier   representing a blank image of specified size.  </p>  <p class="para">   In general, we recommend the use of   <span class="function"><a href="function.imagecreatetruecolor.php" class="function">imagecreatetruecolor()</a></span> instead of   <span class="function"><strong>imagecreate()</strong></span> so that image processing occurs on the   highest quality image possible. If you want to output a palette image, then   <span class="function"><a href="function.imagetruecolortopalette.php" class="function">imagetruecolortopalette()</a></span> should be called immediately   before saving the image with <span class="function"><a href="function.imagepng.php" class="function">imagepng()</a></span> or   <span class="function"><a href="function.imagegif.php" class="function">imagegif()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="x_size"/>
		<param type="int" name="y_size"/>
	</params>
</keyword>
<keyword name="imagecreatefromgd" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromgd</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Create a new image from GD file or URL.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefromgif" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromgif</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromgif()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefromjpeg" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromjpeg</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromjpeg()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefrompng" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefrompng</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefrompng()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefromstring" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromstring</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromstring()</strong></span> returns an image identifier   representing the image obtained from the given <code class="parameter">image</code>.   These types will be automatically detected if your build of PHP supports    them: JPEG, PNG, GIF, WBMP, and GD2.  </p>]]></desc>
	<params>
		<param type="string" name="image"/>
	</params>
</keyword>
<keyword name="imagecreatefromwbmp" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromwbmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromwbmp()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefromxbm" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromxbm</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromxbm()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatefromxpm" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatefromxpm</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatefromxpm()</strong></span> returns an image identifier   representing the image obtained from the given filename.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">A URL can be used as afilename with this function if the <a href="filesystem.configuration.php#ini.allow-url-fopen" class="link">fopen wrappers</a> have been enabled.See <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span> for more details on how to specify thefilename. See the <a href="wrappers.php" class="xref">Supported Protocols and Wrappers</a> for links to informationabout what abilities the various wrappers have, notes on their usage,and information on any predefined variables they mayprovide.</p></div>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagecreatetruecolor" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagecreatetruecolor</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagecreatetruecolor()</strong></span> returns an image identifier   representing a black image of the specified size.  </p>  <p class="para">   Depending on your PHP and GD versions this function is defined or not. With   PHP 4.0.6 through 4.1.x this function always exists if the GD module is   loaded, but calling it without GD2 being installed PHP will issue a fatal   error and exit. With PHP 4.2.x this behaviour is different in issuing a   warning instead of an error. Other versions only define this function, if   the correct GD version is installed.  </p>]]></desc>
	<params>
		<param type="int" name="x_size"/>
		<param type="int" name="y_size"/>
	</params>
</keyword>
<keyword name="imagedashedline" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagedashedline</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   This function is deprecated. Use combination of   <span class="function"><a href="function.imagesetstyle.php" class="function">imagesetstyle()</a></span> and <span class="function"><a href="function.imageline.php" class="function">imageline()</a></span>   instead.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x1"/>
		<param type="int" name="y1"/>
		<param type="int" name="x2"/>
		<param type="int" name="y2"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagedestroy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagedestroy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagedestroy()</strong></span> frees any memory associated   with image <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imageellipse" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imageellipse</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cx</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cy</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws an ellipse centered at the specified coordinates.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="cx"/>
		<param type="int" name="cy"/>
		<param type="int" name="w"/>
		<param type="int" name="h"/>
		<param type="int" name="color"/>
	</params>
</keyword>
<keyword name="imagefill" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefill</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Performs a flood fill starting at the given coordinate (top left is 0, 0)   with the given <code class="parameter">color</code> in the   <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagefilledarc" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilledarc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cx</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cy</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$end</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$style</code></span>   )</div>  <p class="para rdfs-comment">   Draws a partial arc centered at the specified coordinate in the   given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="cx"/>
		<param type="int" name="cy"/>
		<param type="int" name="w"/>
		<param type="int" name="h"/>
		<param type="int" name="s"/>
		<param type="int" name="e"/>
		<param type="int" name="col"/>
		<param type="int" name="style"/>
	</params>
</keyword>
<keyword name="imagefilledellipse" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilledellipse</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cx</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cy</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$height</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws an ellipse centered at the specified coordinate on the given   <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="cx"/>
		<param type="int" name="cy"/>
		<param type="int" name="w"/>
		<param type="int" name="h"/>
		<param type="int" name="color"/>
	</params>
</keyword>
<keyword name="imagefilledpolygon" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilledpolygon</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$points</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_points</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagefilledpolygon()</strong></span> creates a filled polygon   in the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="array" name="point"/>
		<param type="int" name="num_points"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagefilledrectangle" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilledrectangle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Creates a rectangle filled with <code class="parameter">color</code> in the given   <code class="parameter">image</code> starting at point 1 and ending at point 2.   0, 0 is the top left corner of the image.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x1"/>
		<param type="int" name="y1"/>
		<param type="int" name="x2"/>
		<param type="int" name="y2"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagefilltoborder" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilltoborder</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$border</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagefilltoborder()</strong></span> performs a flood fill   whose border color is defined by <code class="parameter">border</code>.   The starting point for the fill is <code class="parameter">x</code>,   <code class="parameter">y</code> (top left is 0, 0) and the region is   filled with color <code class="parameter">color</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="border"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagefilter" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilter</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$filtertype</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg1</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg2</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg3</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg4</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagefilter()</strong></span> applies the given filter   <code class="parameter">filtertype</code> on the <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="int" name="filtertype"/>
		<param type="int" name="..."/>
	</params>
</keyword>
<keyword name="imagefilter" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagefilter</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$filtertype</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg1</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg2</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg3</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$arg4</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagefilter()</strong></span> applies the given filter   <code class="parameter">filtertype</code> on the <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="int" name="filtertype"/>
	</params>
</keyword>
<keyword name="imagefontheight" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagefontheight</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   )</div>  <p class="para rdfs-comment">   Returns the pixel height of a character in the specified font.  </p>]]></desc>
	<params>
		<param type="int" name="font"/>
	</params>
</keyword>
<keyword name="imagefontwidth" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagefontwidth</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   )</div>  <p class="para rdfs-comment">   Returns the pixel width of a character in font.  </p>]]></desc>
	<params>
		<param type="int" name="font"/>
	</params>
</keyword>
<keyword name="imageftbbox" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imageftbbox</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extrainfo</code></span>  ] )</div>  <p class="para rdfs-comment">   This function calculates and returns the bounding box in pixels   for a FreeType text.  </p>]]></desc>
	<params>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
		<param type="array" name="extrainfo"/>
	</params>
</keyword>
<keyword name="imageftbbox" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imageftbbox</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extrainfo</code></span>  ] )</div>  <p class="para rdfs-comment">   This function calculates and returns the bounding box in pixels   for a FreeType text.  </p>]]></desc>
	<params>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="imagefttext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagefttext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extrainfo</code></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="col"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
		<param type="array" name="extrainfo"/>
	</params>
</keyword>
<keyword name="imagefttext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagefttext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extrainfo</code></span>  ] )</div>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="col"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="imagegammacorrect" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagegammacorrect</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$inputgamma</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$outputgamma</code></span>   )</div>  <p class="para rdfs-comment">   Applies gamma correction to the given gd <code class="parameter">image</code>    given an input and an output gamma.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="float" name="inputgamma"/>
		<param type="float" name="outputgamma"/>
	</params>
</keyword>
<keyword name="imagegd" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagegd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   Outputs a GD image to the given <code class="parameter">filename</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagegd" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagegd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   Outputs a GD image to the given <code class="parameter">filename</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagegif" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagegif</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagegif()</strong></span> creates the <acronym title="Graphic Interchange Format">GIF</acronym>   file in filename from the image <code class="parameter">image</code>. The   <code class="parameter">image</code> argument is the return from the   <span class="function"><a href="function.imagecreate.php" class="function">imagecreate()</a></span> or <em>imagecreatefrom*</em>   function.  </p>  <p class="para">   The image format will be <acronym>GIF87a</acronym> unless the   image has been made transparent with   <span class="function"><a href="function.imagecolortransparent.php" class="function">imagecolortransparent()</a></span>, in which case the   image format will be <acronym>GIF89a</acronym>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagegif" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagegif</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagegif()</strong></span> creates the <acronym title="Graphic Interchange Format">GIF</acronym>   file in filename from the image <code class="parameter">image</code>. The   <code class="parameter">image</code> argument is the return from the   <span class="function"><a href="function.imagecreate.php" class="function">imagecreate()</a></span> or <em>imagecreatefrom*</em>   function.  </p>  <p class="para">   The image format will be <acronym>GIF87a</acronym> unless the   image has been made transparent with   <span class="function"><a href="function.imagecolortransparent.php" class="function">imagecolortransparent()</a></span>, in which case the   image format will be <acronym>GIF89a</acronym>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagegrabscreen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagegrabscreen</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Grabs a screenshot of the whole screen.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="imagegrabwindow" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagegrabwindow</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$window_handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_area</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Grabs a window or its client area using a windows handle (HWND property in COM instance)  </p>]]></desc>
	<params>
		<param type="int" name="window_handle"/>
		<param type="int" name="client_area"/>
	</params>
</keyword>
<keyword name="imagegrabwindow" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagegrabwindow</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$window_handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_area</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Grabs a window or its client area using a windows handle (HWND property in COM instance)  </p>]]></desc>
	<params>
		<param type="int" name="window_handle"/>
	</params>
</keyword>
<keyword name="imageinterlace" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imageinterlace</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$interlace</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imageinterlace()</strong></span> turns the interlace bit on or off.  </p>  <p class="para">   If the interlace bit is set and the image is used as a <acronym title="Joint Photographic Experts Group">JPEG</acronym> image,   the image is created as a progressive <acronym title="Joint Photographic Experts Group">JPEG</acronym>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="interlace"/>
	</params>
</keyword>
<keyword name="imageinterlace" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imageinterlace</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$interlace</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imageinterlace()</strong></span> turns the interlace bit on or off.  </p>  <p class="para">   If the interlace bit is set and the image is used as a <acronym title="Joint Photographic Experts Group">JPEG</acronym> image,   the image is created as a progressive <acronym title="Joint Photographic Experts Group">JPEG</acronym>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imageistruecolor" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imageistruecolor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imageistruecolor()</strong></span> finds whether the image   <code class="parameter">image</code> is a truecolor image.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagejpeg" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagejpeg</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagejpeg()</strong></span> creates a <acronym title="Joint Photographic Experts Group">JPEG</acronym> file from   the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
		<param type="int" name="quality"/>
	</params>
</keyword>
<keyword name="imagejpeg" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagejpeg</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagejpeg()</strong></span> creates a <acronym title="Joint Photographic Experts Group">JPEG</acronym> file from   the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagejpeg" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagejpeg</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagejpeg()</strong></span> creates a <acronym title="Joint Photographic Experts Group">JPEG</acronym> file from   the given <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagelayereffect" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagelayereffect</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$effect</code></span>   )</div>  <p class="para rdfs-comment">   Set the alpha blending flag to use the bundled libgd layering effects.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="effect"/>
	</params>
</keyword>
<keyword name="imageline" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imageline</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws a line between the two given points.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x1"/>
		<param type="int" name="y1"/>
		<param type="int" name="x2"/>
		<param type="int" name="y2"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imageloadfont" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imageloadfont</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$file</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imageloadfont()</strong></span> loads a user-defined bitmap and returns   its identifier.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagepalettecopy" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>imagepalettecopy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$destination</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$source</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagepalettecopy()</strong></span> copies the palette from the   <code class="parameter">source</code> image to the    <code class="parameter">destination</code> image.  </p>]]></desc>
	<params>
		<param type="resource" name="dst"/>
		<param type="resource" name="src"/>
	</params>
</keyword>
<keyword name="imagepng" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepng</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filters</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Outputs or saves a <acronym title="Portable Network Graphics">PNG</acronym> image from the given    <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
		<param type="int" name="quality"/>
	</params>
</keyword>
<keyword name="imagepng" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepng</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filters</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Outputs or saves a <acronym title="Portable Network Graphics">PNG</acronym> image from the given    <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagepng" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepng</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$quality</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$filters</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Outputs or saves a <acronym title="Portable Network Graphics">PNG</acronym> image from the given    <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagepolygon" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepolygon</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$points</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_points</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagepolygon()</strong></span> creates a polygon in the given   <code class="parameter">image</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="array" name="point"/>
		<param type="int" name="num_points"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagepsbbox" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepsbbox</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepsbbox</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$space</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$tightness</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   )</div>  <p class="para rdfs-comment">   Gives the bounding box of a text rectangle using PostScript Type1 fonts.  </p>  <p class="para">   The bounding box is calculated using information available from character   metrics, and unfortunately tends to differ slightly from the results    achieved by actually rasterizing the text. If the angle is 0 degrees, you   can expect the text to need 1 pixel more to every direction.  </p>]]></desc>
	<params>
		<param type="string" name="text"/>
		<param type="resource" name="font"/>
		<param type="int" name="size"/>
		<param type="int" name="space"/>
		<param type="int" name="tightness"/>
		<param type="int" name="angle"/>
	</params>
</keyword>
<keyword name="imagepsbbox" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepsbbox</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepsbbox</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$space</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$tightness</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   )</div>  <p class="para rdfs-comment">   Gives the bounding box of a text rectangle using PostScript Type1 fonts.  </p>  <p class="para">   The bounding box is calculated using information available from character   metrics, and unfortunately tends to differ slightly from the results    achieved by actually rasterizing the text. If the angle is 0 degrees, you   can expect the text to need 1 pixel more to every direction.  </p>]]></desc>
	<params>
		<param type="string" name="text"/>
		<param type="resource" name="font"/>
		<param type="int" name="size"/>
	</params>
</keyword>
<keyword name="imagepsencodefont" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepsencodefont</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$encodingfile</code></span>   )</div>  <p class="para rdfs-comment">   Loads a character encoding vector from a file and changes the fonts    encoding vector to it. As a PostScript fonts default vector lacks most of   the character positions above 127, you&#039;ll definitely want to change this   if you use a language other than English.   </p>  <p class="para">   If you find yourself using this function all the time, a much   better way to define the encoding is to set ps.default_encoding in   the <a href="configuration.file.php" class="link">configuration file</a>   to point to the right encoding file and all fonts you load will   automatically have the right encoding.  </p>]]></desc>
	<params>
		<param type="resource" name="font_index"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagepsextendfont" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepsextendfont</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$extend</code></span>   )</div>  <p class="para rdfs-comment">   Extend or condense a font (<code class="parameter">font_index</code>), if   the value of the <code class="parameter">extend</code> parameter is less   than one you will be condensing the font.  </p>]]></desc>
	<params>
		<param type="resource" name="font_index"/>
		<param type="float" name="extend"/>
	</params>
</keyword>
<keyword name="imagepsfreefont" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepsfreefont</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagepsfreefont()</strong></span> frees memory used by a PostScript   Type 1 font.  </p>]]></desc>
	<params>
		<param type="resource" name="font_index"/>
	</params>
</keyword>
<keyword name="imagepsloadfont" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagepsloadfont</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Load a PostScript Type 1 font from the given    <code class="parameter">filename</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
	</params>
</keyword>
<keyword name="imagepsslantfont" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagepsslantfont</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$slant</code></span>   )</div>  <p class="para rdfs-comment">   Slant a given font given.  </p>]]></desc>
	<params>
		<param type="resource" name="font_index"/>
		<param type="float" name="slant"/>
	</params>
</keyword>
<keyword name="imagepstext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepstext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$background</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$space</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$tightness</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code><span class="initializer"> = 0.0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$antialias_steps</code><span class="initializer"> = 4</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Draws a text on an image using PostScript Type1 fonts.  </p>  <p class="para">   Refer to PostScript documentation about fonts and their measuring system   if you have trouble understanding how this works.  </p>]]></desc>
	<params>
		<param type="resource" name="image"/>
		<param type="string" name="text"/>
		<param type="resource" name="font"/>
		<param type="int" name="size"/>
		<param type="int" name="foreground"/>
		<param type="int" name="background"/>
		<param type="int" name="xcoord"/>
		<param type="int" name="ycoord"/>
		<param type="int" name="space"/>
		<param type="int" name="tightness"/>
		<param type="float" name="angle"/>
		<param type="int" name="antialias"/>
	</params>
</keyword>
<keyword name="imagepstext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagepstext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$font_index</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$background</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$space</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$tightness</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code><span class="initializer"> = 0.0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$antialias_steps</code><span class="initializer"> = 4</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Draws a text on an image using PostScript Type1 fonts.  </p>  <p class="para">   Refer to PostScript documentation about fonts and their measuring system   if you have trouble understanding how this works.  </p>]]></desc>
	<params>
		<param type="resource" name="image"/>
		<param type="string" name="text"/>
		<param type="resource" name="font"/>
		<param type="int" name="size"/>
		<param type="int" name="foreground"/>
		<param type="int" name="background"/>
		<param type="int" name="xcoord"/>
		<param type="int" name="ycoord"/>
	</params>
</keyword>
<keyword name="imagerectangle" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagerectangle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y1</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagerectangle()</strong></span> creates a rectangle starting at   the specified coordinates.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x1"/>
		<param type="int" name="y1"/>
		<param type="int" name="x2"/>
		<param type="int" name="y2"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagerotate" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagerotate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$bgd_color</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$ignore_transparent</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Rotates the <code class="parameter">image</code> image using the given   <code class="parameter">angle</code> in degrees.   </p>  <p class="para">   The center of rotation is the center of the image, and the rotated   image may have different dimensions than the original image.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="float" name="angle"/>
		<param type="int" name="bgdcolor"/>
		<param type="int" name="ignoretransparent"/>
	</params>
</keyword>
<keyword name="imagerotate" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imagerotate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$bgd_color</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$ignore_transparent</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Rotates the <code class="parameter">image</code> image using the given   <code class="parameter">angle</code> in degrees.   </p>  <p class="para">   The center of rotation is the center of the image, and the rotated   image may have different dimensions than the original image.  </p>]]></desc>
	<params>
		<param type="resource" name="src_im"/>
		<param type="float" name="angle"/>
		<param type="int" name="bgdcolor"/>
	</params>
</keyword>
<keyword name="imagesavealpha" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesavealpha</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$saveflag</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesavealpha()</strong></span> sets the flag to attempt to save   full alpha channel information (as opposed to single-color transparency)   when saving PNG images.  </p>  <p class="para">   You have to unset alphablending   (<em>imagealphablending($im, false)</em>), to use it.  </p>  <p class="para">   Alpha channel is not supported by all browsers, if you have problem with   your browser, try to load your script with an alpha channel compliant   browser, e.g. latest Mozilla.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="bool" name="on"/>
	</params>
</keyword>
<keyword name="imagesetbrush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesetbrush</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$brush</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesetbrush()</strong></span> sets the brush image to be   used by all line drawing functions (such as <span class="function"><a href="function.imageline.php" class="function">imageline()</a></span>   and <span class="function"><a href="function.imagepolygon.php" class="function">imagepolygon()</a></span>) when drawing with the special   colors <strong><code>IMG_COLOR_BRUSHED</code></strong> or   <strong><code>IMG_COLOR_STYLEDBRUSHED</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="image"/>
		<param type="resource" name="brush"/>
	</params>
</keyword>
<keyword name="imagesetpixel" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesetpixel</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesetpixel()</strong></span> draws a pixel at the specified   coordinate.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagesetstyle" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesetstyle</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$style</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesetstyle()</strong></span> sets the style to be used by all   line drawing functions (such as <span class="function"><a href="function.imageline.php" class="function">imageline()</a></span>   and <span class="function"><a href="function.imagepolygon.php" class="function">imagepolygon()</a></span>) when drawing with the special   color <strong><code>IMG_COLOR_STYLED</code></strong> or lines of images with color   <strong><code>IMG_COLOR_STYLEDBRUSHED</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="array" name="styles"/>
	</params>
</keyword>
<keyword name="imagesetthickness" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesetthickness</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$thickness</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesetthickness()</strong></span> sets the thickness of the lines   drawn when drawing rectangles, polygons, ellipses etc. etc. to   <code class="parameter">thickness</code> pixels.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="thickness"/>
	</params>
</keyword>
<keyword name="imagesettile" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagesettile</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$tile</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagesettile()</strong></span> sets the tile image to be   used by all region filling functions (such as <span class="function"><a href="function.imagefill.php" class="function">imagefill()</a></span>   and <span class="function"><a href="function.imagefilledpolygon.php" class="function">imagefilledpolygon()</a></span>) when filling with the special   color <strong><code>IMG_COLOR_TILED</code></strong>.  </p>  <p class="para">   A tile is an image used to fill an area with a repeated pattern. <em class="emphasis">Any</em>   GD image can be used as a tile, and by setting the transparent color index of the tile   image with <span class="function"><a href="function.imagecolortransparent.php" class="function">imagecolortransparent()</a></span>, a tile allows certain parts   of the underlying area to shine through can be created.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    You need not take special action when you are finished with a tile, but if you    destroy the tile image, you must not use the <strong><code>IMG_COLOR_TILED</code></strong>    color until you have set a new tile image!   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="image"/>
		<param type="resource" name="tile"/>
	</params>
</keyword>
<keyword name="imagestring" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagestring</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws a <code class="parameter">string</code> at the given coordinates.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="font"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="string" name="str"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagestringup" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagestringup</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$font</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   )</div>  <p class="para rdfs-comment">   Draws a <code class="parameter">string</code> vertically at the given   coordinates.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="int" name="font"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="string" name="str"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="imagesx" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagesx</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   Returns the width of the given <code class="parameter">image</code> resource.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagesy" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagesy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   )</div>  <p class="para rdfs-comment">   Returns the height of the given <code class="parameter">image</code> resource.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagetruecolortopalette" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagetruecolortopalette</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$dither</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$ncolors</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagetruecolortopalette()</strong></span> converts a truecolor image   to a palette image. The code for this function was originally drawn from   the Independent JPEG Group library code, which is excellent. The code   has been modified to preserve as much alpha channel information as   possible in the resulting palette, in addition to preserving colors as   well as possible. This does not work as well as might be hoped. It is   usually best to simply produce a truecolor output image instead, which   guarantees the highest output quality.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="bool" name="ditherFlag"/>
		<param type="int" name="colorsWanted"/>
	</params>
</keyword>
<keyword name="imagettfbbox" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagettfbbox</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   This function calculates and returns the bounding box in pixels   for a TrueType text.  </p>]]></desc>
	<params>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="imagettftext" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imagettftext</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$size</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$angle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$x</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$y</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$color</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fontfile</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Writes the given <code class="parameter">text</code> into the image using TrueType   fonts.  </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="float" name="size"/>
		<param type="float" name="angle"/>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
		<param type="int" name="col"/>
		<param type="string" name="font_file"/>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="imagetypes" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imagetypes</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the image types supported by the current PHP installation.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="imagewbmp" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagewbmp</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagewbmp()</strong></span> outputs or save a <acronym title="Wireless Bitmap">WBMP</acronym>   version of the given <code class="parameter">image</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
		<param type="int" name="foreground"/>
	</params>
</keyword>
<keyword name="imagewbmp" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagewbmp</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagewbmp()</strong></span> outputs or save a <acronym title="Wireless Bitmap">WBMP</acronym>   version of the given <code class="parameter">image</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imagewbmp" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagewbmp</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imagewbmp()</strong></span> outputs or save a <acronym title="Wireless Bitmap">WBMP</acronym>   version of the given <code class="parameter">image</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="im"/>
	</params>
</keyword>
<keyword name="imagexbm" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagexbm</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>  ] )</div>  <p class="para rdfs-comment">   Outputs or save an <acronym title="X Bitmap">XBM</acronym> version of the given    <code class="parameter">image</code>.   </p>]]></desc>
	<params>
		<param type="int" name="im"/>
		<param type="string" name="filename"/>
		<param type="int" name="foreground"/>
	</params>
</keyword>
<keyword name="imagexbm" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imagexbm</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$image</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$foreground</code></span>  ] )</div>  <p class="para rdfs-comment">   Outputs or save an <acronym title="X Bitmap">XBM</acronym> version of the given    <code class="parameter">image</code>.   </p>]]></desc>
	<params>
		<param type="int" name="im"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="imap_alerts" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_alerts</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns all of the <acronym title="Internet Message Access Protocol">IMAP</acronym> alert messages generated since the last   <span class="function"><strong>imap_alerts()</strong></span> call, or the beginning of the page.   </p>  <p class="para">   When <span class="function"><strong>imap_alerts()</strong></span> is called, the alert stack is   subsequently cleared. The <acronym title="Internet Message Access Protocol">IMAP</acronym> specification requires that these messages   be passed to the user.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="imap_append" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$internal_date</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Appends a string <code class="parameter">message</code> to the specified <code class="parameter">mailbox</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="folder"/>
		<param type="string" name="message"/>
		<param type="string" name="options"/>
	</params>
</keyword>
<keyword name="imap_append" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$internal_date</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Appends a string <code class="parameter">message</code> to the specified <code class="parameter">mailbox</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="folder"/>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="imap_binary" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_binary</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Convert an 8bit string to a base64 string according to <a href="http://www.faqs.org/rfcs/rfc2045" class="link external">&raquo;&nbsp;RFC2045</a>, Section 6.8.  </p>]]></desc>
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="imap_body" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_body</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imap_body()</strong></span> returns the body of the message,   numbered <code class="parameter">msg_number</code> in the current   mailbox.  </p>  <p class="para">   <span class="function"><strong>imap_body()</strong></span> will only return a verbatim copy of the   message body. To extract single parts of a multipart MIME-encoded   message you have to use <span class="function"><a href="function.imap-fetchstructure.php" class="function">imap_fetchstructure()</a></span> to   analyze its structure and <span class="function"><a href="function.imap-fetchbody.php" class="function">imap_fetchbody()</a></span> to   extract a copy of a single body component.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_body" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_body</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>imap_body()</strong></span> returns the body of the message,   numbered <code class="parameter">msg_number</code> in the current   mailbox.  </p>  <p class="para">   <span class="function"><strong>imap_body()</strong></span> will only return a verbatim copy of the   message body. To extract single parts of a multipart MIME-encoded   message you have to use <span class="function"><a href="function.imap-fetchstructure.php" class="function">imap_fetchstructure()</a></span> to   analyze its structure and <span class="function"><a href="function.imap-fetchbody.php" class="function">imap_fetchbody()</a></span> to   extract a copy of a single body component.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_bodystruct" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_bodystruct</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$section</code></span>   )</div>  <p class="para rdfs-comment">   Read the structure of a specified body section of a specific message.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="section"/>
	</params>
</keyword>
<keyword name="imap_check" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_check</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   )</div>  <p class="para rdfs-comment">   Checks information about the current mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_clearflag_full" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_clearflag_full</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$flag</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function causes a store to delete the specified   <code class="parameter">flag</code> to the flags set for the   messages in the specified <code class="parameter">sequence</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="sequence"/>
		<param type="string" name="flag"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_clearflag_full" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_clearflag_full</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$flag</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function causes a store to delete the specified   <code class="parameter">flag</code> to the flags set for the   messages in the specified <code class="parameter">sequence</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="sequence"/>
		<param type="string" name="flag"/>
	</params>
</keyword>
<keyword name="imap_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Closes the imap stream.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Closes the imap stream.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_createmailbox" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_createmailbox</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   )</div>  <p class="para rdfs-comment">   Creates a new mailbox specified by <code class="parameter">mailbox</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_delete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_delete</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Marks messages listed in <code class="parameter">msg_number</code> for deletion.   Messages marked for deletion will stay in the mailbox until either   <span class="function"><a href="function.imap-expunge.php" class="function">imap_expunge()</a></span> is called or   <span class="function"><a href="function.imap-close.php" class="function">imap_close()</a></span> is called with the optional parameter   <strong><code>CL_EXPUNGE</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_delete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_delete</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Marks messages listed in <code class="parameter">msg_number</code> for deletion.   Messages marked for deletion will stay in the mailbox until either   <span class="function"><a href="function.imap-expunge.php" class="function">imap_expunge()</a></span> is called or   <span class="function"><a href="function.imap-close.php" class="function">imap_close()</a></span> is called with the optional parameter   <strong><code>CL_EXPUNGE</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_deletemailbox" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_deletemailbox</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   )</div>  <p class="para rdfs-comment">   Deletes the specified <code class="parameter">mailbox</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_errors" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_errors</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets all of the <acronym title="Internet Message Access Protocol">IMAP</acronym> errors (if any) that have occurred   during this page request or since the error stack was reset.  </p>  <p class="para">   When <span class="function"><strong>imap_errors()</strong></span> is called, the error stack is   subsequently cleared.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="imap_expunge" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_expunge</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   )</div>  <p class="para rdfs-comment">   Deletes all the messages marked for deletion by    <span class="function"><a href="function.imap-delete.php" class="function">imap_delete()</a></span>, <span class="function"><a href="function.imap-mail-move.php" class="function">imap_mail_move()</a></span>, or   <span class="function"><a href="function.imap-setflag-full.php" class="function">imap_setflag_full()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_fetch_overview" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_fetch_overview</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function fetches mail headers for the given   <code class="parameter">sequence</code> and returns an overview of their   contents.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_fetch_overview" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_fetch_overview</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function fetches mail headers for the given   <code class="parameter">sequence</code> and returns an overview of their   contents.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_fetchbody" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_fetchbody</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$section</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetch of a particular section of the body of the specified messages.    Body parts are not decoded by this function.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="section"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_fetchbody" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_fetchbody</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$section</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetch of a particular section of the body of the specified messages.    Body parts are not decoded by this function.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="section"/>
	</params>
</keyword>
<keyword name="imap_fetchheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_fetchheader</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function causes a fetch of the complete, unfiltered <a href="http://www.faqs.org/rfcs/rfc2822" class="link external">&raquo;&nbsp;RFC2822</a> format header of the specified   message.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_fetchheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_fetchheader</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   This function causes a fetch of the complete, unfiltered <a href="http://www.faqs.org/rfcs/rfc2822" class="link external">&raquo;&nbsp;RFC2822</a> format header of the specified   message.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_fetchstructure" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_fetchstructure</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches all the structured information for a given message.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_fetchstructure" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_fetchstructure</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches all the structured information for a given message.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_get_quota" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_get_quota</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$quota_root</code></span>   )</div>  <p class="para rdfs-comment">   Retrieve the quota level settings, and usage statics per mailbox.  </p>  <p class="para">   For a non-admin user version of this function,   please see the <span class="function"><a href="function.imap-get-quotaroot.php" class="function">imap_get_quotaroot()</a></span> function of PHP.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="qroot"/>
	</params>
</keyword>
<keyword name="imap_get_quotaroot" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_get_quotaroot</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$quota_root</code></span>   )</div>  <p class="para rdfs-comment">   Retrieve the quota settings per user. The limit value represents the total   amount of space allowed for this user&#039;s total mailbox usage.  The usage   value represents the user&#039;s current total mailbox capacity.    </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mbox"/>
	</params>
</keyword>
<keyword name="imap_getacl" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_getacl</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   )</div>  <p class="para rdfs-comment">   Gets the ACL for a given mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_getmailboxes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_getmailboxes</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ref</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   )</div>  <p class="para rdfs-comment">   Gets information on the mailboxes.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="ref"/>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="imap_getsubscribed" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_getsubscribed</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ref</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   )</div>  <p class="para rdfs-comment">   Gets information about the subscribed mailboxes.  </p>  <p class="para">   Identical to <span class="function"><a href="function.imap-getmailboxes.php" class="function">imap_getmailboxes()</a></span>, except that it only   returns mailboxes that the user is subscribed to.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="ref"/>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="imap_headerinfo" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_headerinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fromlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$subjectlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$defaulthost</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Gets information about the given message number by reading its headers.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="from_length"/>
		<param type="int" name="subject_length"/>
		<param type="string" name="default_host"/>
	</params>
</keyword>
<keyword name="imap_headerinfo" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_headerinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fromlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$subjectlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$defaulthost</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Gets information about the given message number by reading its headers.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="from_length"/>
		<param type="int" name="subject_length"/>
	</params>
</keyword>
<keyword name="imap_headerinfo" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_headerinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fromlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$subjectlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$defaulthost</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Gets information about the given message number by reading its headers.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="int" name="from_length"/>
	</params>
</keyword>
<keyword name="imap_headerinfo" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_headerinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fromlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$subjectlength</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$defaulthost</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Gets information about the given message number by reading its headers.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_last_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>imap_last_error</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the full text of the last <acronym title="Internet Message Access Protocol">IMAP</acronym> error message   that occurred on the current page. The error stack is untouched; calling    <span class="function"><strong>imap_last_error()</strong></span> subsequently, with no intervening   errors, will return the same error.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="imap_list" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ref</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   )</div>  <p class="para rdfs-comment">   Read the list of mailboxes.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="ref"/>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="imap_lsub" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_lsub</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ref</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   )</div>  <p class="para rdfs-comment">   Gets an array of all the mailboxes that you have subscribed.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="ref"/>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="imap_mail" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bcc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$rpath</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function allows sending of emails with correct handling of   Cc and Bcc receivers.   </p>  <p class="para">   The parameters <code class="parameter">to</code>, <code class="parameter">cc</code>   and <code class="parameter">bcc</code> are all strings and are all parsed   as <a href="http://www.faqs.org/rfcs/rfc822" class="link external">&raquo;&nbsp;RFC822</a> address lists.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
		<param type="string" name="cc"/>
		<param type="string" name="bcc"/>
		<param type="string" name="rpath"/>
	</params>
</keyword>
<keyword name="imap_mail" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bcc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$rpath</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function allows sending of emails with correct handling of   Cc and Bcc receivers.   </p>  <p class="para">   The parameters <code class="parameter">to</code>, <code class="parameter">cc</code>   and <code class="parameter">bcc</code> are all strings and are all parsed   as <a href="http://www.faqs.org/rfcs/rfc822" class="link external">&raquo;&nbsp;RFC822</a> address lists.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
		<param type="string" name="cc"/>
		<param type="string" name="bcc"/>
	</params>
</keyword>
<keyword name="imap_mail" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bcc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$rpath</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function allows sending of emails with correct handling of   Cc and Bcc receivers.   </p>  <p class="para">   The parameters <code class="parameter">to</code>, <code class="parameter">cc</code>   and <code class="parameter">bcc</code> are all strings and are all parsed   as <a href="http://www.faqs.org/rfcs/rfc822" class="link external">&raquo;&nbsp;RFC822</a> address lists.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
		<param type="string" name="cc"/>
	</params>
</keyword>
<keyword name="imap_mail" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bcc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$rpath</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function allows sending of emails with correct handling of   Cc and Bcc receivers.   </p>  <p class="para">   The parameters <code class="parameter">to</code>, <code class="parameter">cc</code>   and <code class="parameter">bcc</code> are all strings and are all parsed   as <a href="http://www.faqs.org/rfcs/rfc822" class="link external">&raquo;&nbsp;RFC822</a> address lists.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
	</params>
</keyword>
<keyword name="imap_mail" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bcc</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$rpath</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function allows sending of emails with correct handling of   Cc and Bcc receivers.   </p>  <p class="para">   The parameters <code class="parameter">to</code>, <code class="parameter">cc</code>   and <code class="parameter">bcc</code> are all strings and are all parsed   as <a href="http://www.faqs.org/rfcs/rfc822" class="link external">&raquo;&nbsp;RFC822</a> address lists.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="imap_mail_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail_copy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$msglist</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Copies mail messages specified by <code class="parameter">msglist</code>   to specified mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="mailbox"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_mail_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail_copy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$msglist</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Copies mail messages specified by <code class="parameter">msglist</code>   to specified mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_mail_move" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail_move</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$msglist</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Moves mail messages specified by <code class="parameter">msglist</code> to the   specified <code class="parameter">mailbox</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="mailbox"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_mail_move" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_mail_move</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$msglist</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Moves mail messages specified by <code class="parameter">msglist</code> to the   specified <code class="parameter">mailbox</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_mailboxmsginfo" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_mailboxmsginfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   )</div>  <p class="para rdfs-comment">   Checks the current mailbox status on the server. It is similar to   <span class="function"><a href="function.imap-status.php" class="function">imap_status()</a></span>, but will additionally sum up the size of   all messages in the mailbox, which will take some additional time to    execute.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_mime_header_decode" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_mime_header_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text</code></span>   )</div>  <p class="para rdfs-comment">   Decodes MIME message header extensions that are non ASCII text (see <a href="http://www.faqs.org/rfcs/rfc2047" class="link external">&raquo;&nbsp;RFC2047</a>).  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="imap_num_msg" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imap_num_msg</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of messages in the current mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_num_recent" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imap_num_recent</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of recent messages in the current mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imap_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Opens an <acronym title="Internet Message Access Protocol">IMAP</acronym> stream to a <code class="parameter">mailbox</code>.  </p>  <p class="para">   This function can also be used to open streams to <acronym title="Post Office Protocol version 3">POP3</acronym> and   <acronym title="Network News Transfer Protocol">NNTP</acronym> servers, but some functions and features are only   available on <acronym title="Internet Message Access Protocol">IMAP</acronym> servers.  </p>]]></desc>
	<params>
		<param type="string" name="mailbox"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="int" name="options"/>
		<param type="int" name="n_retries"/>
	</params>
</keyword>
<keyword name="imap_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imap_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Opens an <acronym title="Internet Message Access Protocol">IMAP</acronym> stream to a <code class="parameter">mailbox</code>.  </p>  <p class="para">   This function can also be used to open streams to <acronym title="Post Office Protocol version 3">POP3</acronym> and   <acronym title="Network News Transfer Protocol">NNTP</acronym> servers, but some functions and features are only   available on <acronym title="Internet Message Access Protocol">IMAP</acronym> servers.  </p>]]></desc>
	<params>
		<param type="string" name="mailbox"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>imap_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Opens an <acronym title="Internet Message Access Protocol">IMAP</acronym> stream to a <code class="parameter">mailbox</code>.  </p>  <p class="para">   This function can also be used to open streams to <acronym title="Post Office Protocol version 3">POP3</acronym> and   <acronym title="Network News Transfer Protocol">NNTP</acronym> servers, but some functions and features are only   available on <acronym title="Internet Message Access Protocol">IMAP</acronym> servers.  </p>]]></desc>
	<params>
		<param type="string" name="mailbox"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="imap_renamemailbox" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_renamemailbox</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$old_mbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_mbox</code></span>   )</div>  <p class="para rdfs-comment">   This function renames on old mailbox to new mailbox (see   <span class="function"><a href="function.imap-open.php" class="function">imap_open()</a></span> for the format of   <code class="parameter">mbox</code> names).  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="old_name"/>
		<param type="string" name="new_name"/>
	</params>
</keyword>
<keyword name="imap_reopen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_reopen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Reopens the specified stream to a new <code class="parameter">mailbox</code> on an   <acronym title="Internet Message Access Protocol">IMAP</acronym> or <acronym title="Network News Transfer Protocol">NNTP</acronym> server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
		<param type="int" name="options"/>
		<param type="int" name="n_retries"/>
	</params>
</keyword>
<keyword name="imap_reopen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_reopen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Reopens the specified stream to a new <code class="parameter">mailbox</code> on an   <acronym title="Internet Message Access Protocol">IMAP</acronym> or <acronym title="Network News Transfer Protocol">NNTP</acronym> server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_reopen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_reopen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$n_retries</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Reopens the specified stream to a new <code class="parameter">mailbox</code> on an   <acronym title="Internet Message Access Protocol">IMAP</acronym> or <acronym title="Network News Transfer Protocol">NNTP</acronym> server.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_savebody" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_savebody</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$part_number</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Saves a part or the whole body of the specified message.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string|resource" name="file"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="section"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_savebody" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_savebody</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$part_number</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Saves a part or the whole body of the specified message.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string|resource" name="file"/>
		<param type="int" name="msg_no"/>
		<param type="string" name="section"/>
	</params>
</keyword>
<keyword name="imap_savebody" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_savebody</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$file</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$part_number</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Saves a part or the whole body of the specified message.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string|resource" name="file"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_scan" type="function" returnType="array">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.imap-listscan.php" class="function">imap_listscan()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="ref"/>
		<param type="string" name="pattern"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="imap_set_quota" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_set_quota</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$quota_root</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$quota_limit</code></span>   )</div>  <p class="para rdfs-comment">   Sets an upper limit quota on a per mailbox basis.   </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="qroot"/>
		<param type="int" name="mailbox_size"/>
	</params>
</keyword>
<keyword name="imap_setacl" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_setacl</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$rights</code></span>   )</div>  <p class="para rdfs-comment">   Sets the ACL for a giving mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
		<param type="string" name="id"/>
		<param type="string" name="rights"/>
	</params>
</keyword>
<keyword name="imap_setflag_full" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_setflag_full</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$flag</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = NIL</span></span>  ] )</div>  <p class="para rdfs-comment">   Causes a store to add the specified <code class="parameter">flag</code> to the   flags set for the messages in the specified    <code class="parameter">sequence</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="sequence"/>
		<param type="string" name="flag"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_setflag_full" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_setflag_full</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sequence</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$flag</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = NIL</span></span>  ] )</div>  <p class="para rdfs-comment">   Causes a store to add the specified <code class="parameter">flag</code> to the   flags set for the messages in the specified    <code class="parameter">sequence</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="sequence"/>
		<param type="string" name="flag"/>
	</params>
</keyword>
<keyword name="imap_status" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>imap_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code></span>   )</div>  <p class="para rdfs-comment">   Gets status information about the given <code class="parameter">mailbox</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_subscribe" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_subscribe</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mailbox</code></span>   )</div>  <p class="para rdfs-comment">   Subscribe to a new mailbox.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="string" name="mailbox"/>
	</params>
</keyword>
<keyword name="imap_thread" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_thread</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = SE_FREE</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets a tree of a threaded message.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="imap_thread" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>imap_thread</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = SE_FREE</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets a tree of a threaded message.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
	</params>
</keyword>
<keyword name="imap_timeout" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>imap_timeout</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout_type</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets or fetches the imap timeout.  </p>]]></desc>
	<params>
		<param type="int" name="timeout_type"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="imap_timeout" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>imap_timeout</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout_type</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets or fetches the imap timeout.  </p>]]></desc>
	<params>
		<param type="int" name="timeout_type"/>
	</params>
</keyword>
<keyword name="imap_uid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>imap_uid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the UID for the given message sequence   number. An UID is a unique identifier that will not change over   time while a message sequence number may change whenever the   content of the mailbox changes.  </p>  <p class="para">   This function is the inverse of <span class="function"><a href="function.imap-msgno.php" class="function">imap_msgno()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="imap_undelete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>imap_undelete</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$imap_stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msg_number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Removes the deletion flag for a specified message, which is set by   <span class="function"><a href="function.imap-delete.php" class="function">imap_delete()</a></span> or <span class="function"><a href="function.imap-mail-move.php" class="function">imap_mail_move()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_id"/>
		<param type="int" name="msg_no"/>
	</params>
</keyword>
<keyword name="implode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>implode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$glue</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pieces</code></span>  ] )</div>  <p class="para rdfs-comment">  Join array elements with a string. </desc>
	<params>
		<param type="string" name="glue"/>
		<param type="string" name="pieces"/>
	</params>
</keyword>
<keyword name="import_request_variables" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>import_request_variables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>  ] )</div>  <p class="para rdfs-comment">   Imports GET/POST/Cookie variables into the global scope. It is useful if   you disabled <a href="ini.core.php#ini.register-globals" class="link">register_globals</a>,   but would like to see some variables in the global scope.  </p>  <p class="para">   If you&#039;re interested in importing other variables into the global scope,   such as <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER</a></var></var>, consider using <span class="function"><a href="function.extract.php" class="function">extract()</a></span>.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0 and <em class="emphasis">REMOVED</em> as of PHP 5.4.0.</p></div>]]></desc>
	<params>
		<param type="string" name="types"/>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="import_request_variables" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>import_request_variables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>  ] )</div>  <p class="para rdfs-comment">   Imports GET/POST/Cookie variables into the global scope. It is useful if   you disabled <a href="ini.core.php#ini.register-globals" class="link">register_globals</a>,   but would like to see some variables in the global scope.  </p>  <p class="para">   If you&#039;re interested in importing other variables into the global scope,   such as <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER</a></var></var>, consider using <span class="function"><a href="function.extract.php" class="function">extract()</a></span>.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0 and <em class="emphasis">REMOVED</em> as of PHP 5.4.0.</p></div>]]></desc>
	<params>
		<param type="string" name="types"/>
	</params>
</keyword>
<keyword name="inet_ntop" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>inet_ntop</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$in_addr</code></span>   )</div>  <p class="simpara">   This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP   was built with IPv6 support enabled) into an address family appropriate   string representation.    </p>]]></desc>
	<params>
		<param type="string" name="in_addr"/>
	</params>
</keyword>
<keyword name="inet_pton" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>inet_pton</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>   )</div>  <p class="para rdfs-comment">   This function converts a human readable IPv4 or IPv6 address (if PHP   was built with IPv6 support enabled) into an address family appropriate   32bit or 128bit binary structure.  </p>]]></desc>
	<params>
		<param type="string" name="ip_address"/>
	</params>
</keyword>
<keyword name="InfiniteIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
	</params>
</keyword>
<keyword name="InfiniteIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="interface_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>interface_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$interface_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Checks if the given interface has been defined.  </p>]]></desc>
	<params>
		<param type="string" name="classname"/>
		<param type="bool" name="autoload"/>
	</params>
</keyword>
<keyword name="interface_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>interface_exists</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$interface_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$autoload</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Checks if the given interface has been defined.  </p>]]></desc>
	<params>
		<param type="string" name="classname"/>
	</params>
</keyword>
<keyword name="is_array" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>is_array</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>    )</div>  <p class="para rdfs-comment">   Finds whether the given variable is an array.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_binary" type="function" returnType="bool">
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_bool" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_bool</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the given variable is a boolean.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_buffer" type="function" returnType="bool">
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_double" type="function" returnType="bool">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.is-float.php" class="function">is_float()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_float" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>is_float</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>    )</div>  <p class="para rdfs-comment">   Finds whether the type of the given variable is float.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    To test if a variable is a number or a numeric string (such as form    input, which is always a string), you must use    <span class="function"><a href="function.is-numeric.php" class="function">is_numeric()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_infinite" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>is_infinite</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$val</code></span>    )</div>  <p class="para rdfs-comment">   Returns <strong><code>TRUE</code></strong> if <code class="parameter">val</code> is infinite (positive or    negative), like the result of <em>log(0)</em> or any value too    big to fit into a float on this platform.  </p>]]></desc>
	<params>
		<param type="float" name="val"/>
	</params>
</keyword>
<keyword name="is_int" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>is_int</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>    )</div>  <p class="para rdfs-comment">   Finds whether the type of the given variable is integer.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    To test if a variable is a number or a numeric string (such as form    input, which is always a string), you must use    <span class="function"><a href="function.is-numeric.php" class="function">is_numeric()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_long" type="function" returnType="bool">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.is-int.php" class="function">is_int()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_nan" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_nan</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$val</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether <code class="parameter">val</code> is &#039;not a number&#039;,    like the result of <em>acos(1.01)</em>.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_null" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_null</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the given variable is <strong><code>NULL</code></strong>.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_numeric" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_numeric</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the given variable is numeric. Numeric strings consist of optional   sign, any number of digits, optional decimal part and optional exponential part.   Thus <em>+0123.45e6</em> is a valid numeric value. Hexadecimal (e.g.   <em>0xf4c3b00c</em>), Binary (e.g. <em>0b10100111001</em>),   Octal (e.g. <em>0777</em>) notation is allowed too but only without   sign, decimal and exponential part.  </p>]]></desc>
	<params>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="is_object" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>is_object</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>    )</div>  <p class="para rdfs-comment">   Finds whether the given variable is an object.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_readable" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_readable</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Tells whether a file exists and is readable.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="is_resource" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_resource</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the given variable is a resource.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_scalar" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_scalar</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the given variable is a scalar.  </p>  <p class="para">   Scalar variables are those containing an <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>,    <span class="type"><a href="language.types.float.php" class="type float">float</a></span>, <span class="type"><a href="language.types.string.php" class="type string">string</a></span> or <span class="type"><a href="language.types.boolean.php" class="type boolean">boolean</a></span>.     Types <span class="type"><a href="language.types.array.php" class="type array">array</a></span>, <span class="type"><a href="language.types.object.php" class="type object">object</a></span> and <span class="type"><a href="language.types.resource.php" class="type resource">resource</a></span>    are not scalar.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>is_scalar()</strong></span> does not consider <span class="type"><a href="language.types.resource.php" class="type resource">resource</a></span>    type values to be scalar as resources are abstract datatypes     which are currently based on integers. This implementation detail should     not be relied upon, as it may change.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>is_scalar()</strong></span> does not consider NULL to be scalar.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="is_string" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_string</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="para rdfs-comment">   Finds whether the type given variable is string.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_subclass_of" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_subclass_of</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$allow_string</code><span class="initializer"> = <strong><code>TRUE</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Checks if the given <code class="parameter">object</code> has the class   <code class="parameter">class_name</code> as one of its parents.  </p>]]></desc>
	<params>
		<param type="object" name="object"/>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="is_unicode" type="function" returnType="bool">
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="is_uploaded_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_uploaded_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Returns <strong><code>TRUE</code></strong> if the file named by <code class="parameter">filename</code> was   uploaded via HTTP POST. This is useful to help ensure that a   malicious user hasn&#039;t tried to trick the script into working on   files upon which it should not be working--for instance,   <var class="filename">/etc/passwd</var>.  </p>  <p class="para">   This sort of check is especially important if there is any chance   that anything done with uploaded files could reveal their   contents to the user, or even to other users on the same   system.  </p>  <p class="para">   For proper working, the function <span class="function"><strong>is_uploaded_file()</strong></span> needs   an argument like <var class="varname"><var class="varname"><a href="reserved.variables.files.php" class="classname">$_FILES['userfile']['tmp_name']</a></var></var>, - the name of the uploaded   file on the client&#039;s machine <var class="varname"><var class="varname"><a href="reserved.variables.files.php" class="classname">$_FILES['userfile']['name']</a></var></var> does not work.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="is_writable" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>is_writable</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Returns <strong><code>TRUE</code></strong> if the <code class="parameter">filename</code> exists and is   writable.  The filename argument may be a directory name allowing you   to check if a directory is writable.  </p>  <p class="para">   Keep in mind that PHP may be accessing the file as the user id   that the web server runs as (often &#039;nobody&#039;). Safe mode   limitations are not taken into account.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="iterator_apply" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iterator_apply</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.traversable.php" class="type Traversable">Traversable</a></span> <code class="parameter">$iterator</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>  ] )</div>  <p class="para rdfs-comment">   Calls a function for every element in an iterator.  </p>]]></desc>
	<params>
		<param type="Traversable" name="it"/>
		<param type="mixed" name="function"/>
		<param type="mixed" name="params"/>
	</params>
</keyword>
<keyword name="iterator_apply" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iterator_apply</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.traversable.php" class="type Traversable">Traversable</a></span> <code class="parameter">$iterator</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>  ] )</div>  <p class="para rdfs-comment">   Calls a function for every element in an iterator.  </p>]]></desc>
	<params>
		<param type="Traversable" name="it"/>
		<param type="mixed" name="function"/>
	</params>
</keyword>
<keyword name="iterator_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>iterator_count</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.traversable.php" class="type Traversable">Traversable</a></span> <code class="parameter">$iterator</code></span>   )</div>  <p class="para rdfs-comment">   Count the elements in an iterator.  </p>]]></desc>
	<params>
		<param type="Traversable" name="it"/>
	</params>
</keyword>
<keyword name="iterator_to_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>iterator_to_array</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.traversable.php" class="type Traversable">Traversable</a></span> <code class="parameter">$iterator</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_keys</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Copy the elements of an iterator into an array.  </p>]]></desc>
	<params>
		<param type="Traversable" name="it"/>
		<param type="bool" name="use_keys"/>
	</params>
</keyword>
<keyword name="iterator_to_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>iterator_to_array</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.traversable.php" class="type Traversable">Traversable</a></span> <code class="parameter">$iterator</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_keys</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Copy the elements of an iterator into an array.  </p>]]></desc>
	<params>
		<param type="Traversable" name="it"/>
	</params>
</keyword>
<keyword name="IteratorIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Traversable" name="it"/>
	</params>
</keyword>
<keyword name="jddayofweek" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>jddayofweek</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$julianday</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = CAL_DOW_DAYNO</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the day of the week.  Can return a string or an integer   depending on the mode.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="jddayofweek" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>jddayofweek</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$julianday</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = CAL_DOW_DAYNO</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the day of the week.  Can return a string or an integer   depending on the mode.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
	</params>
</keyword>
<keyword name="jdmonthname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdmonthname</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$julianday</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string containing a month name.   <code class="parameter">mode</code> tells this function which calendar to   convert the Julian Day Count to, and what type of month names are   to be returned.   <table class="doctable table">    <caption><strong>Calendar modes</strong></caption>         <thead>      <tr>       <th>Mode</th>       <th>Meaning</th>       <th>Values</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>0</td>       <td>Gregorian - abbreviated</td>       <td>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</td>      </tr>      <tr>       <td>1</td>       <td>Gregorian</td>       <td>January, February, March, April, May, June, July, August, September, October, November, December</td>      </tr>      <tr>       <td>2</td>       <td>Julian - abbreviated</td>       <td>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</td>      </tr>      <tr>       <td>3</td>       <td>Julian</td>       <td>January, February, March, April, May, June, July, August, September, October, November, December</td>      </tr>      <tr>       <td>4</td>       <td>Jewish</td>       <td>Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul</td>      </tr>      <tr>       <td>5</td>       <td>French Republican</td>       <td>Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra</td>      </tr>     </tbody>       </table>  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="jdtofrench" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtofrench</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$juliandaycount</code></span>   )</div>  <p class="para rdfs-comment">   Converts a Julian Day Count to the French Republican Calendar.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
	</params>
</keyword>
<keyword name="jdtogregorian" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtogregorian</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$julianday</code></span>   )</div>  <p class="para rdfs-comment">   Converts Julian Day Count to a string containing the Gregorian   date in the format of &quot;month/day/year&quot;.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
	</params>
</keyword>
<keyword name="jdtojewish" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtojewish</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$juliandaycount</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$hebrew</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fl</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Converts a Julian Day Count to the Jewish Calendar.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
		<param type="bool" name="hebrew"/>
		<param type="int" name="fl"/>
	</params>
</keyword>
<keyword name="jdtojewish" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtojewish</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$juliandaycount</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$hebrew</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fl</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Converts a Julian Day Count to the Jewish Calendar.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
		<param type="bool" name="hebrew"/>
	</params>
</keyword>
<keyword name="jdtojewish" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtojewish</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$juliandaycount</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$hebrew</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$fl</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Converts a Julian Day Count to the Jewish Calendar.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
	</params>
</keyword>
<keyword name="jdtojulian" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>jdtojulian</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$julianday</code></span>   )</div>  <p class="para rdfs-comment">   Converts Julian Day Count to a string containing the Julian   Calendar Date in the format of &quot;month/day/year&quot;.  </p>]]></desc>
	<params>
		<param type="int" name="juliandaycount"/>
	</params>
</keyword>
<keyword name="jdtounix" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>jdtounix</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$jday</code></span>   )</div>  <p class="para rdfs-comment">   This function will return a Unix timestamp corresponding to the   Julian Day given in <code class="parameter">jday</code> or <strong><code>FALSE</code></strong> if   <code class="parameter">jday</code> is not inside the Unix epoch   (Gregorian years between 1970 and 2037 or 2440588 &lt;=   <code class="parameter">jday</code> &lt;= 2465342 ). The time returned is   localtime (and not GMT).  </p>]]></desc>
	<params>
		<param type="int" name="jday"/>
	</params>
</keyword>
<keyword name="jewishtojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>jewishtojd</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   Although this function can handle dates all the way back to the year 1   (3761 B.C.), such use may not be meaningful.  The Jewish calendar has   been in use for several thousand years, but in the early days there was   no formula to determine the start of a month. A new month was started   when the new moon was first observed.  </p>]]></desc>
	<params>
		<param type="int" name="month"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="join" type="function" returnType="string">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.implode.php" class="function">implode()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="array" name="pieces"/>
	</params>
</keyword>
<keyword name="join" type="function" returnType="string">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.implode.php" class="function">implode()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="glue"/>
		<param type="array" name="pieces"/>
	</params>
</keyword>
<keyword name="json_decode" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>json_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$json</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$assoc</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Takes a JSON encoded string and converts it into a PHP variable.  </p>]]></desc>
	<params>
		<param type="string" name="json"/>
		<param type="bool" name="assoc"/>
		<param type="int" name="depth"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="json_decode" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>json_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$json</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$assoc</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Takes a JSON encoded string and converts it into a PHP variable.  </p>]]></desc>
	<params>
		<param type="string" name="json"/>
		<param type="bool" name="assoc"/>
		<param type="int" name="depth"/>
	</params>
</keyword>
<keyword name="json_decode" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>json_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$json</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$assoc</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Takes a JSON encoded string and converts it into a PHP variable.  </p>]]></desc>
	<params>
		<param type="string" name="json"/>
		<param type="bool" name="assoc"/>
	</params>
</keyword>
<keyword name="json_decode" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>json_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$json</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$assoc</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Takes a JSON encoded string and converts it into a PHP variable.  </p>]]></desc>
	<params>
		<param type="string" name="json"/>
	</params>
</keyword>
<keyword name="json_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>json_encode</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string containing the JSON representation of    <code class="parameter">value</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="value"/>
		<param type="int" name="options"/>
		<param type="int" name="depth"/>
	</params>
</keyword>
<keyword name="json_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>json_encode</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string containing the JSON representation of    <code class="parameter">value</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="value"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="json_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>json_encode</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$depth</code><span class="initializer"> = 512</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string containing the JSON representation of    <code class="parameter">value</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="juliantojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>juliantojd</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code></span>   )</div>  <p class="para rdfs-comment">   Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.  </p>  <p class="para">   Although this function can handle dates all the way back to 4713   B.C., such use may not be meaningful. The calendar was created in   46 B.C., but the details did not stabilize until at least 8 A.D.,   and perhaps as late at the 4th century. Also, the beginning of a   year varied from one culture to another - not all accepted   January as the first month.  </p>  <div class="caution"><strong class="caution">Caution</strong>   <p class="para">    Remember, the current calendar system being used worldwide is the    Gregorian calendar.  <span class="function"><a href="function.gregoriantojd.php" class="function">gregoriantojd()</a></span> can be used to    convert such dates to their Julian Day count.   </p>  </div>]]></desc>
	<params>
		<param type="int" name="month"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="key" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>key</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>key()</strong></span> returns the index element of the current array   position.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
	</params>
</keyword>
<keyword name="krsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>krsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   Sorts an array by key in reverse order, maintaining key to data   correlations. This is useful mainly for associative arrays.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="krsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>krsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   Sorts an array by key in reverse order, maintaining key to data   correlations. This is useful mainly for associative arrays.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="ksort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ksort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   Sorts an array by key, maintaining key to data correlations. This is   useful mainly for associative arrays.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="ksort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ksort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   Sorts an array by key, maintaining key to data correlations. This is   useful mainly for associative arrays.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="lcg_value" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>lcg_value</strong></span>     ( <span class="methodparam">void</span>    )</div>  <p class="para rdfs-comment">   <span class="function"><strong>lcg_value()</strong></span> returns a pseudo random number in   the range of (0, 1).  The function combines two CGs with periods   of 2^31 - 85 and 2^31 - 249. The period of this function is equal   to the product of both primes.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="lchgrp" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>lchgrp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$group</code></span>   )</div>  <p class="para rdfs-comment">   Attempts to change the group of the symlink <code class="parameter">filename</code>   to <code class="parameter">group</code>.  </p>  <p class="para">   Only the superuser may change the group of a symlink arbitrarily; other   users may change the group of a symlink to any group of which that user is   a member.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="mixed" name="group"/>
	</params>
</keyword>
<keyword name="ldap_add" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_add</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$entry</code></span>   )</div>  <p class="para rdfs-comment">   Add entries in the LDAP directory.   </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="array" name="entry"/>
	</params>
</keyword>
<keyword name="ldap_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bind_rdn</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bind_password</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds to the LDAP directory with specified RDN and password.   </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="ldap_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bind_rdn</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$bind_password</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds to the LDAP directory with specified RDN and password.   </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="ldap_compare" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>ldap_compare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$attribute</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Compare <code class="parameter">value</code> of <code class="parameter">attribute</code>   with value of same attribute in an LDAP directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="string" name="attr"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="ldap_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 389</span></span>  ]] )</div>  <p class="para rdfs-comment">   Establishes a connection to a LDAP server on a specified   <code class="parameter">hostname</code> and <code class="parameter">port</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="ldap_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 389</span></span>  ]] )</div>  <p class="para rdfs-comment">   Establishes a connection to a LDAP server on a specified   <code class="parameter">hostname</code> and <code class="parameter">port</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="ldap_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 389</span></span>  ]] )</div>  <p class="para rdfs-comment">   Establishes a connection to a LDAP server on a specified   <code class="parameter">hostname</code> and <code class="parameter">port</code>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="ldap_count_entries" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ldap_count_entries</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of entries stored in the result of previous search   operations.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ldap_delete" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_delete</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   )</div>  <p class="para rdfs-comment">   Deletes a particular entry in LDAP directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
	</params>
</keyword>
<keyword name="ldap_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ldap_errno</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns the standardized error number returned by the last LDAP command.   This number can be converted into a textual error message using   <span class="function"><a href="function.ldap-err2str.php" class="function">ldap_err2str()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="ldap_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ldap_error</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns the string error message explaining the error generated by the   last LDAP command for the given <code class="parameter">link_identifier</code>.   While LDAP errno numbers are standardized, different libraries return   different or even localized textual error messages. Never check for a   specific error message text, but always use an error number to check.  </p>  <p class="para">   Unless you lower your warning level in your <var class="filename">php.ini</var> sufficiently or   prefix your LDAP commands with <em>@</em> (at) characters to   suppress warning output, the errors generated will also show up in your   HTML output.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="ldap_explode_dn" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ldap_explode_dn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$with_attrib</code></span>   )</div>  <p class="para rdfs-comment">   Splits the DN returned by <span class="function"><a href="function.ldap-get-dn.php" class="function">ldap_get_dn()</a></span> and breaks it   up into its component parts. Each part is known as Relative Distinguished   Name, or RDN.  </p>]]></desc>
	<params>
		<param type="string" name="dn"/>
		<param type="int" name="with_attrib"/>
	</params>
</keyword>
<keyword name="ldap_first_attribute" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ldap_first_attribute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Gets the first attribute in the given entry. Remaining attributes are   retrieved by calling <span class="function"><a href="function.ldap-next-attribute.php" class="function">ldap_next_attribute()</a></span> successively.  </p>  <p class="para">   Similar to reading entries, attributes are also read one by one from a   particular entry.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
		<param type="int" name="ber"/>
	</params>
</keyword>
<keyword name="ldap_first_entry" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_first_entry</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns the entry identifier for first entry in the result. This entry   identifier is then supplied to <span class="function"><a href="function.ldap-next-entry.php" class="function">ldap_next_entry()</a></span>   routine to get successive entries from the result.  </p>  <p class="para">   Entries in the LDAP result are read sequentially using the   <span class="function"><strong>ldap_first_entry()</strong></span> and   <span class="function"><a href="function.ldap-next-entry.php" class="function">ldap_next_entry()</a></span> functions.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ldap_first_reference" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_first_reference</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ldap_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Frees up the memory allocated internally to store the result. All result   memory will be automatically freed when the script terminates.  </p>  <p class="para">   Typically all the memory allocated for the LDAP result gets freed at the   end of the script. In case the script is making successive searches which   return large result sets, <span class="function"><strong>ldap_free_result()</strong></span> could be   called to keep the runtime memory usage by the script low.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ldap_get_attributes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ldap_get_attributes</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Reads attributes and values from an entry in the search result.   </p>  <p class="para">   Having located a specific entry in the directory, you can find out what   information is held for that entry by using this call. You would use this   call for an application which &quot;browses&quot; directory entries and/or where you   do not know the structure of the directory entries. In many applications   you will be searching for a specific attribute such as an email address or   a surname, and won&#039;t care what other data is held.   <div class="informalexample">    <div class="example-contents"><div class="cdata"><pre>return_value[&quot;count&quot;] = number of attributes in the entryreturn_value[0] = first attributereturn_value[n] = nth attributereturn_value[&quot;attribute&quot;][&quot;count&quot;] = number of values for attributereturn_value[&quot;attribute&quot;][0] = first value of the attributereturn_value[&quot;attribute&quot;][i] = (i+1)th value of the attribute</pre></div>    </div>   </div>  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
	</params>
</keyword>
<keyword name="ldap_get_dn" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ldap_get_dn</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Finds out the DN of an entry in the result.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
	</params>
</keyword>
<keyword name="ldap_get_entries" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ldap_get_entries</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Reads multiple entries from the given result, and then reading the   attributes and multiple values.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="ldap_get_option" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_get_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$retval</code></span>   )</div>  <p class="para rdfs-comment">   Sets <code class="parameter">retval</code> to the value of the specified option.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="int" name="option"/>
		<param type="mixed" name="retval"/>
	</params>
</keyword>
<keyword name="ldap_get_values_len" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>ldap_get_values_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$attribute</code></span>   )</div>  <p class="para rdfs-comment">   Reads all the values of the attribute in the entry in the result.  </p>  <p class="para">   This function is used exactly like <span class="function"><a href="function.ldap-get-values.php" class="function">ldap_get_values()</a></span>   except that it handles binary data and not string data.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
		<param type="string" name="attribute"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
		<param type="int" name="deref"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
	</params>
</keyword>
<keyword name="ldap_list" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_list</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_ONELEVEL</code></strong>.  </p>  <p class="para">   <strong><code>LDAP_SCOPE_ONELEVEL</code></strong> means that the search should only   return information that is at the level immediately below the   <code class="parameter">base_dn</code> given in the call.   (Equivalent to typing &quot;<strong class="command">ls</strong>&quot; and getting a list of files and folders in the   current working directory.)  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
	</params>
</keyword>
<keyword name="ldap_mod_add" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_mod_add</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$entry</code></span>   )</div>  <p class="para rdfs-comment">   Adds one or more attributes to the specified <code class="parameter">dn</code>.   It performs the modification at the attribute level as opposed to the   object level. Object-level additions are done by the   <span class="function"><a href="function.ldap-add.php" class="function">ldap_add()</a></span> function.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="array" name="entry"/>
	</params>
</keyword>
<keyword name="ldap_mod_del" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_mod_del</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$entry</code></span>   )</div>  <p class="para rdfs-comment">   Removes one or more attributes from the specified <code class="parameter">dn</code>.   It performs the modification at the attribute level as opposed to the object   level. Object-level deletions are done by the    <span class="function"><a href="function.ldap-delete.php" class="function">ldap_delete()</a></span> function.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="array" name="entry"/>
	</params>
</keyword>
<keyword name="ldap_mod_replace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_mod_replace</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$entry</code></span>   )</div>  <p class="para rdfs-comment">   Replaces one or more attributes from the specified <code class="parameter">dn</code>.   It performs the modification at the attribute level as opposed to the object   level. Object-level modifications are done by the    <span class="function"><a href="function.ldap-modify.php" class="function">ldap_modify()</a></span> function.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="array" name="entry"/>
	</params>
</keyword>
<keyword name="ldap_next_attribute" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ldap_next_attribute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves the attributes in an entry. The first call to   <span class="function"><strong>ldap_next_attribute()</strong></span> is made with the   <code class="parameter">result_entry_identifier</code> returned from   <span class="function"><a href="function.ldap-first-attribute.php" class="function">ldap_first_attribute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
		<param type="resource" name="ber"/>
	</params>
</keyword>
<keyword name="ldap_next_entry" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_next_entry</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_entry_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Retrieve the entries stored in the result. Successive calls to the   <span class="function"><strong>ldap_next_entry()</strong></span> return entries one by one till there   are no more entries. The first call to <span class="function"><strong>ldap_next_entry()</strong></span>   is made after the call to <span class="function"><a href="function.ldap-first-entry.php" class="function">ldap_first_entry()</a></span> with the   <code class="parameter">result_entry_identifier</code> as returned from the   <span class="function"><a href="function.ldap-first-entry.php" class="function">ldap_first_entry()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result_entry"/>
	</params>
</keyword>
<keyword name="ldap_next_reference" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_next_reference</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$entry</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="reference_entry"/>
	</params>
</keyword>
<keyword name="ldap_parse_reference" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_parse_reference</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$entry</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$referrals</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="reference_entry"/>
		<param type="array" name="referrals"/>
	</params>
</keyword>
<keyword name="ldap_parse_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_parse_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errcode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$matcheddn</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errmsg</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$referrals</code></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
		<param type="int" name="errcode"/>
		<param type="string" name="matcheddn"/>
		<param type="string" name="errmsg"/>
		<param type="array" name="referrals"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
		<param type="int" name="deref"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
	</params>
</keyword>
<keyword name="ldap_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified <code class="parameter">filter</code> on the   directory with the scope <strong><code>LDAP_SCOPE_BASE</code></strong>. So it is   equivalent to reading an entry from the directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
	</params>
</keyword>
<keyword name="ldap_rename" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_rename</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$newrdn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$newparent</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$deleteoldrdn</code></span>   )</div>  <p class="para rdfs-comment">   The entry specified by <code class="parameter">dn</code> is renamed/moved.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="dn"/>
		<param type="string" name="newrdn"/>
		<param type="string" name="newparent"/>
		<param type="bool" name="deleteoldrdn"/>
	</params>
</keyword>
<keyword name="ldap_sasl_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_sasl_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$binddn</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_mech</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_realm</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_authc_id</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_authz_id</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$props</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]]]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="binddn"/>
		<param type="string" name="password"/>
		<param type="string" name="sasl_mech"/>
		<param type="string" name="sasl_realm"/>
		<param type="string" name="sasl_authz_id"/>
		<param type="string" name="props"/>
	</params>
</keyword>
<keyword name="ldap_sasl_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_sasl_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$binddn</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_mech</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_realm</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_authc_id</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$sasl_authz_id</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$props</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]]]]]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
		<param type="int" name="deref"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
		<param type="int" name="timelimit"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
		<param type="int" name="sizelimit"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
		<param type="int" name="attrsonly"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
		<param type="array" name="attrs"/>
	</params>
</keyword>
<keyword name="ldap_search" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>ldap_search</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$base_dn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filter</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$attributes</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$attrsonly</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sizelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timelimit</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$deref</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Performs the search for a specified filter on the directory with the scope   of <strong><code>LDAP_SCOPE_SUBTREE</code></strong>. This is equivalent to searching   the entire directory.  </p>  <p class="para">   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this   you use an array of link identifiers, rather than a single identifier,   as the first argument. If you don&#039;t want the same base DN and the   same filter for all the searches, you can also use an array of base DNs   and/or an array of filters. Those arrays must be of the same size as   the link identifier array since the first entries of the arrays are   used for one search, the second entries are used for another, and so   on. When doing parallel searches an array of search result   identifiers is returned, except in case of error, then the entry   corresponding to the search will be <strong><code>FALSE</code></strong>. This is very much like   the value normally returned, except that a result identifier is always   returned when a search was made. There are some rare cases where the   normal search returns <strong><code>FALSE</code></strong> while the parallel search returns an   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="base_dn"/>
		<param type="string" name="filter"/>
	</params>
</keyword>
<keyword name="ldap_set_option" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_set_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$newval</code></span>   )</div>  <p class="para rdfs-comment">   Sets the value of the specified option to be <code class="parameter">newval</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="int" name="option"/>
		<param type="mixed" name="newval"/>
	</params>
</keyword>
<keyword name="ldap_set_rebind_proc" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_set_rebind_proc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="string" name="callback"/>
	</params>
</keyword>
<keyword name="ldap_sort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_sort</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sortfilter</code></span>   )</div>  <p class="para rdfs-comment">   Sort the result of a LDAP search, returned by   <span class="function"><a href="function.ldap-search.php" class="function">ldap_search()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
		<param type="resource" name="result"/>
		<param type="string" name="sortfilter"/>
	</params>
</keyword>
<keyword name="ldap_start_tls" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_start_tls</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="ldap_unbind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ldap_unbind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Unbinds from the LDAP directory.  </p>]]></desc>
	<params>
		<param type="resource" name="link"/>
	</params>
</keyword>
<keyword name="leak" type="function" returnType="void">
	<params>
		<param type="int" name="num_bytes"/>
	</params>
</keyword>
<keyword name="levenshtein" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_ins</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_rep</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_del</code></span>   )</div>  <p class="para rdfs-comment">   The Levenshtein distance is defined as the minimal number of   characters you have to replace, insert or delete to transform   <code class="parameter">str1</code> into <code class="parameter">str2</code>.   The complexity of the algorithm is <em>O(m*n)</em>,   where <em>n</em> and <em>m</em> are the   length of <code class="parameter">str1</code> and   <code class="parameter">str2</code> (rather good when compared to   <span class="function"><a href="function.similar-text.php" class="function">similar_text()</a></span>, which is O(max(n,m)**3),   but still expensive).  </p>  <p class="para">   In its simplest form the function will take only the two   strings as parameter and will calculate just the number of   insert, replace and delete operations needed to transform   <code class="parameter">str1</code> into <code class="parameter">str2</code>.  </p>  <p class="para">   A second variant will take three additional parameters that   define the cost of insert, replace and delete operations.  This   is more general and adaptive than variant one, but not as   efficient.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
		<param type="int" name="cost_ins"/>
		<param type="int" name="cost_rep"/>
		<param type="int" name="cost_del"/>
	</params>
</keyword>
<keyword name="levenshtein" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>levenshtein</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_ins</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_rep</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$cost_del</code></span>   )</div>  <p class="para rdfs-comment">   The Levenshtein distance is defined as the minimal number of   characters you have to replace, insert or delete to transform   <code class="parameter">str1</code> into <code class="parameter">str2</code>.   The complexity of the algorithm is <em>O(m*n)</em>,   where <em>n</em> and <em>m</em> are the   length of <code class="parameter">str1</code> and   <code class="parameter">str2</code> (rather good when compared to   <span class="function"><a href="function.similar-text.php" class="function">similar_text()</a></span>, which is O(max(n,m)**3),   but still expensive).  </p>  <p class="para">   In its simplest form the function will take only the two   strings as parameter and will calculate just the number of   insert, replace and delete operations needed to transform   <code class="parameter">str1</code> into <code class="parameter">str2</code>.  </p>  <p class="para">   A second variant will take three additional parameters that   define the cost of insert, replace and delete operations.  This   is more general and adaptive than variant one, but not as   efficient.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="libxml_clear_errors" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>libxml_clear_errors</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>libxml_clear_errors()</strong></span> clears the libxml error buffer.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="libxml_get_errors" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>libxml_get_errors</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Retrieve array of errors.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="libxml_get_last_error" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.libxmlerror.php" class="type LibXMLError">LibXMLError</a></span> <span class="methodname"><strong>libxml_get_last_error</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Retrieve last error from libxml.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="libxml_set_streams_context" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>libxml_set_streams_context</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$streams_context</code></span>   )</div>  <p class="para rdfs-comment">   Sets the streams context for the next libxml document load or write.  </p>]]></desc>
	<params>
		<param type="resource" name="streams_context"/>
	</params>
</keyword>
<keyword name="libxml_use_internal_errors" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>libxml_use_internal_errors</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_errors</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>libxml_use_internal_errors()</strong></span> allows you to disable   standard libxml errors and enable user error handling.  </p>]]></desc>
	<params>
		<param type="boolean" name="use_errors"/>
	</params>
</keyword>
<keyword name="libxml_use_internal_errors" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>libxml_use_internal_errors</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_errors</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>libxml_use_internal_errors()</strong></span> allows you to disable   standard libxml errors and enable user error handling.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="LimitIterator::getPosition" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="LimitIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="LimitIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="LimitIterator::seek" type="function" returnType="void">
	<params>
		<param type="int" name="position"/>
	</params>
</keyword>
<keyword name="LimitIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="locale_get_default" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="locale_set_default" type="function" returnType="bool">
	<params>
		<param type="string" name="locale"/>
	</params>
</keyword>
<keyword name="locateName" type="function" returnType="int">
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="locateName" type="function" returnType="int">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameters</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends an email.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
		<param type="string" name="additional_parameters"/>
	</params>
</keyword>
<keyword name="mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameters</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends an email.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
	</params>
</keyword>
<keyword name="mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameters</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends an email.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="max" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>max()</strong></span>   returns the highest value in that array. If at least two parameters are    provided, <span class="function"><strong>max()</strong></span> returns the biggest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically highest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>max()</strong></span> will return a numeric    <em>0</em> if given, else the alphabetical highest string    value will be returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="max" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>max()</strong></span>   returns the highest value in that array. If at least two parameters are    provided, <span class="function"><strong>max()</strong></span> returns the biggest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically highest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>max()</strong></span> will return a numeric    <em>0</em> if given, else the alphabetical highest string    value will be returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
	</params>
</keyword>
<keyword name="max" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>max</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>max()</strong></span>   returns the highest value in that array. If at least two parameters are    provided, <span class="function"><strong>max()</strong></span> returns the biggest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically highest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>max()</strong></span> will return a numeric    <em>0</em> if given, else the alphabetical highest string    value will be returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="mb_check_encoding" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_check_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$var</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if the specified byte stream is valid for the specified encoding.   It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.  </p>  <p class="para">  </p>]]></desc>
	<params>
		<param type="string" name="var"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_check_encoding" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_check_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$var</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if the specified byte stream is valid for the specified encoding.   It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.  </p>  <p class="para">  </p>]]></desc>
	<params>
		<param type="string" name="var"/>
	</params>
</keyword>
<keyword name="mb_check_encoding" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_check_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$var</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Checks if the specified byte stream is valid for the specified encoding.   It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.  </p>  <p class="para">  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_convert_case" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_case</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Performs case folding on a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, converted in the way specified by   <code class="parameter">mode</code>.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
		<param type="int" name="mode"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_convert_case" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_case</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Performs case folding on a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>, converted in the way specified by   <code class="parameter">mode</code>.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="mb_convert_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$to_encoding</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$from_encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts the character encoding of <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>   to <code class="parameter">to_encoding</code>   from optionally <code class="parameter">from_encoding</code>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="to_encoding"/>
		<param type="mixed" name="from_encoding"/>
	</params>
</keyword>
<keyword name="mb_convert_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$to_encoding</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$from_encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts the character encoding of <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>   to <code class="parameter">to_encoding</code>   from optionally <code class="parameter">from_encoding</code>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="to_encoding"/>
	</params>
</keyword>
<keyword name="mb_convert_kana" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_kana</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;KV&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a &quot;han-kaku&quot; - &quot;zen-kaku&quot; conversion for <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.    This function is only useful for Japanese.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="option"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_convert_kana" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_kana</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;KV&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a &quot;han-kaku&quot; - &quot;zen-kaku&quot; conversion for <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.    This function is only useful for Japanese.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_convert_kana" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_kana</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;KV&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a &quot;han-kaku&quot; - &quot;zen-kaku&quot; conversion for <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.    This function is only useful for Japanese.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_convert_variables" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_variables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to_encoding</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$from_encoding</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$vars</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Converts    character encoding of variables <code class="parameter">vars</code> in   encoding <code class="parameter">from_encoding</code> to encoding    <code class="parameter">to_encoding</code>.   </p>  <p class="para">   <span class="function"><strong>mb_convert_variables()</strong></span> join strings in Array   or Object to detect encoding, since encoding detection tends to   fail for short strings. Therefore, it is impossible to mix   encoding in single array or object.  </p>]]></desc>
	<params>
		<param type="string" name="to_encoding"/>
		<param type="mixed" name="from_encoding"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="mb_convert_variables" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_convert_variables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to_encoding</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$from_encoding</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$vars</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Converts    character encoding of variables <code class="parameter">vars</code> in   encoding <code class="parameter">from_encoding</code> to encoding    <code class="parameter">to_encoding</code>.   </p>  <p class="para">   <span class="function"><strong>mb_convert_variables()</strong></span> join strings in Array   or Object to detect encoding, since encoding detection tends to   fail for short strings. Therefore, it is impossible to mix   encoding in single array or object.  </p>]]></desc>
	<params>
		<param type="string" name="to_encoding"/>
		<param type="mixed" name="from_encoding"/>
	</params>
</keyword>
<keyword name="mb_decode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_decode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Decodes encoded-word <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code> in MIME header.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_decode_numericentity" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_decode_numericentity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$convmap</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Convert numeric string reference of <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> in a specified block to character.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="array" name="convmap"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_decode_numericentity" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_decode_numericentity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$convmap</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Convert numeric string reference of <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> in a specified block to character.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="array" name="convmap"/>
	</params>
</keyword>
<keyword name="mb_detect_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_detect_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$encoding_list</code><span class="initializer"> = mb_detect_order()</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Detects character encoding in <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="mixed" name="encoding_list"/>
		<param type="bool" name="strict"/>
	</params>
</keyword>
<keyword name="mb_detect_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_detect_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$encoding_list</code><span class="initializer"> = mb_detect_order()</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Detects character encoding in <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="mixed" name="encoding_list"/>
	</params>
</keyword>
<keyword name="mb_detect_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_detect_encoding</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$encoding_list</code><span class="initializer"> = mb_detect_order()</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$strict</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Detects character encoding in <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_encode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$transfer_encoding</code><span class="initializer"> = &quot;B&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$linefeed</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$indent</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Encodes a given <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> by the MIME header encoding scheme.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charset"/>
		<param type="string" name="transfer_encoding"/>
		<param type="string" name="linefeed"/>
		<param type="int" name="indent"/>
	</params>
</keyword>
<keyword name="mb_encode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$transfer_encoding</code><span class="initializer"> = &quot;B&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$linefeed</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$indent</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Encodes a given <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> by the MIME header encoding scheme.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charset"/>
		<param type="string" name="transfer_encoding"/>
		<param type="string" name="linefeed"/>
	</params>
</keyword>
<keyword name="mb_encode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$transfer_encoding</code><span class="initializer"> = &quot;B&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$linefeed</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$indent</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Encodes a given <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> by the MIME header encoding scheme.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charset"/>
		<param type="string" name="transfer_encoding"/>
	</params>
</keyword>
<keyword name="mb_encode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$transfer_encoding</code><span class="initializer"> = &quot;B&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$linefeed</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$indent</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Encodes a given <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> by the MIME header encoding scheme.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="mb_encode_mimeheader" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_mimeheader</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$transfer_encoding</code><span class="initializer"> = &quot;B&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$linefeed</code><span class="initializer"> = &quot;\r\n&quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$indent</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Encodes a given <span class="type"><a href="language.types.string.php" class="type string">string</a></span>   <code class="parameter">str</code> by the MIME header encoding scheme.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_encode_numericentity" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_numericentity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$convmap</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_hex</code><span class="initializer"> = FALSE</span></span>  ]] )</div>  <p class="para rdfs-comment">   Converts   specified character codes in <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>   from HTML numeric character reference to character code.      </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="array" name="convmap"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_encode_numericentity" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_encode_numericentity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$convmap</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_hex</code><span class="initializer"> = FALSE</span></span>  ]] )</div>  <p class="para rdfs-comment">   Converts   specified character codes in <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>   from HTML numeric character reference to character code.      </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="array" name="convmap"/>
	</params>
</keyword>
<keyword name="mb_ereg" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_ereg</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$regs</code></span>  ] )</div>  <p class="simpara">   Executes the regular expression match with multibyte support.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="array" name="registers"/>
	</params>
</keyword>
<keyword name="mb_ereg" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_ereg</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$regs</code></span>  ] )</div>  <p class="simpara">   Executes the regular expression match with multibyte support.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_ereg_match" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   A regular expression match for a multibyte string  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_match" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   A regular expression match for a multibyte string  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_ereg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_ereg_replace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ] )</div>  <p class="simpara">   Scans <code class="parameter">string</code> for matches to   <code class="parameter">pattern</code>, then replaces the matched text   with <code class="parameter">replacement</code>    </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="replacement"/>
		<param type="string" name="str"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_ereg_replace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ] )</div>  <p class="simpara">   Scans <code class="parameter">string</code> for matches to   <code class="parameter">pattern</code>, then replaces the matched text   with <code class="parameter">replacement</code>    </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="replacement"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_ereg_search" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte regular expression match for a predefined multibyte string.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_search" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte regular expression match for a predefined multibyte string.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="mb_ereg_search" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte regular expression match for a predefined multibyte string.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_ereg_search_getpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_ereg_search_getpos</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Returns the start point for the next regular expression match.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_getregs" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_getregs</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Retrieve the result from the last multibyte regular expression match  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_init" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_ereg_search_init()</strong></span> sets   <code class="parameter">string</code> and <code class="parameter">pattern</code>   for a multibyte regular expression. These values are used for   <span class="function"><a href="function.mb-ereg-search.php" class="function">mb_ereg_search()</a></span>,   <span class="function"><a href="function.mb-ereg-search-pos.php" class="function">mb_ereg_search_pos()</a></span>, and   <span class="function"><a href="function.mb-ereg-search-regs.php" class="function">mb_ereg_search_regs()</a></span>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="pattern"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_init" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_ereg_search_init()</strong></span> sets   <code class="parameter">string</code> and <code class="parameter">pattern</code>   for a multibyte regular expression. These values are used for   <span class="function"><a href="function.mb-ereg-search.php" class="function">mb_ereg_search()</a></span>,   <span class="function"><a href="function.mb-ereg-search-pos.php" class="function">mb_ereg_search_pos()</a></span>, and   <span class="function"><a href="function.mb-ereg-search-regs.php" class="function">mb_ereg_search_regs()</a></span>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_init" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msr&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_ereg_search_init()</strong></span> sets   <code class="parameter">string</code> and <code class="parameter">pattern</code>   for a multibyte regular expression. These values are used for   <span class="function"><a href="function.mb-ereg-search.php" class="function">mb_ereg_search()</a></span>,   <span class="function"><a href="function.mb-ereg-search-pos.php" class="function">mb_ereg_search_pos()</a></span>, and   <span class="function"><a href="function.mb-ereg-search-regs.php" class="function">mb_ereg_search_regs()</a></span>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_pos" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_pos</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns position and length of a matched part of the multibyte regular expression    for a predefined multibyte string  </p>  <p class="para">   The string for match is specified by   <span class="function"><a href="function.mb-ereg-search-init.php" class="function">mb_ereg_search_init()</a></span>. If it is not specified,   the previous one will be used.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_pos" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_pos</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns position and length of a matched part of the multibyte regular expression    for a predefined multibyte string  </p>  <p class="para">   The string for match is specified by   <span class="function"><a href="function.mb-ereg-search-init.php" class="function">mb_ereg_search_init()</a></span>. If it is not specified,   the previous one will be used.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_pos" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_pos</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns position and length of a matched part of the multibyte regular expression    for a predefined multibyte string  </p>  <p class="para">   The string for match is specified by   <span class="function"><a href="function.mb-ereg-search-init.php" class="function">mb_ereg_search_init()</a></span>. If it is not specified,   the previous one will be used.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_ereg_search_regs" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_regs</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the matched part of a multibyte regular expression.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_regs" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_regs</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the matched part of a multibyte regular expression.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
	</params>
</keyword>
<keyword name="mb_ereg_search_regs" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_ereg_search_regs</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;ms&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the matched part of a multibyte regular expression.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_ereg_search_setpos" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_ereg_search_setpos</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$position</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>mb_ereg_search_setpos()</strong></span> sets the starting   point of a match for <span class="function"><a href="function.mb-ereg-search.php" class="function">mb_ereg_search()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="position"/>
	</params>
</keyword>
<keyword name="mb_eregi" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_eregi</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$regs</code></span>  ] )</div>  <p class="simpara">   Executes the case insensitive regular expression match with multibyte support.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="array" name="registers"/>
	</params>
</keyword>
<keyword name="mb_eregi" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_eregi</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$regs</code></span>  ] )</div>  <p class="simpara">   Executes the case insensitive regular expression match with multibyte support.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_eregi_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_eregi_replace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$replace</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code><span class="initializer"> = &quot;msri&quot;</span></span>  ] )</div>  <p class="simpara">   Scans <code class="parameter">string</code> for matches to   <code class="parameter">pattern</code>, then replaces the matched text   with <code class="parameter">replacement</code>.   </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="replacement"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_get_info" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_get_info</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;all&quot;</span></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>mb_get_info()</strong></span> returns the internal setting parameters of mbstring.  </p>]]></desc>
	<params>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="mb_get_info" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_get_info</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;all&quot;</span></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>mb_get_info()</strong></span> returns the internal setting parameters of mbstring.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_http_input" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_http_input</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="simpara">   Detects the HTTP input character encoding.  </p>]]></desc>
	<params>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="mb_http_input" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_http_input</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="simpara">   Detects the HTTP input character encoding.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_http_output" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_http_output</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_http_output()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the HTTP output character encoding.   Output after this function is converted to <code class="parameter">encoding</code>.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_http_output" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_http_output</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_http_output()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the HTTP output character encoding.   Output after this function is converted to <code class="parameter">encoding</code>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_internal_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_internal_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the internal character encoding  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_internal_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_internal_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the internal character encoding  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_language" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_language</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code><span class="initializer"> = mb_language()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the current language.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
	</params>
</keyword>
<keyword name="mb_language" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_language</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code><span class="initializer"> = mb_language()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get the current language.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_list_encodings" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_list_encodings</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns an array containing all supported encodings.  </p>]]></desc>
	<params>
		<param type="string" name="alias_encoding"/>
	</params>
</keyword>
<keyword name="mb_list_encodings" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_list_encodings</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns an array containing all supported encodings.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_list_encodings_alias_names" type="function" returnType="array">
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_list_encodings_alias_names" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="mb_list_mime_names" type="function" returnType="mixed">
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_list_mime_names" type="function" returnType="mixed">
	<params>
	</params>
</keyword>
<keyword name="mb_output_handler" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_output_handler</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$contents</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_output_handler()</strong></span> is   <span class="function"><a href="function.ob-start.php" class="function">ob_start()</a></span> callback   function. <span class="function"><strong>mb_output_handler()</strong></span> converts   characters in the output buffer from internal character encoding to   HTTP output character encoding.   </p>]]></desc>
	<params>
		<param type="string" name="contents"/>
		<param type="int" name="status"/>
	</params>
</keyword>
<keyword name="mb_parse_str" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_parse_str</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$result</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses GET/POST/COOKIE data and   sets global variables. Since PHP does not provide raw POST/COOKIE   data, it can only be used for GET data for now. It parses URL   encoded data, detects encoding, converts coding to internal   encoding and set values to the <code class="parameter">result</code> <span class="type"><a href="language.types.array.php" class="type array">array</a></span> or   global variables.  </p>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
		<param type="array" name="result"/>
	</params>
</keyword>
<keyword name="mb_parse_str" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_parse_str</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoded_string</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$result</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses GET/POST/COOKIE data and   sets global variables. Since PHP does not provide raw POST/COOKIE   data, it can only be used for GET data for now. It parses URL   encoded data, detects encoding, converts coding to internal   encoding and set values to the <code class="parameter">result</code> <span class="type"><a href="language.types.array.php" class="type array">array</a></span> or   global variables.  </p>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
	</params>
</keyword>
<keyword name="mb_preferred_mime_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_preferred_mime_name</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   )</div>  <p class="para rdfs-comment">   Get a MIME charset <span class="type"><a href="language.types.string.php" class="type string">string</a></span> for a specific encoding.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_regex_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_regex_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_regex_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get character encoding for a multibyte regex.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_regex_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_regex_encoding</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_regex_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Set/Get character encoding for a multibyte regex.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_regex_set_options" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_regex_set_options</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code><span class="initializer"> = mb_regex_set_options()</span></span>  ] )</div>  <p class="simpara">   Sets the default options described by <code class="parameter">options</code>    for multibyte regex functions.  </p>]]></desc>
	<params>
		<param type="string" name="options"/>
	</params>
</keyword>
<keyword name="mb_regex_set_options" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_regex_set_options</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$options</code><span class="initializer"> = mb_regex_set_options()</span></span>  ] )</div>  <p class="simpara">   Sets the default options described by <code class="parameter">options</code>    for multibyte regex functions.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_send_mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_send_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameter</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Sends email. Headers and messages are converted and encoded according   to the <span class="function"><a href="function.mb-language.php" class="function">mb_language()</a></span> setting. It&#039;s a wrapper function   for <span class="function"><a href="function.mail.php" class="function">mail()</a></span>, so see also <span class="function"><a href="function.mail.php" class="function">mail()</a></span> for details.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
		<param type="string" name="additional_parameters"/>
	</params>
</keyword>
<keyword name="mb_send_mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_send_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameter</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Sends email. Headers and messages are converted and encoded according   to the <span class="function"><a href="function.mb-language.php" class="function">mb_language()</a></span> setting. It&#039;s a wrapper function   for <span class="function"><a href="function.mail.php" class="function">mail()</a></span>, so see also <span class="function"><a href="function.mail.php" class="function">mail()</a></span> for details.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
		<param type="string" name="additional_headers"/>
	</params>
</keyword>
<keyword name="mb_send_mail" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mb_send_mail</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_headers</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$additional_parameter</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ]] )</div>  <p class="para rdfs-comment">   Sends email. Headers and messages are converted and encoded according   to the <span class="function"><a href="function.mb-language.php" class="function">mb_language()</a></span> setting. It&#039;s a wrapper function   for <span class="function"><a href="function.mail.php" class="function">mail()</a></span>, so see also <span class="function"><a href="function.mail.php" class="function">mail()</a></span> for details.  </p>]]></desc>
	<params>
		<param type="string" name="to"/>
		<param type="string" name="subject"/>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="mb_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="simpara">   Split a multibyte   <code class="parameter">string</code> using regular expression   <code class="parameter">pattern</code> and returns the result as an   <span class="type"><a href="language.types.array.php" class="type array">array</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="mb_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mb_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="simpara">   Split a multibyte   <code class="parameter">string</code> using regular expression   <code class="parameter">pattern</code> and returns the result as an   <span class="type"><a href="language.types.array.php" class="type array">array</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_strcut" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strcut</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strcut()</strong></span> extracts a substring from a string similarly to   <span class="function"><a href="function.mb-substr.php" class="function">mb_substr()</a></span>, but operates on bytes instead of characters. If the   cut position happens to be between two bytes of a multi-byte character, the cut is   performed starting from the first byte of that character. This is also the difference   to the <span class="function"><a href="function.substr.php" class="function">substr()</a></span> function, which would simply cut the string between   the bytes and thus result in a malformed byte sequence.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strcut" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strcut</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strcut()</strong></span> extracts a substring from a string similarly to   <span class="function"><a href="function.mb-substr.php" class="function">mb_substr()</a></span>, but operates on bytes instead of characters. If the   cut position happens to be between two bytes of a multi-byte character, the cut is   performed starting from the first byte of that character. This is also the difference   to the <span class="function"><a href="function.substr.php" class="function">substr()</a></span> function, which would simply cut the string between   the bytes and thus result in a malformed byte sequence.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="mb_strcut" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strcut</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strcut()</strong></span> extracts a substring from a string similarly to   <span class="function"><a href="function.mb-substr.php" class="function">mb_substr()</a></span>, but operates on bytes instead of characters. If the   cut position happens to be between two bytes of a multi-byte character, the cut is   performed starting from the first byte of that character. This is also the difference   to the <span class="function"><a href="function.substr.php" class="function">substr()</a></span> function, which would simply cut the string between   the bytes and thus result in a malformed byte sequence.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
	</params>
</keyword>
<keyword name="mb_strimwidth" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strimwidth</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$trimmarker</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Truncates <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code> to specified <code class="parameter">width</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="width"/>
		<param type="string" name="trimmarker"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strimwidth" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strimwidth</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$trimmarker</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Truncates <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code> to specified <code class="parameter">width</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="width"/>
		<param type="string" name="trimmarker"/>
	</params>
</keyword>
<keyword name="mb_strimwidth" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strimwidth</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$trimmarker</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Truncates <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code> to specified <code class="parameter">width</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="width"/>
	</params>
</keyword>
<keyword name="mb_stripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_stripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stripos()</strong></span> returns the numeric position of   the first occurrence of <code class="parameter">needle</code> in the   <code class="parameter">haystack</code> string.   Unlike <span class="function"><a href="function.mb-strpos.php" class="function">mb_strpos()</a></span>,    <span class="function"><strong>mb_stripos()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_stripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_stripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stripos()</strong></span> returns the numeric position of   the first occurrence of <code class="parameter">needle</code> in the   <code class="parameter">haystack</code> string.   Unlike <span class="function"><a href="function.mb-strpos.php" class="function">mb_strpos()</a></span>,    <span class="function"><strong>mb_stripos()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mb_stripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_stripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stripos()</strong></span> returns the numeric position of   the first occurrence of <code class="parameter">needle</code> in the   <code class="parameter">haystack</code> string.   Unlike <span class="function"><a href="function.mb-strpos.php" class="function">mb_strpos()</a></span>,    <span class="function"><strong>mb_stripos()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_stristr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_stristr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stristr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   Unlike <span class="function"><a href="function.mb-strstr.php" class="function">mb_strstr()</a></span>,    <span class="function"><strong>mb_stristr()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_stristr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_stristr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stristr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   Unlike <span class="function"><a href="function.mb-strstr.php" class="function">mb_strstr()</a></span>,    <span class="function"><strong>mb_stristr()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="mb_stristr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_stristr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_stristr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   Unlike <span class="function"><a href="function.mb-strstr.php" class="function">mb_strstr()</a></span>,    <span class="function"><strong>mb_stristr()</strong></span> is case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_strlen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the length of a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_strlen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the length of a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of the first occurrence of a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> in a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>  <p class="para">   Performs a multi-byte safe   <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span> operation based on number of   characters. The first character&#039;s position is 0, the second character   position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of the first occurrence of a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> in a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>  <p class="para">   Performs a multi-byte safe   <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span> operation based on number of   characters. The first character&#039;s position is 0, the second character   position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mb_strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Finds position of the first occurrence of a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> in a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>  <p class="para">   Performs a multi-byte safe   <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span> operation based on number of   characters. The first character&#039;s position is 0, the second character   position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strrchr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrchr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrchr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strrchr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrchr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrchr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="mb_strrchr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrchr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrchr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strrichr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrichr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrichr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>. Unlike   <span class="function"><a href="function.mb-strrchr.php" class="function">mb_strrchr()</a></span>, <span class="function"><strong>mb_strrichr()</strong></span> is   case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strrichr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrichr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrichr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>. Unlike   <span class="function"><a href="function.mb-strrchr.php" class="function">mb_strrchr()</a></span>, <span class="function"><strong>mb_strrichr()</strong></span> is   case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="mb_strrichr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strrichr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$part</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strrichr()</strong></span> finds the last occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>. Unlike   <span class="function"><a href="function.mb-strrchr.php" class="function">mb_strrchr()</a></span>, <span class="function"><strong>mb_strrichr()</strong></span> is   case-insensitive.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strripos()</strong></span> performs multi-byte safe   <span class="function"><a href="function.strripos.php" class="function">strripos()</a></span> operation based on   number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.    Unlike <span class="function"><a href="function.mb-strrpos.php" class="function">mb_strrpos()</a></span>,   <span class="function"><strong>mb_strripos()</strong></span> is case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strripos()</strong></span> performs multi-byte safe   <span class="function"><a href="function.strripos.php" class="function">strripos()</a></span> operation based on   number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.    Unlike <span class="function"><a href="function.mb-strrpos.php" class="function">mb_strrpos()</a></span>,   <span class="function"><strong>mb_strripos()</strong></span> is case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mb_strripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strripos()</strong></span> performs multi-byte safe   <span class="function"><a href="function.strripos.php" class="function">strripos()</a></span> operation based on   number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.    Unlike <span class="function"><a href="function.mb-strrpos.php" class="function">mb_strrpos()</a></span>,   <span class="function"><strong>mb_strripos()</strong></span> is case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte safe   <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span> operation based on the    number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte safe   <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span> operation based on the    number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mb_strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multibyte safe   <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span> operation based on the    number of characters. <code class="parameter">needle</code> position is   counted from the beginning of   <code class="parameter">haystack</code>. First character&#039;s position is   0. Second character position is 1.   </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strstr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strstr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strstr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strstr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="mb_strstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strstr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mb_strstr()</strong></span> finds the first occurrence of   <code class="parameter">needle</code> in <code class="parameter">haystack</code>   and returns the portion of <code class="parameter">haystack</code>.   If <code class="parameter">needle</code> is not found, it returns <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mb_strtolower" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strtolower</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">str</code>   with all alphabetic characters converted to lowercase.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strtolower" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strtolower</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">str</code>   with all alphabetic characters converted to lowercase.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
	</params>
</keyword>
<keyword name="mb_strtoupper" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strtoupper</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">str</code>   with all alphabetic characters converted to uppercase.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strtoupper" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_strtoupper</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">str</code>   with all alphabetic characters converted to uppercase.  </p>]]></desc>
	<params>
		<param type="string" name="sourcestring"/>
	</params>
</keyword>
<keyword name="mb_strwidth" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strwidth</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the width of <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.  </p>  <p class="para">   Multi-byte characters are usually twice the width of single byte characters.  </p>  <p class="para">   <table class="doctable table">    <caption><strong>Characters width</strong></caption>         <thead>      <tr>       <th>Chars</th>       <th>Width</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>U+0000 - U+0019</td>       <td>0</td>      </tr>      <tr>       <td>U+0020 - U+1FFF</td>       <td>1</td>      </tr>      <tr>       <td>U+2000 - U+FF60</td>       <td>2</td>      </tr>      <tr>       <td>U+FF61 - U+FF9F</td>       <td>1</td>      </tr>      <tr>       <td>U+FFA0 -      </td>       <td>2</td>      </tr>     </tbody>       </table>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_strwidth" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_strwidth</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the width of <span class="type"><a href="language.types.string.php" class="type string">string</a></span> <code class="parameter">str</code>.  </p>  <p class="para">   Multi-byte characters are usually twice the width of single byte characters.  </p>  <p class="para">   <table class="doctable table">    <caption><strong>Characters width</strong></caption>         <thead>      <tr>       <th>Chars</th>       <th>Width</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>U+0000 - U+0019</td>       <td>0</td>      </tr>      <tr>       <td>U+0020 - U+1FFF</td>       <td>1</td>      </tr>      <tr>       <td>U+2000 - U+FF60</td>       <td>2</td>      </tr>      <tr>       <td>U+FF61 - U+FF9F</td>       <td>1</td>      </tr>      <tr>       <td>U+FFA0 -      </td>       <td>2</td>      </tr>     </tbody>       </table>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="mb_substitute_character" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_substitute_character</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$substrchar</code><span class="initializer"> = mb_substitute_character()</span></span>  ] )</div>  <p class="para rdfs-comment">   Specifies a substitution character when input character encoding is invalid   or character code does not exist in output character   encoding. Invalid characters may be substituted <strong><code>NULL</code></strong> (no output),   <span class="type"><a href="language.types.string.php" class="type string">string</a></span> or <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> value (Unicode character code value).  </p>  <p class="para">   This setting affects <span class="function"><a href="function.mb-convert-encoding.php" class="function">mb_convert_encoding()</a></span>,   <span class="function"><a href="function.mb-convert-variables.php" class="function">mb_convert_variables()</a></span>,   <span class="function"><a href="function.mb-output-handler.php" class="function">mb_output_handler()</a></span>,   and <span class="function"><a href="function.mb-send-mail.php" class="function">mb_send_mail()</a></span>.  </p>]]></desc>
	<params>
		<param type="mixed" name="substchar"/>
	</params>
</keyword>
<keyword name="mb_substitute_character" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mb_substitute_character</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$substrchar</code><span class="initializer"> = mb_substitute_character()</span></span>  ] )</div>  <p class="para rdfs-comment">   Specifies a substitution character when input character encoding is invalid   or character code does not exist in output character   encoding. Invalid characters may be substituted <strong><code>NULL</code></strong> (no output),   <span class="type"><a href="language.types.string.php" class="type string">string</a></span> or <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> value (Unicode character code value).  </p>  <p class="para">   This setting affects <span class="function"><a href="function.mb-convert-encoding.php" class="function">mb_convert_encoding()</a></span>,   <span class="function"><a href="function.mb-convert-variables.php" class="function">mb_convert_variables()</a></span>,   <span class="function"><a href="function.mb-output-handler.php" class="function">mb_output_handler()</a></span>,   and <span class="function"><a href="function.mb-send-mail.php" class="function">mb_send_mail()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mb_substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multi-byte safe   <span class="function"><a href="function.substr.php" class="function">substr()</a></span> operation based on   number of characters. Position is   counted from the beginning of   <code class="parameter">str</code>. First character&#039;s position is   0. Second character position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multi-byte safe   <span class="function"><a href="function.substr.php" class="function">substr()</a></span> operation based on   number of characters. Position is   counted from the beginning of   <code class="parameter">str</code>. First character&#039;s position is   0. Second character position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="mb_substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mb_substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = NULL</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ]] )</div>  <p class="para rdfs-comment">   Performs a multi-byte safe   <span class="function"><a href="function.substr.php" class="function">substr()</a></span> operation based on   number of characters. Position is   counted from the beginning of   <code class="parameter">str</code>. First character&#039;s position is   0. Second character position is 1, and so on.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
	</params>
</keyword>
<keyword name="mb_substr_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_substr_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Counts the number of times the   <code class="parameter">needle</code> substring occurs in the   <code class="parameter">haystack</code> <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="mb_substr_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mb_substr_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = mb_internal_encoding()</span></span>  ] )</div>  <p class="para rdfs-comment">   Counts the number of times the   <code class="parameter">needle</code> substring occurs in the   <code class="parameter">haystack</code> <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="mcrypt_cbc" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_cbc</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_cbc</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or higher. The   <code class="parameter">mode</code> should be either   <strong><code>MCRYPT_ENCRYPT</code></strong> or   <strong><code>MCRYPT_DECRYPT</code></strong>.  </p>  <p class="para">   This function should not be used anymore, see   <span class="function"><a href="function.mcrypt-generic.php" class="function">mcrypt_generic()</a></span> and   <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span> for replacements.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.5.0.  Relyingon this function is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="int" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="int" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_cfb" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_cfb</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_cfb</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or higher. The   <code class="parameter">mode</code> should be either   <strong><code>MCRYPT_ENCRYPT</code></strong> or   <strong><code>MCRYPT_DECRYPT</code></strong>.  </p>  <p class="para">   This function should not be used anymore, see   <span class="function"><a href="function.mcrypt-generic.php" class="function">mcrypt_generic()</a></span> and   <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span> for replacements.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.5.0.  Relyingon this function is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="int" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="int" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_create_iv" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_create_iv</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$size</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$source</code><span class="initializer"> = MCRYPT_DEV_RANDOM</span></span>  ] )</div>  <p class="para rdfs-comment">   Creates an initialization vector (IV) from a random source.  </p>  <p class="para">   The IV is only meant to give an alternative seed to the encryption   routines. This IV does not need to be secret at all, though it can be   desirable. You even can send it along with your ciphertext without   losing security.  </p>]]></desc>
	<params>
		<param type="int" name="size"/>
		<param type="int" name="source"/>
	</params>
</keyword>
<keyword name="mcrypt_decrypt" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_decrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   Decrypts the <code class="parameter">data</code> and returns the unencrypted data.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="string" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_ecb" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_ecb</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_ecb</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or higher. The   <code class="parameter">mode</code> should be either   <strong><code>MCRYPT_ENCRYPT</code></strong> or   <strong><code>MCRYPT_DECRYPT</code></strong>.  </p>  <p class="para">   This function is deprecated and should not be used anymore, see   <span class="function"><a href="function.mcrypt-generic.php" class="function">mcrypt_generic()</a></span> and   <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span> for replacements.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.5.0.  Relyingon this function is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="int" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="int" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_algorithms_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_enc_get_algorithms_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the name of the algorithm.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_block_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_enc_get_block_size</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Gets the blocksize of the opened algorithm.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_iv_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_enc_get_iv_size</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the size of the IV of the algorithm specified by the   encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes,   and in some algorithms in stream mode.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_key_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_enc_get_key_size</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Gets the maximum supported key size of the algorithm in bytes.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_modes_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_enc_get_modes_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the name of the mode.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_get_supported_key_sizes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_enc_get_supported_key_sizes</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Gets the supported key sizes of the opened algorithm.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_is_block_algorithm" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_enc_is_block_algorithm</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Tells whether the algorithm of the opened mode is a block algorithm.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_is_block_algorithm_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_enc_is_block_algorithm_mode</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Tells whether the algorithm of the opened mode works on blocks (e.g.   <strong><code>FALSE</code></strong> for stream, and <strong><code>TRUE</code></strong> for cbc, cfb, ofb)..  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_is_block_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_enc_is_block_mode</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Tells whether the opened mode outputs blocks (e.g. <strong><code>TRUE</code></strong> for cbc and ecb,   and <strong><code>FALSE</code></strong> for cfb and stream).  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_enc_self_test" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_enc_self_test</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   This function runs the self test on the algorithm specified by the   descriptor <code class="parameter">td</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_encrypt" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_encrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   Encrypts the data and returns it.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="string" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_generic" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_generic</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   This function encrypts data. The data is padded with &quot;<em>\0</em>&quot;   to make sure the length of the data is n * blocksize. This   function returns the encrypted data. Note that the length   of the returned string can in fact be longer than the input,   due to the padding of the data.  </p>  <p class="para">   If you want to store the encrypted data in a database make sure to store   the entire string as returned by mcrypt_generic, or the string will not   entirely decrypt properly.  If your original string is 10 characters long   and the block size is 8 (use   <span class="function"><a href="function.mcrypt-enc-get-block-size.php" class="function">mcrypt_enc_get_block_size()</a></span> to determine the   blocksize), you would need at least 16 characters in your database field.   Note the string returned by <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span> will be   16 characters as well...use rtrim($str, &quot;\0&quot;) to remove the padding.  </p>  <p class="para">   If you are for example storing the data in a MySQL database remember that   varchar fields automatically have trailing spaces removed during   insertion. As encrypted data can end in a space (ASCII 32), the data will   be damaged by this removal.  Store data in a tinyblob/tinytext (or   larger) field instead.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="mcrypt_generic_deinit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_generic_deinit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   This function terminates encryption specified by the encryption   descriptor (<code class="parameter">td</code>). It clears all buffers, but does   not close the module.  You need to call   <span class="function"><a href="function.mcrypt-module-close.php" class="function">mcrypt_module_close()</a></span> yourself. (But PHP does this for   you at the end of the script.)  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_generic_init" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_generic_init</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>   )</div>  <p class="para rdfs-comment">   You need to call this function before every call to   <span class="function"><a href="function.mcrypt-generic.php" class="function">mcrypt_generic()</a></span> or   <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
		<param type="binary" name="key"/>
		<param type="binary" name="iv"/>
	</params>
</keyword>
<keyword name="mcrypt_get_block_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_get_block_size</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_get_block_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or 2.5.x.  </p>  <p class="para">   <span class="function"><strong>mcrypt_get_block_size()</strong></span> is used to get the   size of a block of the specified <code class="parameter">cipher</code> (in   combination with an encryption mode).  </p>  <p class="para">   It is more useful to use the <span class="function"><a href="function.mcrypt-enc-get-block-size.php" class="function">mcrypt_enc_get_block_size()</a></span>   function as this uses the resource returned by   <span class="function"><a href="function.mcrypt-module-open.php" class="function">mcrypt_module_open()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="module"/>
	</params>
</keyword>
<keyword name="mcrypt_get_cipher_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_get_cipher_name</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_get_cipher_name</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mcrypt_get_cipher_name()</strong></span> is used to get the   name of the specified cipher.  </p>  <p class="para">   <span class="function"><strong>mcrypt_get_cipher_name()</strong></span> takes the cipher   number as an argument (libmcrypt 2.2.x) or takes the cipher name   as an argument (libmcrypt 2.4.x or higher) and returns the name of the cipher   or <strong><code>FALSE</code></strong>, if the cipher does not exist.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
	</params>
</keyword>
<keyword name="mcrypt_get_iv_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_get_iv_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Gets the size of the IV belonging to a specific    <code class="parameter">cipher</code>/<code class="parameter">mode</code> combination.  </p>  <p class="para">   It is more useful to use the <span class="function"><a href="function.mcrypt-enc-get-iv-size.php" class="function">mcrypt_enc_get_iv_size()</a></span>   function as this uses the resource returned by   <span class="function"><a href="function.mcrypt-module-open.php" class="function">mcrypt_module_open()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="module"/>
	</params>
</keyword>
<keyword name="mcrypt_get_key_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_get_key_size</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_get_key_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or 2.5.x.  </p>  <p class="para">   <span class="function"><strong>mcrypt_get_key_size()</strong></span> is used to get the size   of a key of the specified <code class="parameter">cipher</code> (in   combination with an encryption mode).  </p>  <p class="para">   It is more useful to use the <span class="function"><a href="function.mcrypt-enc-get-key-size.php" class="function">mcrypt_enc_get_key_size()</a></span>   function as this uses the resource returned by <span class="function"><a href="function.mcrypt-module-open.php" class="function">mcrypt_module_open()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="module"/>
	</params>
</keyword>
<keyword name="mcrypt_list_algorithms" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_list_algorithms</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code><span class="initializer"> = ini_get(&quot;mcrypt.algorithms_dir&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the list of all supported algorithms in the   <code class="parameter">lib_dir</code> parameter.  </p>]]></desc>
	<params>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_list_algorithms" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_list_algorithms</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code><span class="initializer"> = ini_get(&quot;mcrypt.algorithms_dir&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the list of all supported algorithms in the   <code class="parameter">lib_dir</code> parameter.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mcrypt_list_modes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_list_modes</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code><span class="initializer"> = ini_get(&quot;mcrypt.modes_dir&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the list of all supported modes in the   <code class="parameter">lib_dir</code> parameter.  </p>]]></desc>
	<params>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_list_modes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_list_modes</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code><span class="initializer"> = ini_get(&quot;mcrypt.modes_dir&quot;)</span></span>  ] )</div>  <p class="para rdfs-comment">   Gets the list of all supported modes in the   <code class="parameter">lib_dir</code> parameter.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mcrypt_module_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   )</div>  <p class="para rdfs-comment">   Closes the specified encryption handle.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_algo_block_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_module_get_algo_block_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the blocksize of the specified algorithm.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_algo_block_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_module_get_algo_block_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the blocksize of the specified algorithm.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_algo_key_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_module_get_algo_key_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the maximum supported keysize of the opened mode.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_algo_key_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mcrypt_module_get_algo_key_size</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets the maximum supported keysize of the opened mode.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_supported_key_sizes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_module_get_supported_key_sizes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array with the key sizes supported by the specified algorithm.   If it returns an empty array then all key sizes between 1 and   <span class="function"><a href="function.mcrypt-module-get-algo-key-size.php" class="function">mcrypt_module_get_algo_key_size()</a></span> are supported by the   algorithm.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_get_supported_key_sizes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mcrypt_module_get_supported_key_sizes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array with the key sizes supported by the specified algorithm.   If it returns an empty array then all key sizes between 1 and   <span class="function"><a href="function.mcrypt-module-get-algo-key-size.php" class="function">mcrypt_module_get_algo_key_size()</a></span> are supported by the   algorithm.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_algorithm" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_algorithm</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the specified algorithm is a block   algorithm, or <strong><code>FALSE</code></strong> if it is a stream one.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_algorithm" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_algorithm</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the specified algorithm is a block   algorithm, or <strong><code>FALSE</code></strong> if it is a stream one.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_algorithm_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_algorithm_mode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the mode is for use with block   algorithms, otherwise it returns <strong><code>FALSE</code></strong>. (e.g. <strong><code>FALSE</code></strong> for stream, and   <strong><code>TRUE</code></strong> for cbc, cfb, ofb).  </p>]]></desc>
	<params>
		<param type="string" name="mode"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_algorithm_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_algorithm_mode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the mode is for use with block   algorithms, otherwise it returns <strong><code>FALSE</code></strong>. (e.g. <strong><code>FALSE</code></strong> for stream, and   <strong><code>TRUE</code></strong> for cbc, cfb, ofb).  </p>]]></desc>
	<params>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_mode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the mode outputs blocks of bytes or   <strong><code>FALSE</code></strong> if it outputs just bytes. (e.g. <strong><code>TRUE</code></strong> for cbc and ecb, and   <strong><code>FALSE</code></strong> for cfb and stream).  </p>]]></desc>
	<params>
		<param type="string" name="mode"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_is_block_mode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_is_block_mode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns <strong><code>TRUE</code></strong> if the mode outputs blocks of bytes or   <strong><code>FALSE</code></strong> if it outputs just bytes. (e.g. <strong><code>TRUE</code></strong> for cbc and ecb, and   <strong><code>FALSE</code></strong> for cfb and stream).  </p>]]></desc>
	<params>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="mcrypt_module_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mcrypt_module_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm_directory</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode_directory</code></span>   )</div>  <p class="para rdfs-comment">   This function opens the module of the algorithm and the mode to be used.   The name of the algorithm is specified in algorithm, e.g. <em>&quot;twofish&quot;</em> or is   one of the <strong><code>MCRYPT_ciphername</code></strong> constants.  The module is closed by calling   <span class="function"><a href="function.mcrypt-module-close.php" class="function">mcrypt_module_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="cipher"/>
		<param type="string" name="cipher_directory"/>
		<param type="string" name="mode"/>
		<param type="string" name="mode_directory"/>
	</params>
</keyword>
<keyword name="mcrypt_module_self_test" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_self_test</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function runs the self test on the algorithm specified.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
		<param type="string" name="lib_dir"/>
	</params>
</keyword>
<keyword name="mcrypt_module_self_test" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mcrypt_module_self_test</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$algorithm</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$lib_dir</code></span>  ] )</div>  <p class="para rdfs-comment">   This function runs the self test on the algorithm specified.  </p>]]></desc>
	<params>
		<param type="string" name="algorithm"/>
	</params>
</keyword>
<keyword name="mcrypt_ofb" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_ofb</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mcrypt_ofb</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cipher</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$iv</code></span>  ] )</div>  <p class="para rdfs-comment">   The first prototype is when linked against libmcrypt 2.2.x, the   second when linked against libmcrypt 2.4.x or higher. The   <code class="parameter">mode</code> should be either   <strong><code>MCRYPT_ENCRYPT</code></strong> or   <strong><code>MCRYPT_DECRYPT</code></strong>.  </p>  <p class="para">   This function should not be used anymore, see   <span class="function"><a href="function.mcrypt-generic.php" class="function">mcrypt_generic()</a></span> and   <span class="function"><a href="function.mdecrypt-generic.php" class="function">mdecrypt_generic()</a></span> for replacements.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.5.0.  Relyingon this function is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="int" name="cipher"/>
		<param type="string" name="key"/>
		<param type="string" name="data"/>
		<param type="int" name="mode"/>
		<param type="string" name="iv"/>
	</params>
</keyword>
<keyword name="mdecrypt_generic" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mdecrypt_generic</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$td</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   This function decrypts data. Note that the length of the returned string   can in fact be longer than the unencrypted string, due to the padding of   the data.  </p>]]></desc>
	<params>
		<param type="resource" name="td"/>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="memory_get_peak_usage" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>memory_get_peak_usage</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$real_usage</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the peak of memory, in bytes, that&#039;s been allocated to your PHP   script.  </p>]]></desc>
	<params>
		<param type="bool" name="real_usage"/>
	</params>
</keyword>
<keyword name="memory_get_peak_usage" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>memory_get_peak_usage</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$real_usage</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the peak of memory, in bytes, that&#039;s been allocated to your PHP   script.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="memory_get_usage" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>memory_get_usage</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$real_usage</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the amount of memory, in bytes, that&#039;s currently being   allocated to your PHP script.  </p>]]></desc>
	<params>
		<param type="bool" name="real_usage"/>
	</params>
</keyword>
<keyword name="memory_get_usage" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>memory_get_usage</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$real_usage</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the amount of memory, in bytes, that&#039;s currently being   allocated to your PHP script.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="metaphone" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>metaphone</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$phonemes</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Calculates the metaphone key of <code class="parameter">str</code>.  </p>  <p class="para">   Similar to <span class="function"><a href="function.soundex.php" class="function">soundex()</a></span> metaphone creates the same key for   similar sounding words. It&#039;s more accurate than   <span class="function"><a href="function.soundex.php" class="function">soundex()</a></span> as it knows the basic rules of English   pronunciation.  The metaphone generated keys are of variable length.  </p>  <p class="para">   Metaphone was developed by Lawrence Philips   &lt;lphilips at verity dot com&gt;. It is described in [&quot;Practical   Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,   1995].  </p>]]></desc>
	<params>
		<param type="string" name="text"/>
		<param type="int" name="phones"/>
	</params>
</keyword>
<keyword name="metaphone" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>metaphone</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$phonemes</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Calculates the metaphone key of <code class="parameter">str</code>.  </p>  <p class="para">   Similar to <span class="function"><a href="function.soundex.php" class="function">soundex()</a></span> metaphone creates the same key for   similar sounding words. It&#039;s more accurate than   <span class="function"><a href="function.soundex.php" class="function">soundex()</a></span> as it knows the basic rules of English   pronunciation.  The metaphone generated keys are of variable length.  </p>  <p class="para">   Metaphone was developed by Lawrence Philips   &lt;lphilips at verity dot com&gt;. It is described in [&quot;Practical   Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,   1995].  </p>]]></desc>
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="method_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>method_exists</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   )</div>  <p class="para rdfs-comment">   Checks if the class method exists in the given   <code class="parameter">object</code>.  </p>]]></desc>
	<params>
		<param type="object" name="object"/>
		<param type="string" name="method"/>
	</params>
</keyword>
<keyword name="mhash" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mhash</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mhash()</strong></span> applies a hash function specified by   <code class="parameter">hash</code> to the <code class="parameter">data</code>.  </p>]]></desc>
	<params>
		<param type="int" name="hash"/>
		<param type="binary" name="data"/>
		<param type="binary" name="key"/>
	</params>
</keyword>
<keyword name="mhash" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mhash</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$key</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mhash()</strong></span> applies a hash function specified by   <code class="parameter">hash</code> to the <code class="parameter">data</code>.  </p>]]></desc>
	<params>
		<param type="int" name="hash"/>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="mhash_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mhash_count</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the highest available hash ID.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mhash_get_block_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mhash_get_block_size</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>   )</div>  <p class="para rdfs-comment">   Gets the size of a block of the specified <code class="parameter">hash</code>.  </p>]]></desc>
	<params>
		<param type="int" name="hash"/>
	</params>
</keyword>
<keyword name="mhash_get_hash_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mhash_get_hash_name</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$hash</code></span>   )</div>  <p class="para rdfs-comment">   Gets the name of the specified <code class="parameter">hash</code>.  </p>]]></desc>
	<params>
		<param type="int" name="hash"/>
	</params>
</keyword>
<keyword name="mhash_get_keygen_name" type="function" returnType="string">
	<params>
		<param type="int" name="keygen"/>
	</params>
</keyword>
<keyword name="mhash_get_keygen_salt_size" type="function" returnType="bool">
	<params>
		<param type="int" name="keygen"/>
	</params>
</keyword>
<keyword name="mhash_keygen" type="function" returnType="binary">
	<params>
		<param type="int" name="type"/>
		<param type="int" name="hash1"/>
		<param type="int" name="hash2"/>
		<param type="binary" name="password"/>
		<param type="binary" name="salt"/>
		<param type="int" name="max_key_size"/>
		<param type="int" name="bytes_count"/>
	</params>
</keyword>
<keyword name="mhash_keygen" type="function" returnType="binary">
	<params>
		<param type="int" name="type"/>
		<param type="int" name="hash1"/>
		<param type="int" name="hash2"/>
		<param type="binary" name="password"/>
		<param type="binary" name="salt"/>
		<param type="int" name="max_key_size"/>
	</params>
</keyword>
<keyword name="mhash_keygen" type="function" returnType="binary">
	<params>
		<param type="int" name="type"/>
		<param type="int" name="hash1"/>
		<param type="int" name="hash2"/>
		<param type="binary" name="password"/>
		<param type="binary" name="salt"/>
	</params>
</keyword>
<keyword name="mhash_keygen" type="function" returnType="binary">
	<params>
		<param type="int" name="type"/>
		<param type="int" name="hash1"/>
		<param type="int" name="hash2"/>
		<param type="binary" name="password"/>
	</params>
</keyword>
<keyword name="mhash_keygen_count" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mhash_keygen_uses_count" type="function" returnType="bool">
	<params>
		<param type="int" name="keygen"/>
	</params>
</keyword>
<keyword name="mhash_keygen_uses_hash" type="function" returnType="bool">
	<params>
		<param type="int" name="keygen"/>
	</params>
</keyword>
<keyword name="mhash_keygen_uses_salt" type="function" returnType="bool">
	<params>
		<param type="int" name="keygen"/>
	</params>
</keyword>
<keyword name="microtime" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>microtime</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$get_as_float</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>microtime()</strong></span> returns the current Unix timestamp with   microseconds. This function is only available on operating systems that   support the gettimeofday() system call.  </p>]]></desc>
	<params>
		<param type="bool" name="get_as_float"/>
	</params>
</keyword>
<keyword name="microtime" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>microtime</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$get_as_float</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>microtime()</strong></span> returns the current Unix timestamp with   microseconds. This function is only available on operating systems that   support the gettimeofday() system call.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mime_content_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mime_content_type</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Returns the MIME content type for a file as determined by using   information from the <var class="filename">magic.mime</var> file.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="min" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>    )</div>   <div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>    , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>    [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>min()</strong></span>   returns the lowest value in that array. If at least two parameters are    provided, <span class="function"><strong>min()</strong></span> returns the smallest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically lowest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>min()</strong></span> will return the lowest    alphanumerical string value if any strings are given, else a numeric    <em>0</em> is returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="min" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>    )</div>   <div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>    , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>    [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>min()</strong></span>   returns the lowest value in that array. If at least two parameters are    provided, <span class="function"><strong>min()</strong></span> returns the smallest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically lowest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>min()</strong></span> will return the lowest    alphanumerical string value if any strings are given, else a numeric    <em>0</em> is returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
	</params>
</keyword>
<keyword name="min" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$values</code></span>    )</div>   <div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>min</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value1</code></span>    , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value2</code></span>    [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>   ] )</div>  <p class="para rdfs-comment">   If the first and only parameter is an array, <span class="function"><strong>min()</strong></span>   returns the lowest value in that array. If at least two parameters are    provided, <span class="function"><strong>min()</strong></span> returns the smallest of these values.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    PHP will evaluate a non-numeric <span class="type"><a href="language.types.string.php" class="type string">string</a></span> as     <em>0</em> if compared to <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, but still return the string if it&#039;s seen as the    numerically lowest value.  If multiple arguments evaluate to    <em>0</em>, <span class="function"><strong>min()</strong></span> will return the lowest    alphanumerical string value if any strings are given, else a numeric    <em>0</em> is returned.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="ming_keypress" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ming_keypress</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$char</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="ming_setscale" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ming_setscale</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$scale</code></span>   )</div>  <p class="para rdfs-comment">   Sets the scale of the output SWF. Inside the SWF file, coordinates are   measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel.  </p>]]></desc>
	<params>
		<param type="int" name="scale"/>
	</params>
</keyword>
<keyword name="ming_useconstants" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ming_useconstants</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$use</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="int" name="use"/>
	</params>
</keyword>
<keyword name="ming_useswfversion" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ming_useswfversion</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$version</code></span>   )</div>  <p class="para rdfs-comment">   Sets the SWF version to be used in the movie. This affect the bahaviour   of Action Script.  </p>]]></desc>
	<params>
		<param type="int" name="version"/>
	</params>
</keyword>
<keyword name="mkdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mkdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0777</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Attempts to create the directory specified by pathname.   </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
		<param type="bool" name="recursive"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="mkdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mkdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0777</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Attempts to create the directory specified by pathname.   </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
		<param type="bool" name="recursive"/>
	</params>
</keyword>
<keyword name="mkdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mkdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0777</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Attempts to create the directory specified by pathname.   </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="mkdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mkdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0777</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$recursive</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Attempts to create the directory specified by pathname.   </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
		<param type="int" name="day"/>
		<param type="int" name="year"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
		<param type="int" name="day"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
		<param type="int" name="mon"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
		<param type="int" name="sec"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
		<param type="int" name="min"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
		<param type="int" name="hour"/>
	</params>
</keyword>
<keyword name="mktime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mktime</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$hour</code><span class="initializer"> = date(&quot;H&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minute</code><span class="initializer"> = date(&quot;i&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$second</code><span class="initializer"> = date(&quot;s&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$month</code><span class="initializer"> = date(&quot;n&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$day</code><span class="initializer"> = date(&quot;j&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$year</code><span class="initializer"> = date(&quot;Y&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$is_dst</code><span class="initializer"> = -1</span></span>  ]]]]]]] )</div>  <p class="para rdfs-comment">   Returns the Unix timestamp corresponding to the arguments   given. This timestamp is a long integer containing the number of   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time   specified.  </p>  <p class="para">   Arguments may be left out in order from right to left; any   arguments thus omitted will be set to the current value according   to the local date and time.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="money_format" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>money_format</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   , <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>money_format()</strong></span> returns a formatted version of   <code class="parameter">number</code>.  This function wraps the C library   function <span class="function"><strong>strfmon()</strong></span>, with the difference that   this implementation converts only one number at a time.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="float" name="value"/>
	</params>
</keyword>
<keyword name="move_uploaded_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>move_uploaded_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$destination</code></span>   )</div>  <p class="para rdfs-comment">   This function checks to ensure that the file designated by   <code class="parameter">filename</code> is a valid upload file (meaning   that it was uploaded via PHP&#039;s HTTP POST upload mechanism). If   the file is valid, it will be moved to the filename given by   <code class="parameter">destination</code>.  </p>  <p class="para">   This sort of check is especially important if there is any chance   that anything done with uploaded files could reveal their   contents to the user, or even to other users on the same   system.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="string" name="new_path"/>
	</params>
</keyword>
<keyword name="msg_get_queue" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msg_get_queue</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perms</code><span class="initializer"> = 0666</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_get_queue()</strong></span> returns an id that can be used to   access the System V message queue with the given   <code class="parameter">key</code>. The first call creates the message queue with   the optional <code class="parameter">perms</code>.   A second call to <span class="function"><strong>msg_get_queue()</strong></span> for the same   <code class="parameter">key</code> will return a different message queue   identifier, but both identifiers access the same underlying message   queue.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="perms"/>
	</params>
</keyword>
<keyword name="msg_get_queue" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msg_get_queue</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perms</code><span class="initializer"> = 0666</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_get_queue()</strong></span> returns an id that can be used to   access the System V message queue with the given   <code class="parameter">key</code>. The first call creates the message queue with   the optional <code class="parameter">perms</code>.   A second call to <span class="function"><strong>msg_get_queue()</strong></span> for the same   <code class="parameter">key</code> will return a different message queue   identifier, but both identifiers access the same underlying message   queue.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
	</params>
</keyword>
<keyword name="msg_receive" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_receive</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$desiredmsgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxsize</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$unserialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_receive()</strong></span> will receive the first message from the   specified <code class="parameter">queue</code> of the type specified by   <code class="parameter">desiredmsgtype</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="desiredmsgtype"/>
		<param type="int" name="&amp;msgtype"/>
		<param type="int" name="maxsize"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="unserialize"/>
		<param type="int" name="flags"/>
		<param type="int" name="errorcode"/>
	</params>
</keyword>
<keyword name="msg_receive" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_receive</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$desiredmsgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxsize</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$unserialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_receive()</strong></span> will receive the first message from the   specified <code class="parameter">queue</code> of the type specified by   <code class="parameter">desiredmsgtype</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="desiredmsgtype"/>
		<param type="int" name="&amp;msgtype"/>
		<param type="int" name="maxsize"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="unserialize"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="msg_receive" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_receive</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$desiredmsgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxsize</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$unserialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_receive()</strong></span> will receive the first message from the   specified <code class="parameter">queue</code> of the type specified by   <code class="parameter">desiredmsgtype</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="desiredmsgtype"/>
		<param type="int" name="&amp;msgtype"/>
		<param type="int" name="maxsize"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="unserialize"/>
	</params>
</keyword>
<keyword name="msg_receive" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_receive</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$desiredmsgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$msgtype</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxsize</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$unserialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_receive()</strong></span> will receive the first message from the   specified <code class="parameter">queue</code> of the type specified by   <code class="parameter">desiredmsgtype</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="desiredmsgtype"/>
		<param type="int" name="&amp;msgtype"/>
		<param type="int" name="maxsize"/>
		<param type="mixed" name="message"/>
	</params>
</keyword>
<keyword name="msg_remove_queue" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_remove_queue</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_remove_queue()</strong></span> destroys the message queue specified   by the <code class="parameter">queue</code>.  Only use this function when all   processes have finished working with the message queue and you need to   release the system resources held by it.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
	</params>
</keyword>
<keyword name="msg_send" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_send</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msgtype</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$serialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$blocking</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_send()</strong></span> sends a <code class="parameter">message</code> of type   <code class="parameter">msgtype</code> (which MUST be greater than 0) to   the message queue specified by <code class="parameter">queue</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="msgtype"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="serialize"/>
		<param type="bool" name="blocking"/>
		<param type="int" name="errorcode"/>
	</params>
</keyword>
<keyword name="msg_send" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_send</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msgtype</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$serialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$blocking</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_send()</strong></span> sends a <code class="parameter">message</code> of type   <code class="parameter">msgtype</code> (which MUST be greater than 0) to   the message queue specified by <code class="parameter">queue</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="msgtype"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="serialize"/>
		<param type="bool" name="blocking"/>
	</params>
</keyword>
<keyword name="msg_send" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_send</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msgtype</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$serialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$blocking</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_send()</strong></span> sends a <code class="parameter">message</code> of type   <code class="parameter">msgtype</code> (which MUST be greater than 0) to   the message queue specified by <code class="parameter">queue</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="msgtype"/>
		<param type="mixed" name="message"/>
		<param type="bool" name="serialize"/>
	</params>
</keyword>
<keyword name="msg_send" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_send</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$msgtype</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$message</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$serialize</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$blocking</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errorcode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_send()</strong></span> sends a <code class="parameter">message</code> of type   <code class="parameter">msgtype</code> (which MUST be greater than 0) to   the message queue specified by <code class="parameter">queue</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="int" name="msgtype"/>
		<param type="mixed" name="message"/>
	</params>
</keyword>
<keyword name="msg_set_queue" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msg_set_queue</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_set_queue()</strong></span> allows you to change the values of the   msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the   underlying message queue data structure.  </p>  <p class="para">   Changing the data structure will require that PHP be running as the same   user that created the queue, owns the queue (as determined by the   existing msg_perm.xxx fields), or be running with root privileges.   root privileges are required to raise the msg_qbytes values above the   system defined limit.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
		<param type="array" name="data"/>
	</params>
</keyword>
<keyword name="msg_stat_queue" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>msg_stat_queue</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$queue</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msg_stat_queue()</strong></span> returns the message queue meta data   for the message queue specified by the <code class="parameter">queue</code>.   This is useful, for example, to determine which process sent the message   that was just received.  </p>]]></desc>
	<params>
		<param type="resource" name="queue"/>
	</params>
</keyword>
<keyword name="msql_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>msql_affected_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns number of affected rows by the last SELECT, UPDATE or DELETE   query associated with <code class="parameter">result</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_close()</strong></span> closes the non-persistent connection to    the mSQL server that&#039;s associated with the specified link identifier.  </p>  <p class="para">   Using <span class="function"><strong>msql_close()</strong></span> isn&#039;t usually necessary, as   non-persistent open links are automatically closed at the end of the    script&#039;s execution. See also <a href="language.types.resource.php#language.types.resource.self-destruct" class="link">freeing resources</a>.  </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_close()</strong></span> closes the non-persistent connection to    the mSQL server that&#039;s associated with the specified link identifier.  </p>  <p class="para">   Using <span class="function"><strong>msql_close()</strong></span> isn&#039;t usually necessary, as   non-persistent open links are automatically closed at the end of the    script&#039;s execution. See also <a href="language.types.resource.php#language.types.resource.self-destruct" class="link">freeing resources</a>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="msql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_connect()</strong></span> establishes a connection to a mSQL    server.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>msql_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the    link identifier of the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of the    script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="msql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_connect()</strong></span> establishes a connection to a mSQL    server.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>msql_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the    link identifier of the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of the    script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="msql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_connect()</strong></span> establishes a connection to a mSQL    server.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>msql_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the    link identifier of the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of the    script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
	</params>
</keyword>
<keyword name="msql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_connect()</strong></span> establishes a connection to a mSQL    server.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>msql_connect()</strong></span> with   the same arguments, no new link will be established, but instead, the    link identifier of the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of the    script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="msql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>msql_create_db</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>    [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_create_db()</strong></span> attempts to create a new database on    the mSQL server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>msql_create_db</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>    [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_create_db()</strong></span> attempts to create a new database on    the mSQL server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="msql_data_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_data_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_data_seek()</strong></span> moves the internal row   pointer of the mSQL result associated with the specified query   identifier to point to the specified row number.  The next call   to <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span> would return that   row.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="row_number"/>
	</params>
</keyword>
<keyword name="msql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_db_query()</strong></span> selects a database and executes a query   on it.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_db_query()</strong></span> selects a database and executes a query   on it.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="msql_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_drop_db()</strong></span> attempts to drop (remove) a database   from the mSQL server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_drop_db()</strong></span> attempts to drop (remove) a database   from the mSQL server.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="msql_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_error</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_error()</strong></span> returns the last issued error by the mSQL   server. Note that only the last error message is accessible with    <span class="function"><strong>msql_error()</strong></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="msql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>msql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices of the result array, it also stores   the data in associative indices, using the field names as keys.  </p>  <p class="para">    An important thing to note is that using   <span class="function"><strong>msql_fetch_array()</strong></span> is NOT significantly slower   than using <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>, while it provides   a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="msql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>msql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices of the result array, it also stores   the data in associative indices, using the field names as keys.  </p>  <p class="para">    An important thing to note is that using   <span class="function"><strong>msql_fetch_array()</strong></span> is NOT significantly slower   than using <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>, while it provides   a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>msql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">     <span class="function"><strong>msql_fetch_field()</strong></span> can be used in order to obtain    information about fields in a certain query result.    </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="msql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>msql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">     <span class="function"><strong>msql_fetch_field()</strong></span> can be used in order to obtain    information about fields in a certain query result.    </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>msql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>      )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>    <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="resource" name="result_type"/>
	</params>
</keyword>
<keyword name="msql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>msql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>      )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>    <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>msql_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>      )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_fetch_row()</strong></span> fetches one row of data from   the result associated with the specified query identifier.  The   row is returned as an array.  Each result column is stored in an   array offset, starting at offset 0.  </p>    <p class="para">    Subsequent call to <span class="function"><strong>msql_fetch_row()</strong></span> would   return the next row in the result set, or <strong><code>FALSE</code></strong> if there are no   more rows.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_field_flags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_field_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_field_flags()</strong></span> returns the field flags of   the specified field.   </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="msql_field_len" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>msql_field_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_field_len()</strong></span> returns the length of the specified    field.  </p>]]></desc>
	<params>
		<param type="int" name="query"/>
		<param type="int" name="field_offet"/>
	</params>
</keyword>
<keyword name="msql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_field_name()</strong></span> gets the name of the specified field   index.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="msql_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset. If the next call to   <span class="function"><a href="function.msql-fetch-field.php" class="function">msql_fetch_field()</a></span> won&#039;t include a field offset, this    field would be returned.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="msql_field_table" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>msql_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Returns the name of the table that the specified field is in.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="msql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_field_type()</strong></span> gets the type of the specified field   index.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="msql_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_free_result()</strong></span> frees the memory associated   with <code class="parameter">query_identifier</code>.  When PHP completes a   request, this memory is freed automatically, so you only need to   call this function when you want to make sure you don&#039;t use too   much memory while the script is running.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><a href="function.msql-list-tables.php" class="function">msql_list_tables()</a></span> lists the databases available on the   specified <code class="parameter">link_identifier</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><a href="function.msql-list-tables.php" class="function">msql_list_tables()</a></span> lists the databases available on the   specified <code class="parameter">link_identifier</code>.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="msql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$tablename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_list_fields()</strong></span> returns information about the given table.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$tablename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_list_fields()</strong></span> returns information about the given table.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
	</params>
</keyword>
<keyword name="msql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_list_tables()</strong></span> lists the tables on the specified   <code class="parameter">database</code>.   </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_list_tables()</strong></span> lists the tables on the specified   <code class="parameter">database</code>.   </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="msql_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>msql_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_num_fields()</strong></span> returns the number of fields   in a result set.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>msql_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$query_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_num_rows()</strong></span> returns the number of rows in   a result set.  </p>]]></desc>
	<params>
		<param type="resource" name="query"/>
	</params>
</keyword>
<keyword name="msql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.msql-connect.php" class="function">msql_connect()</a></span> with two major differences.  </p>  <p class="para">    First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host.   If one is found, an identifier for it will be returned instead of opening   a new connection.  </p>  <p class="para">    Second, the connection to the SQL server will not be closed when the    execution of the script ends.  Instead, the link will remain open for   future use (<span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span> will not close links    established by this function).  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="msql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.msql-connect.php" class="function">msql_connect()</a></span> with two major differences.  </p>  <p class="para">    First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host.   If one is found, an identifier for it will be returned instead of opening   a new connection.  </p>  <p class="para">    Second, the connection to the SQL server will not be closed when the    execution of the script ends.  Instead, the link will remain open for   future use (<span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span> will not close links    established by this function).  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="msql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.msql-connect.php" class="function">msql_connect()</a></span> with two major differences.  </p>  <p class="para">    First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host.   If one is found, an identifier for it will be returned instead of opening   a new connection.  </p>  <p class="para">    Second, the connection to the SQL server will not be closed when the    execution of the script ends.  Instead, the link will remain open for   future use (<span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span> will not close links    established by this function).  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
	</params>
</keyword>
<keyword name="msql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.msql-connect.php" class="function">msql_connect()</a></span> with two major differences.  </p>  <p class="para">    First, when connecting, the function would first try to find a    (persistent) link that&#039;s already open with the same host.   If one is found, an identifier for it will be returned instead of opening   a new connection.  </p>  <p class="para">    Second, the connection to the SQL server will not be closed when the    execution of the script ends.  Instead, the link will remain open for   future use (<span class="function"><a href="function.msql-close.php" class="function">msql_close()</a></span> will not close links    established by this function).  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="msql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_query()</strong></span> sends a query to the currently active    database on the server that&#039;s associated with the specified link    identifier.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>msql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>msql_query()</strong></span> sends a query to the currently active    database on the server that&#039;s associated with the specified link    identifier.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="msql_result" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_result()</strong></span> returns the contents of one cell from a    mSQL result set.    </p>  <p class="para">    When working on large result sets, you should consider using one of the    functions that fetch an entire row (specified below). As these functions   return the contents of multiple cells in one function call, they are often   much quicker than <span class="function"><strong>msql_result()</strong></span>.    </p>  <p class="para">    Recommended high-performance alternatives:   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>,   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, and   <span class="function"><a href="function.msql-fetch-object.php" class="function">msql_fetch_object()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="query"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="msql_result" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>msql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>msql_result()</strong></span> returns the contents of one cell from a    mSQL result set.    </p>  <p class="para">    When working on large result sets, you should consider using one of the    functions that fetch an entire row (specified below). As these functions   return the contents of multiple cells in one function call, they are often   much quicker than <span class="function"><strong>msql_result()</strong></span>.    </p>  <p class="para">    Recommended high-performance alternatives:   <span class="function"><a href="function.msql-fetch-row.php" class="function">msql_fetch_row()</a></span>,   <span class="function"><a href="function.msql-fetch-array.php" class="function">msql_fetch_array()</a></span>, and   <span class="function"><a href="function.msql-fetch-object.php" class="function">msql_fetch_object()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="query"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="msql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">     <span class="function"><strong>msql_select_db()</strong></span> sets the current active database on    the server that&#039;s associated with the specified   <code class="parameter">link_identifier</code>.  </p>  <p class="para">    Subsequent calls to <span class="function"><a href="function.msql-query.php" class="function">msql_query()</a></span> will be made on the   active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="link_identifier"/>
	</params>
</keyword>
<keyword name="msql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>msql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">     <span class="function"><strong>msql_select_db()</strong></span> sets the current active database on    the server that&#039;s associated with the specified   <code class="parameter">link_identifier</code>.  </p>  <p class="para">    Subsequent calls to <span class="function"><a href="function.msql-query.php" class="function">msql_query()</a></span> will be made on the   active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mssql_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$param_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$var</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_output</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_null</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code><span class="initializer"> = -1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Binds a parameter to a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="param_name"/>
		<param type="mixed" name="var"/>
		<param type="int" name="type"/>
		<param type="int" name="is_output"/>
		<param type="int" name="is_null"/>
		<param type="int" name="maxlen"/>
	</params>
</keyword>
<keyword name="mssql_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$param_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$var</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_output</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_null</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code><span class="initializer"> = -1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Binds a parameter to a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="param_name"/>
		<param type="mixed" name="var"/>
		<param type="int" name="type"/>
		<param type="int" name="is_output"/>
		<param type="int" name="is_null"/>
	</params>
</keyword>
<keyword name="mssql_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$param_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$var</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_output</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_null</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code><span class="initializer"> = -1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Binds a parameter to a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="param_name"/>
		<param type="mixed" name="var"/>
		<param type="int" name="type"/>
		<param type="int" name="is_output"/>
	</params>
</keyword>
<keyword name="mssql_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$param_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$var</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_output</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_null</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlen</code><span class="initializer"> = -1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Binds a parameter to a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="param_name"/>
		<param type="mixed" name="var"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="mssql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the link to a MS SQL Server database that&#039;s associated with the   specified link identifier.  If the link identifier isn&#039;t specified, the   last opened link is assumed.  </p>  <p class="para">   Note that this isn&#039;t usually necessary, as non-persistent open   links are automatically closed at the end of the script&#039;s   execution.  </p>]]></desc>
	<params>
		<param type="resource" name="conn_id"/>
	</params>
</keyword>
<keyword name="mssql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Closes the link to a MS SQL Server database that&#039;s associated with the   specified link identifier.  If the link identifier isn&#039;t specified, the   last opened link is assumed.  </p>  <p class="para">   Note that this isn&#039;t usually necessary, as non-persistent open   links are automatically closed at the end of the script&#039;s   execution.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mssql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_connect()</strong></span> establishes a connection to a   MS SQL server.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="bool" name="new_link"/>
	</params>
</keyword>
<keyword name="mssql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_connect()</strong></span> establishes a connection to a   MS SQL server.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="mssql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_connect()</strong></span> establishes a connection to a   MS SQL server.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mssql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_connect()</strong></span> establishes a connection to a   MS SQL server.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
	</params>
</keyword>
<keyword name="mssql_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_connect()</strong></span> establishes a connection to a   MS SQL server.  </p>  <p class="para">   The link to the server will be closed as soon as the execution of   the script ends, unless it&#039;s closed earlier by explicitly calling   <span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mssql_data_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_data_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_data_seek()</strong></span> moves the internal row   pointer of the MS SQL result associated with the specified result   identifier to point to the specified row number, first row being   number 0. The next call to <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span>   would return that row.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mssql_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$skip_results</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Executes a stored procedure on a MS SQL server database  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="bool" name="skip_results"/>
	</params>
</keyword>
<keyword name="mssql_execute" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mssql_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$skip_results</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Executes a stored procedure on a MS SQL server database  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="mssql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mssql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = MSSQL_BOTH</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices of the result array, it also stores   the data in associative indices, using the field names as keys.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>mssql_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="mssql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mssql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = MSSQL_BOTH</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices of the result array, it also stores   the data in associative indices, using the field names as keys.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>mssql_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mssql_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Returns an associative array that corresponds to the fetched row and moves   the internal data pointer ahead. <span class="function"><strong>mssql_fetch_assoc()</strong></span> is   equivalent to calling <span class="function"><a href="function.mssql-fetch-array.php" class="function">mssql_fetch_array()</a></span> with   <strong><code>MSSQL_ASSOC</code></strong> for the optional second parameter.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_fetch_batch" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_fetch_batch</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns the next batch of records.  </p>]]></desc>
	<params>
		<param type="resource" name="result_index"/>
	</params>
</keyword>
<keyword name="mssql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mssql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_field()</strong></span> can be used in order to   obtain information about fields in a certain query result.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mssql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_field()</strong></span> can be used in order to   obtain information about fields in a certain query result.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mssql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.mssql-fetch-array.php" class="function">mssql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>  <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.mssql-fetch-array.php" class="function">mssql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="mssql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mssql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.mssql-fetch-array.php" class="function">mssql_fetch_array()</a></span>, with one difference - an   object is returned, instead of an array.  Indirectly, that means   that you can only access the data by the field names, and not by   their offsets (numbers are illegal property names).  </p>  <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.mssql-fetch-array.php" class="function">mssql_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.mssql-fetch-row.php" class="function">mssql_fetch_row()</a></span> (the difference is   insignificant).  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mssql_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_fetch_row()</strong></span> fetches one row of data from   the result associated with the specified result identifier.  The   row is returned as an array.  Each result column is stored in an   array offset, starting at offset 0.  </p>  <p class="para">   Subsequent call to <span class="function"><strong>mssql_fetch_row()</strong></span> would   return the next row in the result set, or <strong><code>FALSE</code></strong> if there are no   more rows.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_field_length" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_field_length</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the length of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_field_length" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_field_length</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the length of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the name of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset.  If the next call to   <span class="function"><a href="function.mssql-fetch-field.php" class="function">mssql_fetch_field()</a></span> won&#039;t include a field   offset, this field would be returned.  </p>]]></desc>
	<params>
		<param type="int" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the type of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mssql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the type of field no. <code class="parameter">offset</code> in    <code class="parameter">result</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_free_result()</strong></span> only needs to be called   if you are worried about using too much memory while your script   is running. All result memory will automatically be freed when   the script ends. You may call <span class="function"><strong>mssql_free_result()</strong></span>   with the result identifier as an argument and the associated   result memory will be freed.  </p>]]></desc>
	<params>
		<param type="resource" name="result_index"/>
	</params>
</keyword>
<keyword name="mssql_free_statement" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_free_statement</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_free_statement()</strong></span> only needs to be called   if you are worried about using too much memory while your script   is running. All statement memory will automatically be freed when   the script ends. You may call <span class="function"><strong>mssql_free_statement()</strong></span>   with the statement identifier as an argument and the associated   statement memory will be freed.  </p>]]></desc>
	<params>
		<param type="resource" name="result_index"/>
	</params>
</keyword>
<keyword name="mssql_get_last_message" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_get_last_message</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the last message from the MS-SQL server  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mssql_guid_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_guid_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$binary</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$short_format</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts a 16 byte binary GUID to a string.  </p>]]></desc>
	<params>
		<param type="string" name="binary"/>
		<param type="int" name="short_format"/>
	</params>
</keyword>
<keyword name="mssql_guid_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_guid_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$binary</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$short_format</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts a 16 byte binary GUID to a string.  </p>]]></desc>
	<params>
		<param type="string" name="binary"/>
	</params>
</keyword>
<keyword name="mssql_init" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$sp_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Initializes a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="string" name="sp_name"/>
		<param type="resource" name="conn_id"/>
	</params>
</keyword>
<keyword name="mssql_init" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_init</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$sp_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   Initializes a stored procedure or a remote stored procedure.  </p>]]></desc>
	<params>
		<param type="string" name="sp_name"/>
	</params>
</keyword>
<keyword name="mssql_min_error_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mssql_min_error_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   Sets the minimum error severity.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="mssql_min_message_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mssql_min_message_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   Sets the minimum message severity.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="mssql_next_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_next_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   When sending more than one SQL statement to the server or   executing a stored procedure with multiple results, it will cause   the server to return multiple result sets. This function will   test for additional results available form the server. If an   additional result set exists it will free the existing result set   and prepare to fetch the rows from the new result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="mssql_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_num_fields()</strong></span> returns the number of   fields in a result set.  </p>]]></desc>
	<params>
		<param type="resource" name="mssql_result_index"/>
	</params>
</keyword>
<keyword name="mssql_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_num_rows()</strong></span> returns the number of rows in   a result set.  </p>]]></desc>
	<params>
		<param type="resource" name="mssql_result_index"/>
	</params>
</keyword>
<keyword name="mssql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mssql-connect.php" class="function">mssql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span> will not   close links established by <span class="function"><strong>mssql_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="bool" name="new_link"/>
	</params>
</keyword>
<keyword name="mssql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mssql-connect.php" class="function">mssql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span> will not   close links established by <span class="function"><strong>mssql_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="mssql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mssql-connect.php" class="function">mssql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span> will not   close links established by <span class="function"><strong>mssql_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mssql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mssql-connect.php" class="function">mssql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span> will not   close links established by <span class="function"><strong>mssql_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="servername"/>
	</params>
</keyword>
<keyword name="mssql_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mssql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mssql-connect.php" class="function">mssql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mssql-close.php" class="function">mssql_close()</a></span> will not   close links established by <span class="function"><strong>mssql_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mssql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mssql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_query()</strong></span> sends a query to the currently active   database on the server that&#039;s associated with the specified link   identifier.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="conn_id"/>
		<param type="int" name="batch_size"/>
	</params>
</keyword>
<keyword name="mssql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mssql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_query()</strong></span> sends a query to the currently active   database on the server that&#039;s associated with the specified link   identifier.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="conn_id"/>
	</params>
</keyword>
<keyword name="mssql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mssql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$batch_size</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_query()</strong></span> sends a query to the currently active   database on the server that&#039;s associated with the specified link   identifier.   </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mssql_result" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mssql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_result()</strong></span> returns the contents of one cell from a   MS SQL result set.   </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="mssql_rows_affected" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mssql_rows_affected</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of records affected by the last write query.  </p>]]></desc>
	<params>
		<param type="resource" name="conn_id"/>
	</params>
</keyword>
<keyword name="mssql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_select_db()</strong></span> sets the current active   database on the server that&#039;s associated with the specified link   identifier.  </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.mssql-query.php" class="function">mssql_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="resource" name="conn_id"/>
	</params>
</keyword>
<keyword name="mssql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mssql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mssql_select_db()</strong></span> sets the current active   database on the server that&#039;s associated with the specified link   identifier.  </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.mssql-query.php" class="function">mssql_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mt_getrandmax" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">int</span> <span class="methodname"><strong>mt_getrandmax</strong></span>     ( <span class="methodparam">void</span>    )</div>  <p class="simpara">   Returns the maximum value that can be returned by a call to   <span class="function"><a href="function.mt-rand.php" class="function">mt_rand()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mt_rand" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>   )</div>  <p class="simpara">   Many random number generators of older libcs have dubious or   unknown characteristics and are slow. By default, PHP uses the   libc random number generator with the <span class="function"><a href="function.rand.php" class="function">rand()</a></span>   function.  The <span class="function"><strong>mt_rand()</strong></span> function is a drop-in   replacement for this.  It uses a random number generator with   known characteristics using the <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;   Mersenne Twister</a>, which will produce random numbers four times   faster than what the average libc rand() provides.  </p>  <p class="simpara">   If called without the optional <code class="parameter">min</code>,   <code class="parameter">max</code> arguments <span class="function"><strong>mt_rand()</strong></span>   returns a pseudo-random value between 0 and   <span class="function"><a href="function.mt-getrandmax.php" class="function">mt_getrandmax()</a></span>.  If you want a random number   between 5 and 15 (inclusive), for example, use <em>mt_rand(5,   15)</em>.  </p>]]></desc>
	<params>
		<param type="int" name="min"/>
		<param type="int" name="max"/>
	</params>
</keyword>
<keyword name="mt_rand" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mt_rand</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>   )</div>  <p class="simpara">   Many random number generators of older libcs have dubious or   unknown characteristics and are slow. By default, PHP uses the   libc random number generator with the <span class="function"><a href="function.rand.php" class="function">rand()</a></span>   function.  The <span class="function"><strong>mt_rand()</strong></span> function is a drop-in   replacement for this.  It uses a random number generator with   known characteristics using the <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" class="link external">&raquo;&nbsp;   Mersenne Twister</a>, which will produce random numbers four times   faster than what the average libc rand() provides.  </p>  <p class="simpara">   If called without the optional <code class="parameter">min</code>,   <code class="parameter">max</code> arguments <span class="function"><strong>mt_rand()</strong></span>   returns a pseudo-random value between 0 and   <span class="function"><a href="function.mt-getrandmax.php" class="function">mt_getrandmax()</a></span>.  If you want a random number   between 5 and 15 (inclusive), for example, use <em>mt_rand(5,   15)</em>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mt_srand" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mt_srand</strong></span>     ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>   ] )</div>  <p class="para rdfs-comment">   Seeds the random number generator with   <code class="parameter">seed</code> or with a random value   if no <code class="parameter">seed</code> is given.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">As of PHP 4.2.0, there is no needto seed the random number generator with <span class="function"><a href="function.srand.php" class="function">srand()</a></span> or<span class="function"><strong>mt_srand()</strong></span> as this is now done automatically.</span></p></blockquote>]]></desc>
	<params>
		<param type="int" name="seed"/>
	</params>
</keyword>
<keyword name="mt_srand" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mt_srand</strong></span>     ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>   ] )</div>  <p class="para rdfs-comment">   Seeds the random number generator with   <code class="parameter">seed</code> or with a random value   if no <code class="parameter">seed</code> is given.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">As of PHP 4.2.0, there is no needto seed the random number generator with <span class="function"><a href="function.srand.php" class="function">srand()</a></span> or<span class="function"><strong>mt_srand()</strong></span> as this is now done automatically.</span></p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Get the number of affected rows by the last INSERT, UPDATE, REPLACE    or DELETE query associated with <code class="parameter">link_identifier</code>.    </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Get the number of affected rows by the last INSERT, UPDATE, REPLACE    or DELETE query associated with <code class="parameter">link_identifier</code>.    </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_client_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_client_encoding</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the <em>character_set</em> variable from MySQL.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_client_encoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_client_encoding</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the <em>character_set</em> variable from MySQL.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>mysql_close()</strong></span> closes the non-persistent connection to    the MySQL server that&#039;s associated with the specified link identifier. If    <code class="parameter">link_identifier</code> isn&#039;t specified, the last opened    link is used.  </p>  <p class="para">   Using <span class="function"><strong>mysql_close()</strong></span> isn&#039;t usually necessary,   as non-persistent open links are automatically closed at the end   of the script&#039;s execution. See also   <a href="language.types.resource.php#language.types.resource.self-destruct" class="link">freeing   resources</a>.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">    <span class="function"><strong>mysql_close()</strong></span> closes the non-persistent connection to    the MySQL server that&#039;s associated with the specified link identifier. If    <code class="parameter">link_identifier</code> isn&#039;t specified, the last opened    link is used.  </p>  <p class="para">   Using <span class="function"><strong>mysql_close()</strong></span> isn&#039;t usually necessary,   as non-persistent open links are automatically closed at the end   of the script&#039;s execution. See also   <a href="language.types.resource.php#language.types.resource.self-destruct" class="link">freeing   resources</a>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="bool" name="new_link"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="bool" name="new_link"/>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
		<param type="string" name="server"/>
	</params>
</keyword>
<keyword name="mysql_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new_link</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Opens or reuses a connection to a MySQL server.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_create_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_create_db()</strong></span> attempts to create a new   database on the server associated with the specified link   identifier.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_create_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_create_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_create_db()</strong></span> attempts to create a new   database on the server associated with the specified link   identifier.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mysql_data_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_data_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_data_seek()</strong></span> moves the internal row   pointer of the MySQL result associated with the specified result   identifier to point to the specified row number.  The next call   to a MySQL fetch function, such as <span class="function"><a href="function.mysql-fetch-assoc.php" class="function">mysql_fetch_assoc()</a></span>,   would return that row.  </p>  <p class="para">   <code class="parameter">row_number</code> starts at 0. The    <code class="parameter">row_number</code> should be a value in the range from 0 to   <span class="function"><a href="function.mysql-num-rows.php" class="function">mysql_num_rows()</a></span> - 1. However if the result set    is empty (<span class="function"><a href="function.mysql-num-rows.php" class="function">mysql_num_rows()</a></span> == 0), a seek to 0 will    fail with a <a href="" class="link">E_WARNING</a> and    <span class="function"><strong>mysql_data_seek()</strong></span> will return <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row_number"/>
	</params>
</keyword>
<keyword name="mysql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_db_query()</strong></span> selects a database, and executes a    query on it.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_db_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_db_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_db_query()</strong></span> selects a database, and executes a    query on it.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysql_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_drop_db()</strong></span> attempts to drop (remove) an   entire database from the server associated with the specified   link identifier. This function is deprecated, it is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an sql    <em>DROP DATABASE</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_drop_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_drop_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_drop_db()</strong></span> attempts to drop (remove) an   entire database from the server associated with the specified   link identifier. This function is deprecated, it is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an sql    <em>DROP DATABASE</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mysql_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_errno</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error number from the last MySQL function.   </p>  <p class="para">   Errors coming back from the MySQL database backend no longer   issue warnings. Instead, use <span class="function"><strong>mysql_errno()</strong></span> to   retrieve the error code. Note that this function only returns the   error code from the most recently executed MySQL function (not   including <span class="function"><a href="function.mysql-error.php" class="function">mysql_error()</a></span> and   <span class="function"><strong>mysql_errno()</strong></span>), so if you want to use it,   make sure you check the value before calling another MySQL   function.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_errno" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_errno</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error number from the last MySQL function.   </p>  <p class="para">   Errors coming back from the MySQL database backend no longer   issue warnings. Instead, use <span class="function"><strong>mysql_errno()</strong></span> to   retrieve the error code. Note that this function only returns the   error code from the most recently executed MySQL function (not   including <span class="function"><a href="function.mysql-error.php" class="function">mysql_error()</a></span> and   <span class="function"><strong>mysql_errno()</strong></span>), so if you want to use it,   make sure you check the value before calling another MySQL   function.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error text from the last MySQL function.   Errors coming back from the MySQL database backend no longer   issue warnings. Instead, use <span class="function"><strong>mysql_error()</strong></span> to   retrieve the error text. Note that this function only returns the   error text from the most recently executed MySQL function (not   including <span class="function"><strong>mysql_error()</strong></span> and   <span class="function"><a href="function.mysql-errno.php" class="function">mysql_errno()</a></span>), so if you want to use it, make   sure you check the value before calling another MySQL function.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the error text from the last MySQL function.   Errors coming back from the MySQL database backend no longer   issue warnings. Instead, use <span class="function"><strong>mysql_error()</strong></span> to   retrieve the error text. Note that this function only returns the   error text from the most recently executed MySQL function (not   including <span class="function"><strong>mysql_error()</strong></span> and   <span class="function"><a href="function.mysql-errno.php" class="function">mysql_errno()</a></span>), so if you want to use it, make   sure you check the value before calling another MySQL function.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_escape_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$unescaped_string</code></span>   )</div>  <p class="para rdfs-comment">   This function will escape the <code class="parameter">unescaped_string</code>,   so that it is safe to place it in a <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span>.   This function is deprecated.  </p>  <p class="para">   This function is identical to <span class="function"><a href="function.mysql-real-escape-string.php" class="function">mysql_real_escape_string()</a></span>    except that <span class="function"><a href="function.mysql-real-escape-string.php" class="function">mysql_real_escape_string()</a></span> takes a    connection handler and escapes the string according to the current    character set. <span class="function"><strong>mysql_escape_string()</strong></span> does not take a   connection argument and does not respect the current charset setting.    </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="to_be_escaped"/>
	</params>
</keyword>
<keyword name="mysql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mysql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = MYSQL_BOTH</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array that corresponds to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="mysql_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mysql_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = MYSQL_BOTH</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array that corresponds to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mysql_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns an associative array that corresponds to the fetched row   and moves the internal data pointer ahead.   <span class="function"><strong>mysql_fetch_assoc()</strong></span> is equivalent to calling   <span class="function"><a href="function.mysql-fetch-array.php" class="function">mysql_fetch_array()</a></span> with MYSQL_ASSOC for the   optional second parameter. It only returns an associative array.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mysql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an object containing field information. This function can be used    to obtain information about fields in the provided query result.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mysql_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns an object containing field information. This function can be used    to obtain information about fields in the provided query result.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_fetch_lengths" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mysql_fetch_lengths</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns an array that corresponds to the lengths of each field   in the last row fetched by MySQL.  </p>  <p class="para">   <span class="function"><strong>mysql_fetch_lengths()</strong></span> stores the lengths of   each result column in the last row returned by   <span class="function"><a href="function.mysql-fetch-row.php" class="function">mysql_fetch_row()</a></span>,   <span class="function"><a href="function.mysql-fetch-assoc.php" class="function">mysql_fetch_assoc()</a></span>,   <span class="function"><a href="function.mysql-fetch-array.php" class="function">mysql_fetch_array()</a></span>, and   <span class="function"><a href="function.mysql-fetch-object.php" class="function">mysql_fetch_object()</a></span> in an array, starting at   offset 0.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mysql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an object with properties that correspond to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="class_name"/>
		<param type="NULL|array" name="ctor_params"/>
	</params>
</keyword>
<keyword name="mysql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mysql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an object with properties that correspond to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="mysql_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>mysql_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an object with properties that correspond to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>mysql_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Returns a numerical array that corresponds to the fetched row   and moves the internal data pointer ahead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_field_flags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_field_flags</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_field_flags()</strong></span> returns the field flags of   the specified field. The flags are reported as a single word   per flag separated by a single space, so that you can split the   returned value using <span class="function"><a href="function.explode.php" class="function">explode()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_field_len" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_field_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_field_len()</strong></span> returns the length of the   specified field.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_field_name()</strong></span> returns the name of the   specified field index.   </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="mysql_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset.  If the next call to   <span class="function"><a href="function.mysql-fetch-field.php" class="function">mysql_fetch_field()</a></span> doesn&#039;t include a field   offset, the field offset specified in   <span class="function"><strong>mysql_field_seek()</strong></span> will be returned.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_field_table" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Returns the name of the table that the specified field is in.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_field_type()</strong></span> is similar to the   <span class="function"><a href="function.mysql-field-name.php" class="function">mysql_field_name()</a></span> function. The arguments are   identical, but the field type is returned instead.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_offset"/>
	</params>
</keyword>
<keyword name="mysql_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_free_result()</strong></span> will free all memory   associated with the result identifier <code class="parameter">result</code>.  </p>  <p class="para">   <span class="function"><strong>mysql_free_result()</strong></span> only needs to be called if   you are concerned about how much memory is being used for queries   that return large result sets.  All associated result memory is   automatically freed at the end of the script&#039;s execution.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_get_client_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_get_client_info</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_get_client_info()</strong></span> returns a string that   represents the client library version.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysql_get_host_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_get_host_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Describes the type of connection in use for the connection, including the   server host name.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_get_host_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_get_host_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Describes the type of connection in use for the connection, including the   server host name.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_get_proto_info" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_get_proto_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the MySQL protocol.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_get_proto_info" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_get_proto_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the MySQL protocol.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_get_server_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_get_server_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the MySQL server version.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_get_server_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_get_server_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the MySQL server version.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns detailed information about the last query.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_info" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_info</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns detailed information about the last query.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_insert_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_insert_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the ID generated for an AUTO_INCREMENT column by the previous    query (usually INSERT).  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_insert_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_insert_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the ID generated for an AUTO_INCREMENT column by the previous    query (usually INSERT).  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns a result pointer containing the databases available from the    current mysql daemon.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.4.0.  Relyingon this function is highly discouraged.</p></div>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_list_dbs" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_dbs</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns a result pointer containing the databases available from the    current mysql daemon.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been <em class="emphasis">DEPRECATED</em> as of PHP 5.4.0.  Relyingon this function is highly discouraged.</p></div>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about the given table name.  </p>  <p class="para">   This function is deprecated. It is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an SQL <em>SHOW COLUMNS FROM    table [LIKE &#039;name&#039;]</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_list_fields" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_fields</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about the given table name.  </p>  <p class="para">   This function is deprecated. It is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an SQL <em>SHOW COLUMNS FROM    table [LIKE &#039;name&#039;]</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="string" name="table_name"/>
	</params>
</keyword>
<keyword name="mysql_list_processes" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_processes</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the current MySQL server threads.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_list_processes" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_processes</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the current MySQL server threads.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves a list of table names from a MySQL database.  </p>  <p class="para">   This function is deprecated. It is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an SQL <em>SHOW TABLES    [FROM db_name] [LIKE &#039;pattern&#039;]</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_list_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_list_tables</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves a list of table names from a MySQL database.  </p>  <p class="para">   This function is deprecated. It is preferable to use    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> to issue an SQL <em>SHOW TABLES    [FROM db_name] [LIKE &#039;pattern&#039;]</em> statement instead.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mysql_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves the number of fields from a query.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves the number of rows from a result set. This command is only valid    for statements like SELECT or SHOW that return an actual result set.    To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or    DELETE query, use <span class="function"><a href="function.mysql-affected-rows.php" class="function">mysql_affected_rows()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="mysql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]] )</div>    <p class="para rdfs-comment">   Establishes a persistent connection to a MySQL server.  </p>    <p class="para">   <span class="function"><strong>mysql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mysql-connect.php" class="function">mysql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mysql-close.php" class="function">mysql_close()</a></span> will not   close links established by <span class="function"><strong>mysql_pconnect()</strong></span>).  </p>  <p class="para">   This type of link is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="mysql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]] )</div>    <p class="para rdfs-comment">   Establishes a persistent connection to a MySQL server.  </p>    <p class="para">   <span class="function"><strong>mysql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mysql-connect.php" class="function">mysql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mysql-close.php" class="function">mysql_close()</a></span> will not   close links established by <span class="function"><strong>mysql_pconnect()</strong></span>).  </p>  <p class="para">   This type of link is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="mysql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]] )</div>    <p class="para rdfs-comment">   Establishes a persistent connection to a MySQL server.  </p>    <p class="para">   <span class="function"><strong>mysql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mysql-connect.php" class="function">mysql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mysql-close.php" class="function">mysql_close()</a></span> will not   close links established by <span class="function"><strong>mysql_pconnect()</strong></span>).  </p>  <p class="para">   This type of link is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mysql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]] )</div>    <p class="para rdfs-comment">   Establishes a persistent connection to a MySQL server.  </p>    <p class="para">   <span class="function"><strong>mysql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mysql-connect.php" class="function">mysql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mysql-close.php" class="function">mysql_close()</a></span> will not   close links established by <span class="function"><strong>mysql_pconnect()</strong></span>).  </p>  <p class="para">   This type of link is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="server"/>
	</params>
</keyword>
<keyword name="mysql_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$server</code><span class="initializer"> = ini_get(&quot;mysql.default_host&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code><span class="initializer"> = ini_get(&quot;mysql.default_user&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code><span class="initializer"> = ini_get(&quot;mysql.default_password&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$client_flags</code><span class="initializer"> = 0</span></span>  ]]]] )</div>    <p class="para rdfs-comment">   Establishes a persistent connection to a MySQL server.  </p>    <p class="para">   <span class="function"><strong>mysql_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.mysql-connect.php" class="function">mysql_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.mysql-close.php" class="function">mysql_close()</a></span> will not   close links established by <span class="function"><strong>mysql_pconnect()</strong></span>).  </p>  <p class="para">   This type of link is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_ping" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_ping</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Checks whether or not the connection to   the server is working. If it has gone down, an automatic reconnection is   attempted. This function can be used by scripts that remain idle for a   long while, to check whether or not the server has closed the connection   and reconnect if necessary.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Automatic reconnection is disabled by default in versions of MySQL &gt;= 5.0.3.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_ping" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_ping</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Checks whether or not the connection to   the server is working. If it has gone down, an automatic reconnection is   attempted. This function can be used by scripts that remain idle for a   long while, to check whether or not the server has closed the connection   and reconnect if necessary.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Automatic reconnection is disabled by default in versions of MySQL &gt;= 5.0.3.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_query()</strong></span> sends a unique query (multiple queries   are not supported) to the currently   active database on the server that&#039;s associated with the   specified <code class="parameter">link_identifier</code>.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysql_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_query()</strong></span> sends a unique query (multiple queries   are not supported) to the currently   active database on the server that&#039;s associated with the   specified <code class="parameter">link_identifier</code>.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysql_real_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_real_escape_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$unescaped_string</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Escapes special characters in the <code class="parameter">unescaped_string</code>,    taking into account the current character set of the connection so that it    is safe to place it in a <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span>. If binary data    is to be inserted, this function must be used.  </p>  <p class="para">   <span class="function"><strong>mysql_real_escape_string()</strong></span> calls MySQL&#039;s library function   mysql_real_escape_string, which prepends backslashes to the following characters:   <em>\x00</em>, <em>\n</em>,   <em>\r</em>, <em>\</em>, <em>&#039;</em>,   <em>&quot;</em> and <em>\x1a</em>.  </p>  <p class="para">   This function must always (with few exceptions) be used to make data   safe before sending a query to MySQL.  </p>    <div class="caution"><strong class="caution">Caution</strong>   <h1 class="title">Security: the default character set</h1>   <p class="para">    The character set must be set either at the server level, or with    the API function <span class="function"><a href="function.mysql-set-charset.php" class="function">mysql_set_charset()</a></span> for it to affect    <span class="function"><strong>mysql_real_escape_string()</strong></span>. See the concepts section    on <a href="mysqlinfo.concepts.charset.php" class="link">character sets</a> for    more information.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="to_be_escaped"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_real_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_real_escape_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$unescaped_string</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Escapes special characters in the <code class="parameter">unescaped_string</code>,    taking into account the current character set of the connection so that it    is safe to place it in a <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span>. If binary data    is to be inserted, this function must be used.  </p>  <p class="para">   <span class="function"><strong>mysql_real_escape_string()</strong></span> calls MySQL&#039;s library function   mysql_real_escape_string, which prepends backslashes to the following characters:   <em>\x00</em>, <em>\n</em>,   <em>\r</em>, <em>\</em>, <em>&#039;</em>,   <em>&quot;</em> and <em>\x1a</em>.  </p>  <p class="para">   This function must always (with few exceptions) be used to make data   safe before sending a query to MySQL.  </p>    <div class="caution"><strong class="caution">Caution</strong>   <h1 class="title">Security: the default character set</h1>   <p class="para">    The character set must be set either at the server level, or with    the API function <span class="function"><a href="function.mysql-set-charset.php" class="function">mysql_set_charset()</a></span> for it to affect    <span class="function"><strong>mysql_real_escape_string()</strong></span>. See the concepts section    on <a href="mysqlinfo.concepts.charset.php" class="link">character sets</a> for    more information.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="to_be_escaped"/>
	</params>
</keyword>
<keyword name="mysql_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the contents of one cell from a MySQL result set.  </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than   <span class="function"><strong>mysql_result()</strong></span>.  Also, note that specifying a   numeric offset for the field argument is much quicker than   specifying a fieldname or tablename.fieldname argument.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="mysql_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the contents of one cell from a MySQL result set.  </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than   <span class="function"><strong>mysql_result()</strong></span>.  Also, note that specifying a   numeric offset for the field argument is much quicker than   specifying a fieldname or tablename.fieldname argument.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="mysql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the current active database on the server that&#039;s associated with the    specified link identifier. Every subsequent call to    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> will be made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the current active database on the server that&#039;s associated with the    specified link identifier. Every subsequent call to    <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> will be made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database_name"/>
	</params>
</keyword>
<keyword name="mysql_set_charset" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_set_charset</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the default character set for the current connection.  </p>]]></desc>
	<params>
		<param type="string" name="csname"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_set_charset" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysql_set_charset</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the default character set for the current connection.  </p>]]></desc>
	<params>
		<param type="string" name="csname"/>
	</params>
</keyword>
<keyword name="mysql_stat" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_stat</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_stat()</strong></span> returns the current server status.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_stat" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysql_stat</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_stat()</strong></span> returns the current server status.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_thread_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_thread_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the current thread ID. If the connection is lost, and a reconnect    with <span class="function"><a href="function.mysql-ping.php" class="function">mysql_ping()</a></span> is executed, the thread ID will    change. This means only retrieve the thread ID when needed.  </p>]]></desc>
	<params>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_thread_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysql_thread_id</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves the current thread ID. If the connection is lost, and a reconnect    with <span class="function"><a href="function.mysql-ping.php" class="function">mysql_ping()</a></span> is executed, the thread ID will    change. This means only retrieve the thread ID when needed.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysql_unbuffered_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_unbuffered_query()</strong></span> sends the SQL query   <code class="parameter">query</code> to MySQL without automatically   fetching and buffering the result rows as   <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> does.  This saves a considerable   amount of memory with SQL queries that produce large result sets,   and you can start working on the result set immediately after the   first row has been retrieved as you don&#039;t have to wait until the   complete SQL query has been performed.  To use   <span class="function"><strong>mysql_unbuffered_query()</strong></span> while multiple database   connections are open, you must specify the optional parameter   <code class="parameter">link_identifier</code> to identify which connection   you want to use.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="int" name="link_identifier"/>
	</params>
</keyword>
<keyword name="mysql_unbuffered_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>mysql_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code><span class="initializer"> = NULL</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysql_unbuffered_query()</strong></span> sends the SQL query   <code class="parameter">query</code> to MySQL without automatically   fetching and buffering the result rows as   <span class="function"><a href="function.mysql-query.php" class="function">mysql_query()</a></span> does.  This saves a considerable   amount of memory with SQL queries that produce large result sets,   and you can start working on the result set immediately after the   first row has been retrieved as you don&#039;t have to wait until the   complete SQL query has been performed.  To use   <span class="function"><strong>mysql_unbuffered_query()</strong></span> while multiple database   connections are open, you must specify the optional parameter   <code class="parameter">link_identifier</code> to identify which connection   you want to use.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_affected_rows" type="function" returnType="mixed">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_autocommit" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::autocommit</strong></span>    ( <span class="methodparam"><span class="type">bool</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_autocommit</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Turns on or off auto-commit mode on queries for the database connection.  </p>  <p class="para">   To determine the current state of autocommit use the SQL command   <em>SELECT @@autocommit</em>.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="bool" name="mode"/>
	</params>
</keyword>
<keyword name="mysqli_change_user" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="mysqli_character_set_name" type="function" returnType="string">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_close" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::close</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_close</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   Closes a previously opened database connection.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_commit" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::commit</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ]] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_commit</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ]] )</div>  <p class="para rdfs-comment">   Commits the current transaction for the database connection.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
		<param type="int" name="port"/>
		<param type="string" name="socket"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="mysqli_connect" type="function" returnType="object">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="mysqli.construct.php" class="methodname">mysqli::__construct()</a></span>  </p> </div>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="mysqli_connect_errno" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_connect_error" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_data_seek" type="function" returnType="bool">
	<params>
		<param type="object" name="result"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mysqli_debug" type="function" returnType="void">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::debug</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_debug</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$message</code></span>   )</div>  <p class="para rdfs-comment">   Performs debugging operations using the Fred Fish debugging library.  </p>]]></desc>
	<params>
		<param type="string" name="debug"/>
	</params>
</keyword>
<keyword name="mysqli_disable_reads_from_master" type="function" returnType="void">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>mysqli::disable_reads_from_master</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_disable_reads_from_master</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_disable_rpl_parse" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_disable_rpl_parse</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_dump_debug_info" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_embedded_server_end" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_embedded_server_start" type="function" returnType="bool">
	<params>
		<param type="bool" name="start"/>
		<param type="array" name="arguments"/>
		<param type="array" name="groups"/>
	</params>
</keyword>
<keyword name="mysqli_enable_reads_from_master" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_enable_reads_from_master</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_enable_rpl_parse" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_enable_rpl_parse</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_errno" type="function" returnType="int">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">int</span> <var class="varname"><a href="mysqli.errno.php">$mysqli-&gt;errno</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysqli_errno</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   Returns the last error code for the most recent MySQLi function call that   can succeed or fail.  </p>  <p class="para">   Client error message numbers are listed in the MySQL    <var class="filename">errmsg.h</var> header file, server error message numbers   are listed in <var class="filename">mysqld_error.h</var>.   In the MySQL source distribution you can find a complete list of error   messages and error numbers in the file    <var class="filename">Docs/mysqld_error.txt</var>.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_error" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">string</span> <var class="varname"><a href="mysqli.error.php">$mysqli-&gt;error</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_error</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   Returns the last error message for the most recent MySQLi function call   that can succeed or fail.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_field_count" type="function" returnType="int">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_field_seek" type="function" returnType="int">
	<params>
		<param type="object" name="result"/>
		<param type="int" name="fieldnr"/>
	</params>
</keyword>
<keyword name="mysqli_field_tell" type="function" returnType="int">
	<params>
		<param type="object" name="result"/>
	</params>
</keyword>
<keyword name="mysqli_free_result" type="function" returnType="void">
	<params>
		<param type="object" name="result"/>
	</params>
</keyword>
<keyword name="mysqli_get_charset" type="function" returnType="object">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_get_client_info" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_get_client_version" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_get_proto_info" type="function" returnType="int">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_get_server_info" type="function" returnType="string">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_get_server_version" type="function" returnType="int">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_get_warnings" type="function" returnType="object">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_info" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">string</span> <var class="varname"><a href="mysqli.info.php">$mysqli-&gt;info</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_info</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>mysqli_info()</strong></span> function returns a string providing   information about the last query executed. The nature of this string is   provided below:  </p>  <p class="para">  <table class="doctable table">   <caption><strong>Possible mysqli_info return values</strong></caption>       <thead>     <tr>      <th>Query type</th>      <th>Example result string</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>INSERT INTO...SELECT...</td>      <td>Records: 100 Duplicates: 0 Warnings: 0</td>     </tr>     <tr>      <td>INSERT INTO...VALUES (...),(...),(...)</td>      <td>Records: 3 Duplicates: 0 Warnings: 0</td>     </tr>     <tr>      <td>LOAD DATA INFILE ...</td>      <td>Records: 1 Deleted: 0 Skipped: 0 Warnings: 0</td>     </tr>     <tr>      <td>ALTER TABLE ...</td>      <td>Records: 3 Duplicates: 0 Warnings: 0</td>     </tr>     <tr>      <td>UPDATE ...</td>      <td>Rows matched: 40 Changed: 40 Warnings: 0</td>     </tr>    </tbody>     </table>  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Queries which do not fall into one of the preceding formats are not supported.    In these situations, <span class="function"><strong>mysqli_info()</strong></span> will return an empty string.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_init" type="function" returnType="resource">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <span class="methodname"><strong>mysqli::init</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <span class="methodname"><strong>mysqli_init</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Allocates or initializes a MYSQL object suitable for   <span class="function"><a href="mysqli.options.php" class="function">mysqli_options()</a></span> and <span class="function"><a href="mysqli.real-connect.php" class="function">mysqli_real_connect()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Any subsequent calls to any mysqli function (except <span class="function"><a href="mysqli.options.php" class="function">mysqli_options()</a></span>)    will fail until <span class="function"><a href="mysqli.real-connect.php" class="function">mysqli_real_connect()</a></span> was called.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_insert_id" type="function" returnType="mixed">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_kill" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::kill</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$processid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_kill</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$processid</code></span>   )</div>  <p class="para rdfs-comment">   This function is used to ask the server to kill a MySQL thread specified   by the <code class="parameter">processid</code> parameter. This value must be   retrieved by calling the <span class="function"><a href="mysqli.thread-id.php" class="function">mysqli_thread_id()</a></span> function.  </p>  <p class="para">   To stop a running query you should use the SQL command   <em>KILL QUERY processid</em>.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="int" name="processid"/>
	</params>
</keyword>
<keyword name="mysqli_master_query" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_master_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_more_results" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_multi_query" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_next_result" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_num_fields" type="function" returnType="int">
	<params>
		<param type="object" name="result"/>
	</params>
</keyword>
<keyword name="mysqli_num_rows" type="function" returnType="mixed">
	<params>
		<param type="object" name="result"/>
	</params>
</keyword>
<keyword name="mysqli_options" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::options</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_options</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Used to set extra connect options and affect behavior for a connection.  </p>  <p class="para">   This function may be called multiple times to set several options.  </p>  <p class="para">   <span class="function"><strong>mysqli_options()</strong></span> should be called after   <span class="function"><a href="mysqli.init.php" class="function">mysqli_init()</a></span> and before   <span class="function"><a href="mysqli.real-connect.php" class="function">mysqli_real_connect()</a></span>.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="int" name="flags"/>
		<param type="mixed" name="values"/>
	</params>
</keyword>
<keyword name="mysqli_ping" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::ping</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_ping</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether the connection to the server is working. If it has gone   down, and global option <a href="mysqli.configuration.php#ini.mysqli.reconnect" class="link">mysqli.reconnect</a> is enabled   an automatic reconnection is attempted.  </p>  <p class="para">   This function can be used by clients that remain idle for a long while,   to check whether the server has closed the connection and reconnect if   necessary.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_prepare" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <span class="methodname"><strong>mysqli::prepare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <span class="methodname"><strong>mysqli_prepare</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   Prepares the SQL query, and returns a statement handle to be used for further   operations on the statement. The query must consist of a single SQL statement.  </p>  <p class="para">   The parameter markers must be bound to application variables using   <span class="function"><a href="mysqli-stmt.bind-param.php" class="function">mysqli_stmt_bind_param()</a></span> and/or    <span class="function"><a href="mysqli-stmt.bind-result.php" class="function">mysqli_stmt_bind_result()</a></span> before executing the   statement or fetching rows.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_query" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysqli::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resultmode</code><span class="initializer"> = MYSQLI_STORE_RESULT</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysqli_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resultmode</code><span class="initializer"> = MYSQLI_STORE_RESULT</span></span>  ] )</div>  <p class="para rdfs-comment">   Performs a <code class="parameter">query</code> against the database.  </p>  <p class="para">   For non-DML queries (not INSERT, UPDATE or DELETE),   this function is similar to calling    <span class="function"><a href="mysqli.real-query.php" class="function">mysqli_real_query()</a></span> followed by either   <span class="function"><a href="mysqli.use-result.php" class="function">mysqli_use_result()</a></span> or    <span class="function"><a href="mysqli.store-result.php" class="function">mysqli_store_result()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    In the case where you pass a statement to    <span class="function"><strong>mysqli_query()</strong></span> that is longer than    <em>max_allowed_packet</em> of the server, the returned    error codes are different depending on whether you are using MySQL    Native Driver (<em>mysqlnd</em>) or MySQL Client Library    (<em>libmysqlclient</em>). The behavior is as follows:   </p>   <ul class="itemizedlist">    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Linux returns an error code of 1153.      The error message means "<span class="quote">got a packet bigger than      <em>max_allowed_packet</em> bytes</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Windows returns an error code 2006.      This error message means "<span class="quote">server has gone away</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>libmysqlclient</em> on all platforms returns an error code      2006. This error message means "<span class="quote">server has gone      away</span>".     </p>    </li>   </ul>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
		<param type="int" name="resultmode"/>
	</params>
</keyword>
<keyword name="mysqli_query" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysqli::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resultmode</code><span class="initializer"> = MYSQLI_STORE_RESULT</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysqli_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$resultmode</code><span class="initializer"> = MYSQLI_STORE_RESULT</span></span>  ] )</div>  <p class="para rdfs-comment">   Performs a <code class="parameter">query</code> against the database.  </p>  <p class="para">   For non-DML queries (not INSERT, UPDATE or DELETE),   this function is similar to calling    <span class="function"><a href="mysqli.real-query.php" class="function">mysqli_real_query()</a></span> followed by either   <span class="function"><a href="mysqli.use-result.php" class="function">mysqli_use_result()</a></span> or    <span class="function"><a href="mysqli.store-result.php" class="function">mysqli_store_result()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    In the case where you pass a statement to    <span class="function"><strong>mysqli_query()</strong></span> that is longer than    <em>max_allowed_packet</em> of the server, the returned    error codes are different depending on whether you are using MySQL    Native Driver (<em>mysqlnd</em>) or MySQL Client Library    (<em>libmysqlclient</em>). The behavior is as follows:   </p>   <ul class="itemizedlist">    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Linux returns an error code of 1153.      The error message means "<span class="quote">got a packet bigger than      <em>max_allowed_packet</em> bytes</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Windows returns an error code 2006.      This error message means "<span class="quote">server has gone away</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>libmysqlclient</em> on all platforms returns an error code      2006. This error message means "<span class="quote">server has gone      away</span>".     </p>    </li>   </ul>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
		<param type="int" name="port"/>
		<param type="string" name="socket"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
		<param type="int" name="port"/>
		<param type="string" name="socket"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="string" name="dbname"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
		<param type="string" name="username"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="hostname"/>
	</params>
</keyword>
<keyword name="mysqli_real_connect" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_real_escape_string" type="function" returnType="string">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="escapestr"/>
	</params>
</keyword>
<keyword name="mysqli_real_query" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_report" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">    This function is an alias of:  <a href="mysqli-driver.report-mode.php" class="link">mysqli_driver-&gt;report_mode</a>  </p> </div>]]></desc>
	<params>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="mysqli_rollback" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli::rollback</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ]] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_rollback</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ]] )</div>  <p class="para rdfs-comment">   Rollbacks the current transaction for the database.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_rpl_parse_enabled" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysqli_rpl_parse_enabled</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_rpl_probe" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_rpl_probe</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_rpl_query_type" type="function" returnType="int">
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_select_db" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="dbname"/>
	</params>
</keyword>
<keyword name="mysqli_send_query" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_set_charset" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="csname"/>
	</params>
</keyword>
<keyword name="mysqli_set_local_infile_default" type="function" returnType="void">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_set_local_infile_handler" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="callback" name="read_func"/>
	</params>
</keyword>
<keyword name="mysqli_slave_query" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_slave_query</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.3.0.</p></div> </div>]]></desc>
	<params>
		<param type="object" name="link"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_sqlstate" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">string</span> <var class="varname"><a href="mysqli.sqlstate.php">$mysqli-&gt;sqlstate</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_sqlstate</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string containing the SQLSTATE error code for the last error.   The error code consists of five characters. <em>&#039;00000&#039;</em> means no error.   The values are specified by ANSI SQL and ODBC. For a list of possible values, see   <a href="http://dev.mysql.com/doc/mysql/en/error-handling.html" class="link external">&raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html</a>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Note that not all MySQL errors are yet mapped to SQLSTATE&#039;s.    The value <em>HY000</em> (general error) is used for unmapped errors.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_ssl_set" type="function" returnType="bool">
	<params>
		<param type="object" name="link"/>
		<param type="string" name="key"/>
		<param type="string" name="cert"/>
		<param type="string" name="ca"/>
		<param type="string" name="capath"/>
		<param type="string" name="cipher"/>
	</params>
</keyword>
<keyword name="mysqli_stat" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli::stat</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_stat</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli.php" class="type mysqli">mysqli</a></span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>mysqli_stat()</strong></span> returns a string containing   information similar to that provided by the &#039;mysqladmin status&#039; command.   This includes uptime in seconds and the number of running threads,   questions, reloads, and open tables.  </p>]]></desc>
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_affected_rows" type="function" returnType="mixed">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_attr_get" type="function" returnType="int">
	<params>
		<param type="object" name="stmt"/>
		<param type="long" name="attr"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_attr_set" type="function" returnType="int">
	<params>
		<param type="object" name="stmt"/>
		<param type="long" name="attr"/>
		<param type="long" name="mode"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_bind_param" type="function" returnType="bool">
	<params>
		<param type="object" name="stmt"/>
		<param type="string" name="types"/>
		<param type="mixed" name="variable"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="mysqli_stmt_bind_param" type="function" returnType="bool">
	<params>
		<param type="object" name="stmt"/>
		<param type="string" name="types"/>
		<param type="mixed" name="variable"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_bind_result" type="function" returnType="bool">
	<params>
		<param type="object" name="stmt"/>
		<param type="mixed" name="var"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="mysqli_stmt_bind_result" type="function" returnType="bool">
	<params>
		<param type="object" name="stmt"/>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_close" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt::close</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt_close</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Closes a prepared statement. <span class="function"><strong>mysqli_stmt_close()</strong></span> also   deallocates the statement handle. If the current statement has pending or   unread results, this function cancels them so that the next query can be   executed.  </p>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_data_seek" type="function" returnType="void">
	<params>
		<param type="object" name="stmt"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_errno" type="function" returnType="int">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">int</span> <var class="varname"><a href="mysqli-stmt.errno.php">$mysqli_stmt-&gt;errno</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>mysqli_stmt_errno</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Returns the error code for the most recently invoked statement function   that can succeed or fail.  </p>  <p class="para">   Client error message numbers are listed in the MySQL   <var class="filename">errmsg.h</var> header file,   server error message numbers are listed in   <var class="filename">mysqld_error.h</var>.   In the MySQL source distribution you can find a complete list of error   messages and error numbers in the file    <var class="filename">Docs/mysqld_error.txt</var>.  </p>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_error" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">string</span> <var class="varname"><a href="mysqli-stmt.error.php">$mysqli_stmt-&gt;error</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_stmt_error</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Returns a containing the error message for the most recently invoked   statement function that can succeed or fail.  </p>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_execute" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt::execute</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt_execute</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Executes a query that has been previously prepared using the   <span class="function"><a href="mysqli.prepare.php" class="function">mysqli_prepare()</a></span> function. When executed any   parameter markers which exist will automatically be replaced with the   appropriate data.  </p>  <p class="para">   If the statement is <em>UPDATE</em>, <em>DELETE</em>,   or <em>INSERT</em>, the total number of affected rows can be   determined by using the <span class="function"><a href="mysqli-stmt.affected-rows.php" class="function">mysqli_stmt_affected_rows()</a></span>   function. Likewise, if the query yields a result set the    <span class="function"><a href="mysqli-stmt.fetch.php" class="function">mysqli_stmt_fetch()</a></span> function is used.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When using <span class="function"><strong>mysqli_stmt_execute()</strong></span>, the     <span class="function"><a href="mysqli-stmt.fetch.php" class="function">mysqli_stmt_fetch()</a></span> function must be used to fetch the    data prior to performing any additional queries.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_fetch" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt::fetch</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt_fetch</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Fetch the result from a prepared statement into the variables bound by   <span class="function"><a href="mysqli-stmt.bind-result.php" class="function">mysqli_stmt_bind_result()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Note that all columns must be bound by the application before calling    <span class="function"><strong>mysqli_stmt_fetch()</strong></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Data are transferred unbuffered without calling    <span class="function"><a href="mysqli-stmt.store-result.php" class="function">mysqli_stmt_store_result()</a></span> which can decrease    performance (but reduces memory cost).   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_field_count" type="function" returnType="int">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_free_result" type="function" returnType="void">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_get_warnings" type="function" returnType="object">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_init" type="function" returnType="mixed">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_insert_id" type="function" returnType="mixed">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_num_rows" type="function" returnType="mixed">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_param_count" type="function" returnType="int">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_prepare" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>mysqli_stmt::prepare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt_prepare</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   Prepares the SQL query pointed to by the null-terminated string query.   </p>  <p class="para">   The parameter markers must be bound to application variables using   <span class="function"><a href="mysqli-stmt.bind-param.php" class="function">mysqli_stmt_bind_param()</a></span> and/or    <span class="function"><a href="mysqli-stmt.bind-result.php" class="function">mysqli_stmt_bind_result()</a></span> before executing the   statement or fetching rows.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    In the case where you pass a statement to    <span class="function"><strong>mysqli_stmt_prepare()</strong></span> that is longer than    <em>max_allowed_packet</em> of the server, the returned    error codes are different depending on whether you are using MySQL    Native Driver (<em>mysqlnd</em>) or MySQL Client Library    (<em>libmysqlclient</em>). The behavior is as follows:   </p>   <ul class="itemizedlist">    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Linux returns an error code of 1153.      The error message means "<span class="quote">got a packet bigger than      <em>max_allowed_packet</em> bytes</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>mysqlnd</em> on Windows returns an error code 2006.      This error message means "<span class="quote">server has gone away</span>".     </p>    </li>    <li class="listitem">     <p class="para">      <em>libmysqlclient</em> on all platforms returns an error code      2006. This error message means "<span class="quote">server has gone      away</span>".     </p>    </li>   </ul>  </p></blockquote>]]></desc>
	<params>
		<param type="object" name="stmt"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_reset" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt::reset</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>mysqli_stmt_reset</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Resets a prepared statement on client and server to state after prepare.  </p>  <p class="para">    It resets the statement on the server, data sent using <span class="function"><a href="mysqli-stmt.send-long-data.php" class="function">mysqli_stmt_send_long_data()</a></span>,     unbuffered result sets and current errors. It does not clear bindings or stored result sets.     Stored result sets will be cleared when executing the prepared statement (or closing it).  </p>  <p class="para">   To prepare a statement with another query use function   <span class="function"><a href="mysqli-stmt.prepare.php" class="function">mysqli_stmt_prepare()</a></span>.  </p>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_result_metadata" type="function" returnType="mixed">
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_send_long_data" type="function" returnType="bool">
	<params>
		<param type="object" name="stmt"/>
		<param type="int" name="param_nr"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_sqlstate" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="fieldsynopsis"><span class="type">string</span> <var class="varname"><a href="mysqli-stmt.sqlstate.php">$mysqli_stmt-&gt;sqlstate</a></var>;</div>  <p class="para">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>mysqli_stmt_sqlstate</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.mysqli-stmt.php" class="type mysqli_stmt">mysqli_stmt</a></span> <code class="parameter">$stmt</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string containing the SQLSTATE error code   for the most recently invoked prepared statement function that can succeed or fail.   The error code consists of five characters. <em>&#039;00000&#039;</em> means no error.   The values are specified by ANSI SQL and ODBC. For a list of possible values, see   <a href="http://dev.mysql.com/doc/mysql/en/error-handling.html" class="link external">&raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html</a>.  </p>]]></desc>
	<params>
		<param type="object" name="stmt"/>
	</params>
</keyword>
<keyword name="mysqli_stmt_store_result" type="function" returnType="bool">
	<params>
		<param type="t"/>
	</params>
</keyword>
<keyword name="mysqli_store_result" type="function" returnType="object">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_thread_id" type="function" returnType="int">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="mysqli_thread_safe" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="mysqli_use_result" type="function" returnType="mixed">
	<params>
		<param type="object" name="link"/>
	</params>
</keyword>
<keyword name="natcasesort" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>natcasesort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>natcasesort()</strong></span> is a case insensitive version of   <span class="function"><a href="function.natsort.php" class="function">natsort()</a></span>.  </p>  <p class="para">   This function implements a sort algorithm that orders   alphanumeric strings in the way a human being would while maintaining   key/value associations.  This is described as a &quot;natural ordering&quot;.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="natsort" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>natsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   This function implements a sort algorithm that orders alphanumeric strings   in the way a human being would while maintaining key/value associations.   This is described as a &quot;natural ordering&quot;.  An example of the difference   between this algorithm and the regular computer string sorting algorithms   (used in <span class="function"><a href="function.sort.php" class="function">sort()</a></span>) can be seen in the example below.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="ngettext" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ngettext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$msgid1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$msgid2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$n</code></span>   )</div>  <p class="para rdfs-comment">   The plural version of <span class="function"><a href="function.gettext.php" class="function">gettext()</a></span>.  Some languages    have more than one form for plural messages dependent on the count.  </p>]]></desc>
	<params>
		<param type="string" name="msgid1"/>
		<param type="string" name="msgid2"/>
		<param type="int" name="count"/>
	</params>
</keyword>
<keyword name="nl_langinfo" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>nl_langinfo</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$item</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>nl_langinfo()</strong></span> is used to access individual elements of   the locale categories.  Unlike <span class="function"><a href="function.localeconv.php" class="function">localeconv()</a></span>, which   returns all of the elements, <span class="function"><strong>nl_langinfo()</strong></span> allows you   to select any specific element.  </p>]]></desc>
	<params>
		<param type="int" name="item"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::current" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::key" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="NoRewindIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="nsapi_request_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>nsapi_request_headers</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>nsapi_request_headers()</strong></span> gets all the HTTP headers in   the current request. This is only supported when PHP runs as a    <span class="productname">NSAPI</span> module.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Prior to PHP 4.3.3, <span class="function"><a href="function.getallheaders.php" class="function">getallheaders()</a></span> was only     available for the Apache servers.  After PHP 4.3.3,    <span class="function"><a href="function.getallheaders.php" class="function">getallheaders()</a></span> is an alias for    <span class="function"><strong>nsapi_request_headers()</strong></span> if you use the NSAPI module.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    You can also get at the value of the common CGI variables by    reading them from the <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER</a></var></var> superglobal, which     works whether or not you are using PHP as a     <span class="productname">NSAPI</span> module.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="nsapi_response_headers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>nsapi_response_headers</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets all the NSAPI response headers.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="nsapi_virtual" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>nsapi_virtual</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>nsapi_virtual()</strong></span> is an NSAPI-specific function which   is equivalent to <em>&lt;!--#include virtual...--&gt;</em>   in <acronym>SSI</acronym>   (<var class="filename">.shtml</var> files). It does an NSAPI sub-request.   It is useful for including CGI scripts or .shtml files, or anything   else that you&#039;d parse through webserver.  </p>  <p class="para">   To run the sub-request, all buffers are terminated and flushed to the   browser, pending headers are sent too.  </p>  <p class="para">   You cannot make recursive requests with this function to other PHP scripts.   If you want to include PHP scripts, use <span class="function"><a href="function.include.php" class="function">include</a></span> or   <span class="function"><a href="function.require.php" class="function">require</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function depends on a undocumented feature of the Netscape/iPlanet/Sun    webservers. Use <span class="function"><a href="function.phpinfo.php" class="function">phpinfo()</a></span> to determine if it is available.    In the Unix environment it should always work, in Windows it depends on the name of    a <var class="filename">ns-httpdXX.dll</var> file.   </p>   <p class="para">    Read the note about subrequests in the NSAPI section (<a href="install.unix.sun.php#install.unix.sun.notes" class="link">UNIX</a>, <a href="install.windows.sun.php#install.windows.sun.notes" class="link">Windows</a>) if you experience    this problem.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="number_format" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dec_point</code><span class="initializer"> = &quot;.&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$thousands_sep</code><span class="initializer"> = &quot;,&quot;</span></span>   )</div>  <p class="para rdfs-comment">   This function accepts either one, two, or four parameters (not three):  </p>  <p class="para">   If only one parameter is given,   <code class="parameter">number</code> will be formatted without decimals,   but with a comma (&quot;,&quot;) between every group of thousands.  </p>  <p class="para">   If two parameters are given, <code class="parameter">number</code> will   be formatted with <code class="parameter">decimals</code> decimals with a   dot (&quot;.&quot;) in front, and a comma (&quot;,&quot;) between every group of   thousands.  </p>  <p class="para">   If all four parameters are given, <code class="parameter">number</code>   will be formatted with <code class="parameter">decimals</code> decimals,   <code class="parameter">dec_point</code> instead of a dot (&quot;.&quot;) before   the decimals and <code class="parameter">thousands_sep</code> instead of   a comma (&quot;,&quot;) between every group of thousands.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
		<param type="int" name="num_decimal_places"/>
		<param type="string" name="dec_seperator"/>
		<param type="string" name="thousands_seperator"/>
	</params>
</keyword>
<keyword name="number_format" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dec_point</code><span class="initializer"> = &quot;.&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$thousands_sep</code><span class="initializer"> = &quot;,&quot;</span></span>   )</div>  <p class="para rdfs-comment">   This function accepts either one, two, or four parameters (not three):  </p>  <p class="para">   If only one parameter is given,   <code class="parameter">number</code> will be formatted without decimals,   but with a comma (&quot;,&quot;) between every group of thousands.  </p>  <p class="para">   If two parameters are given, <code class="parameter">number</code> will   be formatted with <code class="parameter">decimals</code> decimals with a   dot (&quot;.&quot;) in front, and a comma (&quot;,&quot;) between every group of   thousands.  </p>  <p class="para">   If all four parameters are given, <code class="parameter">number</code>   will be formatted with <code class="parameter">decimals</code> decimals,   <code class="parameter">dec_point</code> instead of a dot (&quot;.&quot;) before   the decimals and <code class="parameter">thousands_sep</code> instead of   a comma (&quot;,&quot;) between every group of thousands.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
		<param type="int" name="num_decimal_places"/>
	</params>
</keyword>
<keyword name="number_format" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>number_format</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$number</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code><span class="initializer"> = 0</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$dec_point</code><span class="initializer"> = &quot;.&quot;</span></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$thousands_sep</code><span class="initializer"> = &quot;,&quot;</span></span>   )</div>  <p class="para rdfs-comment">   This function accepts either one, two, or four parameters (not three):  </p>  <p class="para">   If only one parameter is given,   <code class="parameter">number</code> will be formatted without decimals,   but with a comma (&quot;,&quot;) between every group of thousands.  </p>  <p class="para">   If two parameters are given, <code class="parameter">number</code> will   be formatted with <code class="parameter">decimals</code> decimals with a   dot (&quot;.&quot;) in front, and a comma (&quot;,&quot;) between every group of   thousands.  </p>  <p class="para">   If all four parameters are given, <code class="parameter">number</code>   will be formatted with <code class="parameter">decimals</code> decimals,   <code class="parameter">dec_point</code> instead of a dot (&quot;.&quot;) before   the decimals and <code class="parameter">thousands_sep</code> instead of   a comma (&quot;,&quot;) between every group of thousands.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="ob_clean" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ob_clean</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function discards the contents of the output buffer.  </p>  <p class="para">   This function does not destroy the output buffer like   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span> does.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_end_clean" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_end_clean</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function discards the contents of the topmost output buffer and turns   off this output buffering. If you want to further process the buffer&#039;s   contents you have to call <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span> before   <span class="function"><strong>ob_end_clean()</strong></span> as the buffer contents are discarded   when <span class="function"><strong>ob_end_clean()</strong></span> is called.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_end_flush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_end_flush</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function will send the contents of the topmost output buffer (if   any) and turn this output buffer off.  If you want to further   process the buffer&#039;s contents you have to call   <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span> before   <span class="function"><strong>ob_end_flush()</strong></span> as the buffer contents are   discarded after <span class="function"><strong>ob_end_flush()</strong></span> is called.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    This function is similar to <span class="function"><a href="function.ob-get-flush.php" class="function">ob_get_flush()</a></span>, except    that <span class="function"><a href="function.ob-get-flush.php" class="function">ob_get_flush()</a></span> returns the buffer as a string.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_flush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ob_flush</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function will send the contents of the output buffer (if any). If you   want to further process the buffer&#039;s contents you have to call   <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span> before <span class="function"><strong>ob_flush()</strong></span>   as the buffer contents are discarded after <span class="function"><strong>ob_flush()</strong></span>   is called.  </p>  <p class="para">   This function does not destroy the output buffer like   <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span> does.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_get_clean" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ob_get_clean</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the current buffer contents and delete current output buffer.  </p>  <p class="para">   <span class="function"><strong>ob_get_clean()</strong></span> essentially executes both   <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span> and   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ob_get_contents</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the contents of the output buffer without clearing it.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_get_flush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ob_get_flush</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ob_get_flush()</strong></span> flushes the output buffer, return   it as a string and turns off output buffering.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    This function is similar to <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>, except    that this function returns the buffer as a string.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_get_length" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ob_get_length</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This will return the length of the contents in the output buffer.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_get_level" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ob_get_level</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the nesting level of the output buffering mechanism.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ob_implicit_flush" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ob_implicit_flush</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ob_implicit_flush()</strong></span> will turn implicit flushing on or   off. Implicit flushing will result in a flush operation after every output   call, so that explicit calls to <span class="function"><a href="function.flush.php" class="function">flush()</a></span> will no longer   be needed.  </p>]]></desc>
	<params>
		<param type="int" name="flag"/>
	</params>
</keyword>
<keyword name="ob_implicit_flush" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>ob_implicit_flush</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>ob_implicit_flush()</strong></span> will turn implicit flushing on or   off. Implicit flushing will result in a flush operation after every output   call, so that explicit calls to <span class="function"><a href="function.flush.php" class="function">flush()</a></span> will no longer   be needed.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="ob_start" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_start</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$output_callback</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunk_size</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PHP_OUTPUT_HANDLER_STDFLAGS</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function will turn output buffering on. While output buffering is   active no output is sent from the script (other than headers), instead the   output is stored in an internal buffer.  </p>  <p class="para">   The contents of this internal buffer may be copied into a string variable   using <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span>.  To output what is stored in   the internal buffer, use <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>. Alternatively,   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span> will silently discard the buffer   contents.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Some web servers (e.g. Apache) change the working directory of a script    when calling the callback function. You can change it back by e.g.    <em>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</em> in the    callback function.   </p>  </div>  <p class="para">   Output buffers are stackable, that is, you may call   <span class="function"><strong>ob_start()</strong></span> while another   <span class="function"><strong>ob_start()</strong></span> is active. Just make   sure that you call <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>   the appropriate number of times. If multiple output callback   functions are active, output is being filtered sequentially   through each of them in nesting order.  </p>]]></desc>
	<params>
		<param type="string|array" name="user_function"/>
		<param type="int" name="chunk_size"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="ob_start" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_start</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$output_callback</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunk_size</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PHP_OUTPUT_HANDLER_STDFLAGS</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function will turn output buffering on. While output buffering is   active no output is sent from the script (other than headers), instead the   output is stored in an internal buffer.  </p>  <p class="para">   The contents of this internal buffer may be copied into a string variable   using <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span>.  To output what is stored in   the internal buffer, use <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>. Alternatively,   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span> will silently discard the buffer   contents.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Some web servers (e.g. Apache) change the working directory of a script    when calling the callback function. You can change it back by e.g.    <em>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</em> in the    callback function.   </p>  </div>  <p class="para">   Output buffers are stackable, that is, you may call   <span class="function"><strong>ob_start()</strong></span> while another   <span class="function"><strong>ob_start()</strong></span> is active. Just make   sure that you call <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>   the appropriate number of times. If multiple output callback   functions are active, output is being filtered sequentially   through each of them in nesting order.  </p>]]></desc>
	<params>
		<param type="string|array" name="user_function"/>
		<param type="int" name="chunk_size"/>
	</params>
</keyword>
<keyword name="ob_start" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_start</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$output_callback</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunk_size</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PHP_OUTPUT_HANDLER_STDFLAGS</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function will turn output buffering on. While output buffering is   active no output is sent from the script (other than headers), instead the   output is stored in an internal buffer.  </p>  <p class="para">   The contents of this internal buffer may be copied into a string variable   using <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span>.  To output what is stored in   the internal buffer, use <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>. Alternatively,   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span> will silently discard the buffer   contents.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Some web servers (e.g. Apache) change the working directory of a script    when calling the callback function. You can change it back by e.g.    <em>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</em> in the    callback function.   </p>  </div>  <p class="para">   Output buffers are stackable, that is, you may call   <span class="function"><strong>ob_start()</strong></span> while another   <span class="function"><strong>ob_start()</strong></span> is active. Just make   sure that you call <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>   the appropriate number of times. If multiple output callback   functions are active, output is being filtered sequentially   through each of them in nesting order.  </p>]]></desc>
	<params>
		<param type="string|array" name="user_function"/>
	</params>
</keyword>
<keyword name="ob_start" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>ob_start</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$output_callback</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$chunk_size</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PHP_OUTPUT_HANDLER_STDFLAGS</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   This function will turn output buffering on. While output buffering is   active no output is sent from the script (other than headers), instead the   output is stored in an internal buffer.  </p>  <p class="para">   The contents of this internal buffer may be copied into a string variable   using <span class="function"><a href="function.ob-get-contents.php" class="function">ob_get_contents()</a></span>.  To output what is stored in   the internal buffer, use <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>. Alternatively,   <span class="function"><a href="function.ob-end-clean.php" class="function">ob_end_clean()</a></span> will silently discard the buffer   contents.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Some web servers (e.g. Apache) change the working directory of a script    when calling the callback function. You can change it back by e.g.    <em>chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;]))</em> in the    callback function.   </p>  </div>  <p class="para">   Output buffers are stackable, that is, you may call   <span class="function"><strong>ob_start()</strong></span> while another   <span class="function"><strong>ob_start()</strong></span> is active. Just make   sure that you call <span class="function"><a href="function.ob-end-flush.php" class="function">ob_end_flush()</a></span>   the appropriate number of times. If multiple output callback   functions are active, output is being filtered sequentially   through each of them in nesting order.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_bind_array_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_array_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$var_array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_table_length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_item_length</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_AFC</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds the PHP array <code class="parameter">var_array</code> to the Oracle   placeholder <code class="parameter">name</code>, which points to an Oracle PL/SQL   array. Whether it will be used for input or output will be determined at   run-time.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="array" name="&amp;var"/>
		<param type="int" name="max_table_length"/>
		<param type="int" name="max_item_length"/>
		<param type="int" name="type "/>
	</params>
</keyword>
<keyword name="oci_bind_array_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_array_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$var_array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_table_length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_item_length</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_AFC</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds the PHP array <code class="parameter">var_array</code> to the Oracle   placeholder <code class="parameter">name</code>, which points to an Oracle PL/SQL   array. Whether it will be used for input or output will be determined at   run-time.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="array" name="&amp;var"/>
		<param type="int" name="max_table_length"/>
		<param type="int" name="max_item_length"/>
	</params>
</keyword>
<keyword name="oci_bind_array_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_array_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$var_array</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_table_length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_item_length</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_AFC</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds the PHP array <code class="parameter">var_array</code> to the Oracle   placeholder <code class="parameter">name</code>, which points to an Oracle PL/SQL   array. Whether it will be used for input or output will be determined at   run-time.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="array" name="&amp;var"/>
		<param type="int" name="max_table_length"/>
	</params>
</keyword>
<keyword name="oci_bind_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$bv_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_CHR</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds a PHP variable <code class="parameter">variable</code> to the Oracle   bind variable placeholder <code class="parameter">bv_name</code>.  Binding   is important for Oracle database performance and also as a way to   avoid SQL Injection security issues.  </p>  <p class="para">    Binding allows the database to reuse the statement context and    caches from previous executions of the statement, even if another    user or process originally executed it.  Binding reduces SQL    Injection concerns because the data associated with a bind    variable is never treated as part of the SQL statement.  It does    not need quoting or escaping.  </p>  <p class="para">    PHP variables that have been bound can be changed and the    statement re-executed without needing to re-parse the statement or    re-bind.  </p>  <p class="para">    In Oracle, bind variables are commonly divided    into <em>IN</em> binds for values that are passed into    the database, and <em>OUT</em> binds for values that are    returned to PHP.  A bind variable may be    both <em>IN</em> and <em>OUT</em>.  Whether a    bind variable will be used for input or output is determined at    run-time.  </p>  <p class="para">    You must specify <code class="parameter">maxlength</code> when using    an <em>OUT</em> bind so that PHP allocates enough memory    to hold the returned value.  </p>  <p class="para">    For <em>IN</em> binds it is recommended to set    the <code class="parameter">maxlength</code> length if the statement is    re-executed multiple times with different values for the PHP    variable.  Otherwise Oracle may truncate data to the length of the    initial PHP variable value.  If you don&#039;t know what the maximum    length will be, then re-call <span class="function"><strong>oci_bind_by_name()</strong></span>    with the current data size prior to    each <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> call. Binding an    unnecessarily large length will have an impact on process memory    in the database.  </p>  <p class="para">    A bind call tells Oracle which memory address to read data from.    For <em>IN</em> binds that address needs to contain    valid data when <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> is called.  This    means that the variable bound must remain in scope until    execution.  If it doesn&#039;t, unexpected results or errors such as    &quot;ORA-01460: unimplemented or unreasonable conversion requested&quot;    may occur.  For <em>OUT</em> binds one symptom is no    value being set in the PHP variable.  </p>  <p class="para">    For a statement that is repeatedly executed, binding values that    never change may reduce the ability of the Oracle optimizer to    choose the best statement execution plan.  Long running statements    that are rarely re-executed may not benefit from binding.  However    in both cases, binding might be safer than joining strings into a    SQL statement, as this can be a security risk if unfiltered user    text is concatenated.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="mixed" name="&amp;var"/>
		<param type="int" name="maxlength"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="oci_bind_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$bv_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_CHR</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds a PHP variable <code class="parameter">variable</code> to the Oracle   bind variable placeholder <code class="parameter">bv_name</code>.  Binding   is important for Oracle database performance and also as a way to   avoid SQL Injection security issues.  </p>  <p class="para">    Binding allows the database to reuse the statement context and    caches from previous executions of the statement, even if another    user or process originally executed it.  Binding reduces SQL    Injection concerns because the data associated with a bind    variable is never treated as part of the SQL statement.  It does    not need quoting or escaping.  </p>  <p class="para">    PHP variables that have been bound can be changed and the    statement re-executed without needing to re-parse the statement or    re-bind.  </p>  <p class="para">    In Oracle, bind variables are commonly divided    into <em>IN</em> binds for values that are passed into    the database, and <em>OUT</em> binds for values that are    returned to PHP.  A bind variable may be    both <em>IN</em> and <em>OUT</em>.  Whether a    bind variable will be used for input or output is determined at    run-time.  </p>  <p class="para">    You must specify <code class="parameter">maxlength</code> when using    an <em>OUT</em> bind so that PHP allocates enough memory    to hold the returned value.  </p>  <p class="para">    For <em>IN</em> binds it is recommended to set    the <code class="parameter">maxlength</code> length if the statement is    re-executed multiple times with different values for the PHP    variable.  Otherwise Oracle may truncate data to the length of the    initial PHP variable value.  If you don&#039;t know what the maximum    length will be, then re-call <span class="function"><strong>oci_bind_by_name()</strong></span>    with the current data size prior to    each <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> call. Binding an    unnecessarily large length will have an impact on process memory    in the database.  </p>  <p class="para">    A bind call tells Oracle which memory address to read data from.    For <em>IN</em> binds that address needs to contain    valid data when <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> is called.  This    means that the variable bound must remain in scope until    execution.  If it doesn&#039;t, unexpected results or errors such as    &quot;ORA-01460: unimplemented or unreasonable conversion requested&quot;    may occur.  For <em>OUT</em> binds one symptom is no    value being set in the PHP variable.  </p>  <p class="para">    For a statement that is repeatedly executed, binding values that    never change may reduce the ability of the Oracle optimizer to    choose the best statement execution plan.  Long running statements    that are rarely re-executed may not benefit from binding.  However    in both cases, binding might be safer than joining strings into a    SQL statement, as this can be a security risk if unfiltered user    text is concatenated.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="mixed" name="&amp;var"/>
		<param type="int" name="maxlength"/>
	</params>
</keyword>
<keyword name="oci_bind_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_bind_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$bv_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_CHR</span></span>  ]] )</div>  <p class="para rdfs-comment">   Binds a PHP variable <code class="parameter">variable</code> to the Oracle   bind variable placeholder <code class="parameter">bv_name</code>.  Binding   is important for Oracle database performance and also as a way to   avoid SQL Injection security issues.  </p>  <p class="para">    Binding allows the database to reuse the statement context and    caches from previous executions of the statement, even if another    user or process originally executed it.  Binding reduces SQL    Injection concerns because the data associated with a bind    variable is never treated as part of the SQL statement.  It does    not need quoting or escaping.  </p>  <p class="para">    PHP variables that have been bound can be changed and the    statement re-executed without needing to re-parse the statement or    re-bind.  </p>  <p class="para">    In Oracle, bind variables are commonly divided    into <em>IN</em> binds for values that are passed into    the database, and <em>OUT</em> binds for values that are    returned to PHP.  A bind variable may be    both <em>IN</em> and <em>OUT</em>.  Whether a    bind variable will be used for input or output is determined at    run-time.  </p>  <p class="para">    You must specify <code class="parameter">maxlength</code> when using    an <em>OUT</em> bind so that PHP allocates enough memory    to hold the returned value.  </p>  <p class="para">    For <em>IN</em> binds it is recommended to set    the <code class="parameter">maxlength</code> length if the statement is    re-executed multiple times with different values for the PHP    variable.  Otherwise Oracle may truncate data to the length of the    initial PHP variable value.  If you don&#039;t know what the maximum    length will be, then re-call <span class="function"><strong>oci_bind_by_name()</strong></span>    with the current data size prior to    each <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> call. Binding an    unnecessarily large length will have an impact on process memory    in the database.  </p>  <p class="para">    A bind call tells Oracle which memory address to read data from.    For <em>IN</em> binds that address needs to contain    valid data when <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> is called.  This    means that the variable bound must remain in scope until    execution.  If it doesn&#039;t, unexpected results or errors such as    &quot;ORA-01460: unimplemented or unreasonable conversion requested&quot;    may occur.  For <em>OUT</em> binds one symptom is no    value being set in the PHP variable.  </p>  <p class="para">    For a statement that is repeatedly executed, binding values that    never change may reduce the ability of the Oracle optimizer to    choose the best statement execution plan.  Long running statements    that are rarely re-executed may not benefit from binding.  However    in both cases, binding might be safer than joining strings into a    SQL statement, as this can be a security risk if unfiltered user    text is concatenated.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="mixed" name="&amp;var"/>
	</params>
</keyword>
<keyword name="oci_cancel" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_cancel</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Invalidates a cursor, freeing all associated resources and cancels the   ability to read from it.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   Unsets <code class="parameter">connection</code>.  The underlying database   connection is closed if no other resources are using it and if it   was created with <span class="function"><a href="function.oci-connect.php" class="function">oci_connect()</a></span>   or <span class="function"><a href="function.oci-new-connect.php" class="function">oci_new_connect()</a></span>.  </p>  <p class="para">   It is recommended to close connections that are no longer needed   because this makes database resources available for other users.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_collection_append" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Collection::append</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Appends element to the end of the collection.  </p>]]></desc>
	<params>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="oci_collection_assign" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Collection::assign</strong></span>    ( <span class="methodparam"><span class="type"><span class="type OCI-Collection">OCI-Collection</span></span> <code class="parameter">$from</code></span>   )</div>  <p class="para rdfs-comment">   Assigns a value to the collection from another, previously created   collection. Both collections must be created with    <span class="function"><a href="function.oci-new-collection.php" class="function">oci_new_collection()</a></span> prior to using them.  </p>]]></desc>
	<params>
		<param type="object" name="from"/>
	</params>
</keyword>
<keyword name="oci_collection_element_assign" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
		<param type="string" name="val"/>
	</params>
</keyword>
<keyword name="oci_collection_element_get" type="function" returnType="string">
	<params>
		<param type="int" name="ndx"/>
	</params>
</keyword>
<keyword name="oci_collection_max" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Collection::max</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the maximum number of elements in the collection.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_collection_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Collection::size</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the size of the collection.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_collection_trim" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Collection::trim</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$num</code></span>   )</div>  <p class="para rdfs-comment">   Trims <code class="parameter">num</code> of elements from the end of the   collection.  </p>]]></desc>
	<params>
		<param type="int" name="num"/>
	</params>
</keyword>
<keyword name="oci_commit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_commit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   Commits the outstanding transaction for the   Oracle <code class="parameter">connection</code>.  A commit ends the   current transaction and makes permanent all changes.  It releases   all locks held.  </p>  <p class="para">   A transaction begins when the first SQL statement that changes data   is executed with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> using   the <strong><code>OCI_NO_AUTO_COMMIT</code></strong> flag.  Further data   changes made by other statements become part of the same   transaction.  Data changes made in a transaction are temporary   until the transaction is committed or rolled back.  Other users of   the database will not see the changes until they are committed.  </p>  <p class="para">   When inserting or updating data, using transactions is recommended   for relational data consistency and for performance reasons.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Returns a connection identifier needed for most other OCI8 operations.   </p>  <p class="para">   See <a href="oci8.connection.php" class="link">Connection Handling</a> for   general information on connection management and connection   pooling.  </p>  <p class="para">   From PHP 5.1.2 (PECL OCI8 1.1) <span class="function"><a href="function.oci-close.php" class="function">oci_close()</a></span> can   be used to close the connection.  </p>  <p class="para">   The second and subsequent calls to <span class="function"><strong>oci_connect()</strong></span>   with the same parameters will return the connection handle returned   from the first call. This means that transactions in one handle are   also in the other handles, because they use the   <em class="emphasis">same</em> underlying database connection. If two   handles need to be transactionally isolated from each other, use   <span class="function"><a href="function.oci-new-connect.php" class="function">oci_new_connect()</a></span> instead.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
		<param type="string" name="charset"/>
		<param type="int" name="session_mode "/>
	</params>
</keyword>
<keyword name="oci_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Returns a connection identifier needed for most other OCI8 operations.   </p>  <p class="para">   See <a href="oci8.connection.php" class="link">Connection Handling</a> for   general information on connection management and connection   pooling.  </p>  <p class="para">   From PHP 5.1.2 (PECL OCI8 1.1) <span class="function"><a href="function.oci-close.php" class="function">oci_close()</a></span> can   be used to close the connection.  </p>  <p class="para">   The second and subsequent calls to <span class="function"><strong>oci_connect()</strong></span>   with the same parameters will return the connection handle returned   from the first call. This means that transactions in one handle are   also in the other handles, because they use the   <em class="emphasis">same</em> underlying database connection. If two   handles need to be transactionally isolated from each other, use   <span class="function"><a href="function.oci-new-connect.php" class="function">oci_new_connect()</a></span> instead.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="oci_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Returns a connection identifier needed for most other OCI8 operations.   </p>  <p class="para">   See <a href="oci8.connection.php" class="link">Connection Handling</a> for   general information on connection management and connection   pooling.  </p>  <p class="para">   From PHP 5.1.2 (PECL OCI8 1.1) <span class="function"><a href="function.oci-close.php" class="function">oci_close()</a></span> can   be used to close the connection.  </p>  <p class="para">   The second and subsequent calls to <span class="function"><strong>oci_connect()</strong></span>   with the same parameters will return the connection handle returned   from the first call. This means that transactions in one handle are   also in the other handles, because they use the   <em class="emphasis">same</em> underlying database connection. If two   handles need to be transactionally isolated from each other, use   <span class="function"><a href="function.oci-new-connect.php" class="function">oci_new_connect()</a></span> instead.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
	</params>
</keyword>
<keyword name="oci_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Returns a connection identifier needed for most other OCI8 operations.   </p>  <p class="para">   See <a href="oci8.connection.php" class="link">Connection Handling</a> for   general information on connection management and connection   pooling.  </p>  <p class="para">   From PHP 5.1.2 (PECL OCI8 1.1) <span class="function"><a href="function.oci-close.php" class="function">oci_close()</a></span> can   be used to close the connection.  </p>  <p class="para">   The second and subsequent calls to <span class="function"><strong>oci_connect()</strong></span>   with the same parameters will return the connection handle returned   from the first call. This means that transactions in one handle are   also in the other handles, because they use the   <em class="emphasis">same</em> underlying database connection. If two   handles need to be transactionally isolated from each other, use   <span class="function"><a href="function.oci-new-connect.php" class="function">oci_new_connect()</a></span> instead.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
	</params>
</keyword>
<keyword name="oci_define_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_define_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_CHR</span></span>  ] )</div>  <p class="para rdfs-comment">   Associates a PHP variable with a column for query fetches using <span class="function"><a href="function.oci-fetch.php" class="function">oci_fetch()</a></span>.  </p>  <p class="para">    The <span class="function"><strong>oci_define_by_name()</strong></span> call must occur before    executing <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="mixed" name="&amp;var"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="oci_define_by_name" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_define_by_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$variable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = SQLT_CHR</span></span>  ] )</div>  <p class="para rdfs-comment">   Associates a PHP variable with a column for query fetches using <span class="function"><a href="function.oci-fetch.php" class="function">oci_fetch()</a></span>.  </p>  <p class="para">    The <span class="function"><strong>oci_define_by_name()</strong></span> call must occur before    executing <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="string" name="name"/>
		<param type="mixed" name="&amp;var"/>
	</params>
</keyword>
<keyword name="oci_error" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$resource</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the last error found.  </p>  <p class="para">   The function should be called immediately after an error occurs.   Errors are cleared by a successful statement.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_error" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$resource</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the last error found.  </p>  <p class="para">   The function should be called immediately after an error occurs.   Errors are cleared by a successful statement.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_execute" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = OCI_COMMIT_ON_SUCCESS</span></span>  ] )</div>  <p class="para rdfs-comment">   Executes a <code class="parameter">statement</code> previously returned   from <span class="function"><a href="function.oci-parse.php" class="function">oci_parse()</a></span>.  </p>  <p class="para">   After execution, statements like <em>INSERT</em> will   have data committed to the database by default.  For statements   like <em>SELECT</em>, execution performs the logic of the   query. Query results can subsequently be fetched in PHP with   functions like <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>.  </p>  <p class="para">   Each parsed statement may be executed multiple times, saving the   cost of re-parsing.  This is commonly used   for <em>INSERT</em> statements when data is bound   with <span class="function"><a href="function.oci-bind-by-name.php" class="function">oci_bind_by_name()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="oci_execute" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = OCI_COMMIT_ON_SUCCESS</span></span>  ] )</div>  <p class="para rdfs-comment">   Executes a <code class="parameter">statement</code> previously returned   from <span class="function"><a href="function.oci-parse.php" class="function">oci_parse()</a></span>.  </p>  <p class="para">   After execution, statements like <em>INSERT</em> will   have data committed to the database by default.  For statements   like <em>SELECT</em>, execution performs the logic of the   query. Query results can subsequently be fetched in PHP with   functions like <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>.  </p>  <p class="para">   Each parsed statement may be executed multiple times, saving the   cost of re-parsing.  This is commonly used   for <em>INSERT</em> statements when data is bound   with <span class="function"><a href="function.oci-bind-by-name.php" class="function">oci_bind_by_name()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_fetch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_fetch</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Fetches the next row from a query into internal buffers accessible   either with <span class="function"><a href="function.oci-result.php" class="function">oci_result()</a></span>, or by using variables   previously defined with <span class="function"><a href="function.oci-define-by-name.php" class="function">oci_define_by_name()</a></span>.  </p>  <p class="para">    See <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span> for general information    about fetching data.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_fetch_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$output</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxrows</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>OCI_FETCHSTATEMENT_BY_COLUMN</code></strong> + <strong><code>OCI_ASSOC</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Fetches multiple rows from a query into a two-dimensional array.   By default, all rows are returned.  </p>  <p class="para">   This function can be called only once for each query executed   with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
		<param type="int" name="skip"/>
		<param type="int" name="maxrows"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="oci_fetch_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$output</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxrows</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>OCI_FETCHSTATEMENT_BY_COLUMN</code></strong> + <strong><code>OCI_ASSOC</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Fetches multiple rows from a query into a two-dimensional array.   By default, all rows are returned.  </p>  <p class="para">   This function can be called only once for each query executed   with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
		<param type="int" name="skip"/>
		<param type="int" name="maxrows"/>
	</params>
</keyword>
<keyword name="oci_fetch_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$output</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxrows</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>OCI_FETCHSTATEMENT_BY_COLUMN</code></strong> + <strong><code>OCI_ASSOC</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Fetches multiple rows from a query into a two-dimensional array.   By default, all rows are returned.  </p>  <p class="para">   This function can be called only once for each query executed   with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
		<param type="int" name="skip"/>
	</params>
</keyword>
<keyword name="oci_fetch_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$output</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$skip</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxrows</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>OCI_FETCHSTATEMENT_BY_COLUMN</code></strong> + <strong><code>OCI_ASSOC</code></strong></span></span>  ]]] )</div>  <p class="para rdfs-comment">   Fetches multiple rows from a query into a two-dimensional array.   By default, all rows are returned.  </p>  <p class="para">   This function can be called only once for each query executed   with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
	</params>
</keyword>
<keyword name="oci_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array containing the next result-set row of a query.   Each array entry corresponds to a column of the row.  This function   is typically called in a loop until it returns <strong><code>FALSE</code></strong>, indicating   no more rows exist.  </p>  <p class="para">   If <code class="parameter">statement</code> corresponds to a PL/SQL block   returning Oracle Database 12c Implicit Result Sets, then rows from   all sets are consecutively fetched. If   <code class="parameter">statement</code> is returned   by <span class="function"><a href="function.oci-get-implicit-resultset.php" class="function">oci_get_implicit_resultset()</a></span>, then only the   subset of rows for one child query are returned.  </p>  <p class="para">For details on the data type mapping performed bythe OCI8 extension, see the <a href="oci8.datatypes.php" class="link">datatypessupported by the driver</a></p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="mode "/>
	</params>
</keyword>
<keyword name="oci_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns an array containing the next result-set row of a query.   Each array entry corresponds to a column of the row.  This function   is typically called in a loop until it returns <strong><code>FALSE</code></strong>, indicating   no more rows exist.  </p>  <p class="para">   If <code class="parameter">statement</code> corresponds to a PL/SQL block   returning Oracle Database 12c Implicit Result Sets, then rows from   all sets are consecutively fetched. If   <code class="parameter">statement</code> is returned   by <span class="function"><a href="function.oci-get-implicit-resultset.php" class="function">oci_get_implicit_resultset()</a></span>, then only the   subset of rows for one child query are returned.  </p>  <p class="para">For details on the data type mapping performed bythe OCI8 extension, see the <a href="oci8.datatypes.php" class="link">datatypessupported by the driver</a></p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Returns an associative array containing the next result-set row of a query.   Each array entry corresponds to a column of the row.  This function   is typically called in a loop until it returns <strong><code>FALSE</code></strong>, indicating   no more rows exist.  </p>  <p class="para">   Calling <span class="function"><strong>oci_fetch_assoc()</strong></span> is identical to   calling <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>   with <strong><code>OCI_ASSOC</code></strong>   + <strong><code>OCI_RETURN_NULLS</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>oci_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Returns an object containing the next result-set row of a query.   Each attribute of the object corresponds to a column of the row.   This function is typically called in a loop until it returns   <strong><code>FALSE</code></strong>, indicating no more rows exist.  </p>  <p class="para">For details on the data type mapping performed bythe OCI8 extension, see the <a href="oci8.datatypes.php" class="link">datatypessupported by the driver</a></p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>oci_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Returns a numerically indexed array containing the next result-set row of a query.   Each array entry corresponds to a column of the row.  This function   is typically called in a loop until it returns <strong><code>FALSE</code></strong>, indicating   no more rows exist.  </p>  <p class="para">   Calling <span class="function"><strong>oci_fetch_row()</strong></span> is identical to calling   <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>   with <strong><code>OCI_NUM</code></strong>   + <strong><code>OCI_RETURN_NULLS</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_field_is_null" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_field_is_null</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Checks if the given <code class="parameter">field</code> from the current row of   <code class="parameter">statement</code> is <strong><code>NULL</code></strong>.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>oci_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns the name of the <code class="parameter">field</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_precision" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_field_precision</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns precision of the <code class="parameter">field</code>.  </p>  <p class="para">   For FLOAT columns, precision is nonzero and scale is -127.   If precision is 0, then column is NUMBER. Else it&#039;s   NUMBER(precision, scale).  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_scale" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_field_scale</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns the scale of the column with <code class="parameter">field</code> index.  </p>  <p class="para">   For FLOAT columns, precision is nonzero and scale is -127.   If precision is 0, then column is NUMBER. Else it&#039;s   NUMBER(precision, scale).  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_field_size</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns the size of a <code class="parameter">field</code>.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_type" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>oci_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns a field&#039;s data type name.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_field_type_raw" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_field_type_raw</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns Oracle&#039;s raw &quot;SQLT&quot; data type of the <code class="parameter">field</code>.  </p>  <p class="para">   If you want a field&#039;s type name, then use <span class="function"><a href="function.oci-field-type.php" class="function">oci_field_type()</a></span> instead.   </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="col"/>
	</params>
</keyword>
<keyword name="oci_free_collection" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_free_descriptor" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_free_descriptor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$descriptor</code></span>   )</div>  <p class="para rdfs-comment">   Frees a descriptor allocated by <span class="function"><a href="function.oci-new-descriptor.php" class="function">oci_new_descriptor()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_free_statement" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_free_statement</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Frees resources associated with Oracle&#039;s cursor or statement, which was   received from as a result of <span class="function"><a href="function.oci-parse.php" class="function">oci_parse()</a></span> or obtained   from Oracle.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_internal_debug" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>oci_internal_debug</strong></span>    ( <span class="methodparam"><span class="type">bool</span> <code class="parameter">$onoff</code></span>   )</div>  <p class="para rdfs-comment">   Enables or disables internal debug output.    </p>]]></desc>
	<params>
		<param type="int" name="onoff"/>
	</params>
</keyword>
<keyword name="oci_lob_append" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::append</strong></span>    ( <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob_from</code></span>   )</div>  <p class="para rdfs-comment">   Appends data from the large object to the end of another large object.   </p>  <p class="para">   Writing to the large object with this method will fail if buffering was   previously enabled. You must disable buffering before appending. You may   need to flush buffers with <a href="oci-lob.flush.php" class="xref">OCI-Lob::flush</a> before   disabling buffering.  </p>]]></desc>
	<params>
		<param type="object" name="lob"/>
	</params>
</keyword>
<keyword name="oci_lob_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::close</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Closes descriptor of LOB or FILE. This function should be used only with   <a href="oci-lob.writetemporary.php" class="xref">OCI-Lob::writeTemporary</a>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_lob_copy</strong></span>    ( <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob_to</code></span>   , <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob_from</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Copies a large object or a part of a large object to another large object.   Old LOB-recipient data will be overwritten.  </p>  <p class="para">   If you need to copy a particular part of a LOB to a particular position of   a LOB, use <span class="function"><a href="oci-lob.seek.php" class="function">OCI-Lob::seek()</a></span> to move LOB internal pointers.  </p>]]></desc>
	<params>
		<param type="object" name="lob_to"/>
		<param type="object" name="lob_from"/>
		<param type="int" name="length "/>
	</params>
</keyword>
<keyword name="oci_lob_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_lob_copy</strong></span>    ( <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob_to</code></span>   , <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob_from</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Copies a large object or a part of a large object to another large object.   Old LOB-recipient data will be overwritten.  </p>  <p class="para">   If you need to copy a particular part of a LOB to a particular position of   a LOB, use <span class="function"><a href="oci-lob.seek.php" class="function">OCI-Lob::seek()</a></span> to move LOB internal pointers.  </p>]]></desc>
	<params>
		<param type="object" name="lob_to"/>
		<param type="object" name="lob_from"/>
	</params>
</keyword>
<keyword name="oci_lob_eof" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::eof</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Tells whether the internal pointer of large object is at the end of LOB.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_erase" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::erase</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Erases a specified portion of the internal LOB data starting at a   specified <code class="parameter">offset</code>. If called without parameters, it   erases all LOB data.  </p>  <p class="para">   For BLOBs, erasing means that the existing LOB value is overwritten with   zero-bytes. For CLOBs, the existing LOB value is overwritten with spaces.  </p>]]></desc>
	<params>
		<param type="int" name="offset"/>
		<param type="int" name="length "/>
	</params>
</keyword>
<keyword name="oci_lob_erase" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::erase</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Erases a specified portion of the internal LOB data starting at a   specified <code class="parameter">offset</code>. If called without parameters, it   erases all LOB data.  </p>  <p class="para">   For BLOBs, erasing means that the existing LOB value is overwritten with   zero-bytes. For CLOBs, the existing LOB value is overwritten with spaces.  </p>]]></desc>
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="oci_lob_erase" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::erase</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Erases a specified portion of the internal LOB data starting at a   specified <code class="parameter">offset</code>. If called without parameters, it   erases all LOB data.  </p>  <p class="para">   For BLOBs, erasing means that the existing LOB value is overwritten with   zero-bytes. For CLOBs, the existing LOB value is overwritten with spaces.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_lob_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::export</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Exports LOB contents to a file.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="oci_lob_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::export</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Exports LOB contents to a file.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="start"/>
	</params>
</keyword>
<keyword name="oci_lob_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::export</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Exports LOB contents to a file.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="oci_lob_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::export</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Exports LOB contents to a file.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_lob_flush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::flush</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>OCI-Lob::flush()</strong></span> actually writes data to the server.  </p>]]></desc>
	<params>
		<param type="int" name="flag "/>
	</params>
</keyword>
<keyword name="oci_lob_flush" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::flush</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>OCI-Lob::flush()</strong></span> actually writes data to the server.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_lob_import" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::import</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Writes data from the <code class="parameter">filename</code> in to the current   position of large object.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="oci_lob_is_equal" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_lob_is_equal</strong></span>    ( <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob1</code></span>   , <span class="methodparam"><span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <code class="parameter">$lob2</code></span>   )</div>  <p class="para rdfs-comment">   Compares two LOB/FILE locators.   </p>]]></desc>
	<params>
		<param type="object" name="lob1"/>
		<param type="object" name="lob2"/>
	</params>
</keyword>
<keyword name="oci_lob_load" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>OCI-Lob::load</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns large object&#039;s contents. As script execution is terminated   when the <a href="ini.core.php#ini.memory-limit" class="link">memory_limit</a> is reached,   ensure that the LOB does not exceed this limit. In most cases it&#039;s   recommended to use <a href="oci-lob.read.php" class="xref">OCI-Lob::read</a> instead.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_read" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>OCI-Lob::read</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   )</div>  <p class="para rdfs-comment">   Reads <code class="parameter">length</code> bytes from the current position of   LOB&#039;s internal pointer.  </p>   <p class="para">    Reading stops when <code class="parameter">length</code> bytes have been read or   end of the large object is reached. Internal pointer of the large object   will be shifted on the amount of bytes read.  </p>]]></desc>
	<params>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="oci_lob_rewind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::rewind</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Sets the internal pointer to the beginning of the large object.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_save" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::save</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Saves <code class="parameter">data</code> to the large object.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="int" name="offset "/>
	</params>
</keyword>
<keyword name="oci_lob_save" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::save</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>  ] )</div>  <p class="para rdfs-comment">   Saves <code class="parameter">data</code> to the large object.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="oci_lob_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::seek</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$whence</code><span class="initializer"> = <strong><code>OCI_SEEK_SET</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the internal pointer of the large object.  </p>]]></desc>
	<params>
		<param type="int" name="offset"/>
		<param type="int" name="whence "/>
	</params>
</keyword>
<keyword name="oci_lob_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::seek</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$whence</code><span class="initializer"> = <strong><code>OCI_SEEK_SET</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the internal pointer of the large object.  </p>]]></desc>
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="oci_lob_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::size</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the size of the large object.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_tell" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::tell</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the current position of a LOB&#039;s internal pointer.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="oci_lob_truncate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::truncate</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Truncates the LOB.  </p>]]></desc>
	<params>
		<param type="int" name="length "/>
	</params>
</keyword>
<keyword name="oci_lob_truncate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>OCI-Lob::truncate</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Truncates the LOB.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="oci_lob_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::write</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes data from the parameter <code class="parameter">data</code> into the   current position of LOB&#039;s internal pointer.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="length "/>
	</params>
</keyword>
<keyword name="oci_lob_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>OCI-Lob::write</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes data from the parameter <code class="parameter">data</code> into the   current position of LOB&#039;s internal pointer.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="oci_lob_write_temporary" type="function" returnType="bool">
	<params>
		<param type="string" name="var"/>
		<param type="int" name="lob_type"/>
	</params>
</keyword>
<keyword name="oci_lob_write_temporary" type="function" returnType="bool">
	<params>
		<param type="string" name="var"/>
	</params>
</keyword>
<keyword name="oci_new_collection" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type OCI-Collection">OCI-Collection</span></span> <span class="methodname"><strong>oci_new_collection</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$tdo</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Allocates a new collection object.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="tdo"/>
		<param type="string" name="schema"/>
	</params>
</keyword>
<keyword name="oci_new_collection" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type OCI-Collection">OCI-Collection</span></span> <span class="methodname"><strong>oci_new_collection</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$tdo</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   Allocates a new collection object.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="tdo"/>
	</params>
</keyword>
<keyword name="oci_new_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_new_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a new connection to an Oracle server and logs on.  </p>  <p class="para">   Unlike <span class="function"><a href="function.oci-connect.php" class="function">oci_connect()</a></span> and    <span class="function"><a href="function.oci-pconnect.php" class="function">oci_pconnect()</a></span>, <span class="function"><strong>oci_new_connect()</strong></span>   does not cache connections and will always return a brand-new freshly   opened connection handle. This is useful if your application needs   transactional isolation between two sets of queries.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
	</params>
</keyword>
<keyword name="oci_new_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_new_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Establishes a new connection to an Oracle server and logs on.  </p>  <p class="para">   Unlike <span class="function"><a href="function.oci-connect.php" class="function">oci_connect()</a></span> and    <span class="function"><a href="function.oci-pconnect.php" class="function">oci_pconnect()</a></span>, <span class="function"><strong>oci_new_connect()</strong></span>   does not cache connections and will always return a brand-new freshly   opened connection handle. This is useful if your application needs   transactional isolation between two sets of queries.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
	</params>
</keyword>
<keyword name="oci_new_cursor" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_new_cursor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   Allocates a new statement handle on the specified connection.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_new_descriptor" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <span class="methodname"><strong>oci_new_descriptor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = OCI_DTYPE_LOB</span></span>  ] )</div>  <p class="para rdfs-comment">   Allocates resources to hold descriptor or LOB locator.   </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="oci_new_descriptor" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type OCI-Lob">OCI-Lob</span></span> <span class="methodname"><strong>oci_new_descriptor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = OCI_DTYPE_LOB</span></span>  ] )</div>  <p class="para rdfs-comment">   Allocates resources to hold descriptor or LOB locator.   </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of columns in the given <code class="parameter">statement</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>oci_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of rows affected during statement execution.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="oci_parse" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_parse</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sql_text</code></span>   )</div>  <p class="para rdfs-comment">   Prepares <code class="parameter">sql_text</code> using   <code class="parameter">connection</code> and returns the statement identifier,   which can be used with <span class="function"><a href="function.oci-bind-by-name.php" class="function">oci_bind_by_name()</a></span>,    <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> and other functions.  </p>  <p class="para">   Statement identifiers can be freed   with <span class="function"><a href="function.oci-free-statement.php" class="function">oci_free_statement()</a></span> or by setting the   variable to <strong><code>NULL</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="oci_password_change" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_password_change</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$old_password</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_password</code></span>   )</div>   <div class="methodsynopsis dc-description">    <span class="type">resource</span> <span class="methodname"><strong>oci_password_change</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dbname</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$old_password</code></span>    , <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_password</code></span>    )</div>  <p class="para rdfs-comment">   Changes password for user with <code class="parameter">username</code>.  </p>  <p class="para">   The <span class="function"><strong>oci_password_change()</strong></span> function is most useful for PHP command-line scripts,   or when non-persistent connections are used throughout the PHP application.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="username"/>
		<param type="string" name="old_password"/>
		<param type="string" name="new_password"/>
	</params>
</keyword>
<keyword name="oci_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Creates a persistent connection to an Oracle server and logs on.   </p>  <p class="para">   Persistent connections are cached and re-used between requests, resulting   in reduced overhead on each page load; a typical PHP application will have   a single persistent connection open against an  Oracle server per Apache   child process (or PHP FastCGI/CGI process). See the <a href="features.persistent-connections.php" class="link">Persistent Database   Connections</a> section for more information.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
		<param type="string" name="charset "/>
	</params>
</keyword>
<keyword name="oci_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Creates a persistent connection to an Oracle server and logs on.   </p>  <p class="para">   Persistent connections are cached and re-used between requests, resulting   in reduced overhead on each page load; a typical PHP application will have   a single persistent connection open against an  Oracle server per Apache   child process (or PHP FastCGI/CGI process). See the <a href="features.persistent-connections.php" class="link">Persistent Database   Connections</a> section for more information.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
		<param type="string" name="db"/>
	</params>
</keyword>
<keyword name="oci_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>oci_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_set</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$session_mode</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Creates a persistent connection to an Oracle server and logs on.   </p>  <p class="para">   Persistent connections are cached and re-used between requests, resulting   in reduced overhead on each page load; a typical PHP application will have   a single persistent connection open against an  Oracle server per Apache   child process (or PHP FastCGI/CGI process). See the <a href="features.persistent-connections.php" class="link">Persistent Database   Connections</a> section for more information.  </p>]]></desc>
	<params>
		<param type="string" name="user"/>
		<param type="string" name="pass"/>
	</params>
</keyword>
<keyword name="oci_result" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>oci_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns the data from <code class="parameter">field</code> in the current row,   fetched by <span class="function"><a href="function.oci-fetch.php" class="function">oci_fetch()</a></span>.   </p>  <p class="para">For details on the data type mapping performed bythe OCI8 extension, see the <a href="oci8.datatypes.php" class="link">datatypessupported by the driver</a></p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="mixed" name="column"/>
	</params>
</keyword>
<keyword name="oci_rollback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_rollback</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   Reverts all uncommitted changes for the Oracle   <code class="parameter">connection</code> and ends the transaction.  It   releases all locks held.  All Oracle <em>SAVEPOINTS</em>   are erased.  </p>  <p class="para">   A transaction begins when the first SQL statement that changes data   is executed with <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> using   the <strong><code>OCI_NO_AUTO_COMMIT</code></strong> flag.  Further data   changes made by other statements become part of the same   transaction.  Data changes made in a transaction are temporary   until the transaction is committed or rolled back.  Other users of   the database will not see the changes until they are committed.  </p>  <p class="para">   When inserting or updating data, using transactions is recommended   for relational data consistency and for performance reasons.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_server_version" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>oci_server_version</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with the Oracle Database version and available options  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="oci_set_prefetch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>oci_set_prefetch</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$rows</code></span>   )</div>  <p class="para rdfs-comment">   Sets the number of rows to be buffered by the Oracle Client   libraries after a successful query call   to <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span> and for each subsequent   internal fetch request to the database.  For queries returning a   large number of rows, performance can be significantly improved by   increasing the prefetch count above the   default <a href="oci8.configuration.php#ini.oci8.default-prefetch" class="link">oci8.default_prefetch</a>   value.  </p>  <p class="para">   Prefetching is Oracle&#039;s efficient way of returning more than one   data row from the database in each network request.  This can   result in better network and CPU utilization.  The buffering of   rows is internal to OCI8 and the behavior of OCI8 fetching   functions is unchanged regardless of the prefetch count. For   example, <span class="function"><a href="function.oci-fetch-row.php" class="function">oci_fetch_row()</a></span> will always return one   row.  The prefetch buffer is per-statement and is not used by   re-executed statements or by other connections.  </p>  <p class="para">   Call <span class="function"><strong>oci_set_prefetch()</strong></span> before   calling <span class="function"><a href="function.oci-execute.php" class="function">oci_execute()</a></span>.  </p>  <p class="para">   A tuning goal is to set the prefetch value to a reasonable size for   the network and database to handle.  For queries returning a very   large number of rows, overall system efficiency might be better if   rows are retrieved from the database in several chunks (i.e set the   prefetch value smaller than the number of rows).  This allows the   database to handle other users&#039; statements while the PHP script is   processing the current set of rows.  </p>  <p class="para">   Query prefetching was introduced in Oracle 8<em class="emphasis">i</em>.  REF CURSOR   prefetching was introduced in Oracle 11<em class="emphasis">g</em>R2 and occurs when PHP is   linked with Oracle 11<em class="emphasis">g</em>R2 (or later) Client libraries.   Nested cursor prefetching was   introduced in Oracle 11<em class="emphasis">g</em>R2 and requires both the Oracle Client   libraries and the database to be version 11<em class="emphasis">g</em>R2 or greater.    </p>  <p class="para">   Prefetching is not supported when queries contain LONG or LOB   columns.  The prefetch value is ignored and single-row fetches will   be used in all the situations when prefetching is not supported.  </p>  <p class="para">   When using Oracle Database 12<em class="emphasis">c</em>, the prefetch   value set by PHP can be overridden by Oracle&#039;s   client <em>oraaccess.xml</em> configuration file.  Refer   to Oracle documentation for more detail.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="int" name="prefetch_rows"/>
	</params>
</keyword>
<keyword name="oci_statement_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>oci_statement_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$statement</code></span>   )</div>  <p class="para rdfs-comment">   Returns a keyword identifying the type of the   OCI8 <code class="parameter">statement</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
	</params>
</keyword>
<keyword name="ocifetchinto" type="function" returnType="int">
	<desc><![CDATA[<p class="para">Obsolete variant of <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>, <span class="function"><a href="function.oci-fetch-object.php" class="function">oci_fetch_object()</a></span>,  <span class="function"><a href="function.oci-fetch-assoc.php" class="function">oci_fetch_assoc()</a></span> and  <span class="function"><a href="function.oci-fetch-row.php" class="function">oci_fetch_row()</a></span></p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This alias has been <em class="emphasis">DEPRECATED</em> as of PHP 5.4.0.  Relyingon this alias is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="ocifetchinto" type="function" returnType="int">
	<desc><![CDATA[<p class="para">Obsolete variant of <span class="function"><a href="function.oci-fetch-array.php" class="function">oci_fetch_array()</a></span>, <span class="function"><a href="function.oci-fetch-object.php" class="function">oci_fetch_object()</a></span>,  <span class="function"><a href="function.oci-fetch-assoc.php" class="function">oci_fetch_assoc()</a></span> and  <span class="function"><a href="function.oci-fetch-row.php" class="function">oci_fetch_row()</a></span></p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This alias has been <em class="emphasis">DEPRECATED</em> as of PHP 5.4.0.  Relyingon this alias is highly discouraged.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="stmt"/>
		<param type="array" name="&amp;output"/>
	</params>
</keyword>
<keyword name="ocigetbufferinglob" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ocisetbufferinglob" type="function" returnType="bool">
	<params>
		<param type="boolean" name="flag"/>
	</params>
</keyword>
<keyword name="octdec" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>octdec</strong></span>     ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$octal_string</code></span>    )</div>  <p class="para rdfs-comment">   Returns the decimal equivalent of the octal number   represented by the <code class="parameter">octal_string</code> argument.  </p>]]></desc>
	<params>
		<param type="string" name="octal_number"/>
	</params>
</keyword>
<keyword name="odbc_autocommit" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>odbc_autocommit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Toggles autocommit behaviour.  </p>  <p class="para">   By default, auto-commit is on for a connection.  Disabling   auto-commit is equivalent with starting a transaction.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="int" name="OnOff"/>
	</params>
</keyword>
<keyword name="odbc_autocommit" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>odbc_autocommit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$OnOff</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Toggles autocommit behaviour.  </p>  <p class="para">   By default, auto-commit is on for a connection.  Disabling   auto-commit is equivalent with starting a transaction.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_binmode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_binmode</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Enables handling of binary column data. ODBC SQL types affected are   <em>BINARY</em>, <em>VARBINARY</em>, and   <em>LONGVARBINARY</em>.  </p>  <p class="para">   When binary SQL data is converted to character C data, each byte   (8 bits) of source data is represented as two ASCII characters.   These characters are the ASCII character representation of the   number in its hexadecimal form. For example, a binary   <em>00000001</em> is converted to   <em>&quot;01&quot;</em> and a binary <em>11111111</em>   is converted to <em>&quot;FF&quot;</em>.   <table class="doctable table">    <caption><strong>LONGVARBINARY handling</strong></caption>         <thead>      <tr>       <th>binmode</th>       <th>longreadlen</th>       <th>result</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><strong><code>ODBC_BINMODE_PASSTHRU</code></strong></td>       <td>0</td>       <td>passthru</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_RETURN</code></strong></td>       <td>0</td>       <td>passthru</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_CONVERT</code></strong></td>       <td>0</td>       <td>passthru</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_PASSTHRU</code></strong></td>       <td>0</td>       <td>passthru</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_PASSTHRU</code></strong></td>       <td>&gt;0</td>       <td>passthru</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_RETURN</code></strong></td>       <td>&gt;0</td>       <td>return as is</td>      </tr>      <tr>       <td><strong><code>ODBC_BINMODE_CONVERT</code></strong></td>       <td>&gt;0</td>       <td>return as char</td>      </tr>     </tbody>       </table>  </p>  <p class="para">   If <span class="function"><a href="function.odbc-fetch-into.php" class="function">odbc_fetch_into()</a></span> is used, passthru means that an   empty string is returned for these columns.  </p>]]></desc>
	<params>
		<param type="int" name="result_id"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="odbc_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>odbc_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <p class="para rdfs-comment">   Closes down the connection to the database server.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_close_all" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>odbc_close_all</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>odbc_close_all()</strong></span> will close down all   connections to database server(s).  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="odbc_columnprivileges" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columnprivileges</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>   )</div>  <p class="para rdfs-comment">   Lists columns and associated privileges for the given table.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="catalog"/>
		<param type="string" name="schema"/>
		<param type="string" name="table"/>
		<param type="string" name="column"/>
	</params>
</keyword>
<keyword name="odbc_columns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all columns in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="table_name"/>
		<param type="string" name="column_name"/>
	</params>
</keyword>
<keyword name="odbc_columns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all columns in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="table_name"/>
	</params>
</keyword>
<keyword name="odbc_columns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all columns in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
	</params>
</keyword>
<keyword name="odbc_columns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all columns in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
	</params>
</keyword>
<keyword name="odbc_columns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$schema</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$column_name</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all columns in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_commit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_commit</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <p class="para rdfs-comment">   Commits all pending transactions on the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dsn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$cursor_type</code></span>  ] )</div>  <p class="simpara">   The connection id returned by this functions is needed by other   ODBC functions. You can have multiple connections open at once as long as   they either use different db or different credentials.  </p>  <p class="simpara">   With some ODBC drivers, executing a complex stored procedure may   fail with an error similar to: &quot;Cannot open a cursor on a stored   procedure that has anything other than a single select statement   in it&quot;.  Using SQL_CUR_USE_ODBC may avoid that error. Also, some   drivers don&#039;t support the optional row_number parameter in   <span class="function"><a href="function.odbc-fetch-row.php" class="function">odbc_fetch_row()</a></span>. SQL_CUR_USE_ODBC might help   in that case, too.  </p>]]></desc>
	<params>
		<param type="string" name="DSN"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="int" name="cursor_option"/>
	</params>
</keyword>
<keyword name="odbc_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dsn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$cursor_type</code></span>  ] )</div>  <p class="simpara">   The connection id returned by this functions is needed by other   ODBC functions. You can have multiple connections open at once as long as   they either use different db or different credentials.  </p>  <p class="simpara">   With some ODBC drivers, executing a complex stored procedure may   fail with an error similar to: &quot;Cannot open a cursor on a stored   procedure that has anything other than a single select statement   in it&quot;.  Using SQL_CUR_USE_ODBC may avoid that error. Also, some   drivers don&#039;t support the optional row_number parameter in   <span class="function"><a href="function.odbc-fetch-row.php" class="function">odbc_fetch_row()</a></span>. SQL_CUR_USE_ODBC might help   in that case, too.  </p>]]></desc>
	<params>
		<param type="string" name="DSN"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="odbc_cursor" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_cursor</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Gets the cursorname for the given result_id.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_data_source" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>odbc_data_source</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$fetch_type</code></span>   )</div>  <p class="para rdfs-comment">   This function will return the list of available DSN (after calling it   several times).  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="int" name="fetch_type"/>
	</params>
</keyword>
<keyword name="odbc_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>  ] )</div>  <p class="simpara">   Returns a six-digit ODBC state, or an empty string if there has been no   errors.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>  ] )</div>  <p class="simpara">   Returns a six-digit ODBC state, or an empty string if there has been no   errors.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="odbc_errormsg" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_errormsg</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>  ] )</div>  <p class="simpara">   Returns a string containing the last ODBC error message, or an empty   string if there has been no errors.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_errormsg" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_errormsg</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>  ] )</div>  <p class="simpara">   Returns a string containing the last ODBC error message, or an empty   string if there has been no errors.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="odbc_exec" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>  ] )</div>  <p class="para rdfs-comment">   Sends an SQL statement to the database server.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="query"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="odbc_exec" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>  ] )</div>  <p class="para rdfs-comment">   Sends an SQL statement to the database server.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="odbc_execute" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$parameters_array</code></span>  ] )</div>  <p class="para rdfs-comment">   Executes a statement prepared with <span class="function"><a href="function.odbc-prepare.php" class="function">odbc_prepare()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="array" name="parameters_array"/>
	</params>
</keyword>
<keyword name="odbc_execute" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$parameters_array</code></span>  ] )</div>  <p class="para rdfs-comment">   Executes a statement prepared with <span class="function"><a href="function.odbc-prepare.php" class="function">odbc_prepare()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>odbc_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch an associative <span class="type"><a href="language.types.array.php" class="type array">array</a></span> from an ODBC query. See the    changelog below for when this function is available.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="rownumber"/>
	</params>
</keyword>
<keyword name="odbc_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>odbc_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch an associative <span class="type"><a href="language.types.array.php" class="type array">array</a></span> from an ODBC query. See the    changelog below for when this function is available.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="odbc_fetch_into" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_fetch_into</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$result_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch one result row into <span class="type"><a href="language.types.array.php" class="type array">array</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="array" name="result_array"/>
		<param type="int" name="rownumber"/>
	</params>
</keyword>
<keyword name="odbc_fetch_into" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_fetch_into</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$result_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch one result row into <span class="type"><a href="language.types.array.php" class="type array">array</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="array" name="result_array"/>
	</params>
</keyword>
<keyword name="odbc_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>odbc_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch an <span class="type"><a href="language.types.object.php" class="type object">object</a></span> from an ODBC query. See the changelog below   for when this function is available.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="rownumber"/>
	</params>
</keyword>
<keyword name="odbc_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>odbc_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownumber</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetch an <span class="type"><a href="language.types.object.php" class="type object">object</a></span> from an ODBC query. See the changelog below   for when this function is available.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="odbc_fetch_row" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetches a row of the data that was returned by <span class="function"><a href="function.odbc-do.php" class="function">odbc_do()</a></span>   or <span class="function"><a href="function.odbc-exec.php" class="function">odbc_exec()</a></span>. After <span class="function"><strong>odbc_fetch_row()</strong></span>   is called, the fields of that row can be accessed with   <span class="function"><a href="function.odbc-result.php" class="function">odbc_result()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="row_number"/>
	</params>
</keyword>
<keyword name="odbc_fetch_row" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>  ] )</div>  <p class="para rdfs-comment">   Fetches a row of the data that was returned by <span class="function"><a href="function.odbc-do.php" class="function">odbc_do()</a></span>   or <span class="function"><a href="function.odbc-exec.php" class="function">odbc_exec()</a></span>. After <span class="function"><strong>odbc_fetch_row()</strong></span>   is called, the fields of that row can be accessed with   <span class="function"><a href="function.odbc-result.php" class="function">odbc_result()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_field_len" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_field_len</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets the length of the field referenced by number in the given result   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="odbc_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets the name of the field occupying the given column number in the given   result identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="odbc_field_num" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_field_num</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_name</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of the column slot that corresponds to the named field in   the given result identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="string" name="field_name"/>
	</params>
</keyword>
<keyword name="odbc_field_scale" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_field_scale</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets the scale of the field referenced by number in the given result   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="odbc_field_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>odbc_field_type</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   Gets the SQL type of the field referenced by number in the given result   identifier.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="odbc_foreignkeys" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_foreignkeys</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pk_qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pk_owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pk_table</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fk_qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fk_owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$fk_table</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves a list of foreign keys in the specified table or a list of   foreign keys in other tables that refer to the primary key in the   specified table  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="pk_qualifier"/>
		<param type="string" name="pk_owner"/>
		<param type="string" name="pk_table"/>
		<param type="string" name="fk_qualifier"/>
		<param type="string" name="fk_owner"/>
		<param type="string" name="fk_table"/>
	</params>
</keyword>
<keyword name="odbc_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Free resources associated with a result.  </p>  <p class="para">   <span class="function"><strong>odbc_free_result()</strong></span> only needs to be called if you are   worried about using too much memory while your script is running.   All result memory will automatically be freed when the script is finished.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_gettypeinfo" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_gettypeinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$data_type</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about data types supported by the data source.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="int" name="data_type"/>
	</params>
</keyword>
<keyword name="odbc_gettypeinfo" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_gettypeinfo</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$data_type</code></span>  ] )</div>  <p class="para rdfs-comment">   Retrieves information about data types supported by the data source.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_longreadlen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_longreadlen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   )</div>  <p class="para rdfs-comment">   Enables handling of LONG and LONGVARBINARY columns.  </p>]]></desc>
	<params>
		<param type="int" name="result_id"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="odbc_next_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_next_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Checks if there are more result sets available as well as allowing access   to the next result set via <span class="function"><a href="function.odbc-fetch-array.php" class="function">odbc_fetch_array()</a></span>,   <span class="function"><a href="function.odbc-fetch-row.php" class="function">odbc_fetch_row()</a></span>, <span class="function"><a href="function.odbc-result.php" class="function">odbc_result()</a></span>, etc.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of fields (columns) in an ODBC result.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   )</div>  <p class="para rdfs-comment">   Gets the number of rows in a result. For INSERT, UPDATE and DELETE   statements <span class="function"><strong>odbc_num_rows()</strong></span> returns the number of rows   affected.  For a SELECT clause this <em>can</em> be the number   of rows available.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dsn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$cursor_type</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens a persistent database connection.  </p>  <p class="para">   This function is much like   <span class="function"><a href="function.odbc-connect.php" class="function">odbc_connect()</a></span>, except that the connection is   not really closed when the script has finished.  Future requests   for a connection with the same <code class="parameter">dsn</code>,   <code class="parameter">user</code>, <code class="parameter">password</code>   combination (via <span class="function"><a href="function.odbc-connect.php" class="function">odbc_connect()</a></span> and   <span class="function"><strong>odbc_pconnect()</strong></span>) can reuse the persistent   connection.  </p>]]></desc>
	<params>
		<param type="string" name="DSN"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="int" name="cursor_option"/>
	</params>
</keyword>
<keyword name="odbc_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dsn</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$user</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$cursor_type</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens a persistent database connection.  </p>  <p class="para">   This function is much like   <span class="function"><a href="function.odbc-connect.php" class="function">odbc_connect()</a></span>, except that the connection is   not really closed when the script has finished.  Future requests   for a connection with the same <code class="parameter">dsn</code>,   <code class="parameter">user</code>, <code class="parameter">password</code>   combination (via <span class="function"><a href="function.odbc-connect.php" class="function">odbc_connect()</a></span> and   <span class="function"><strong>odbc_pconnect()</strong></span>) can reuse the persistent   connection.  </p>]]></desc>
	<params>
		<param type="string" name="DSN"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="odbc_prepare" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query_string</code></span>   )</div>  <p class="para rdfs-comment">   Prepares a statement for execution. The result identifier can be used   later to execute the statement with <span class="function"><a href="function.odbc-execute.php" class="function">odbc_execute()</a></span>.  </p>  <p class="para">   Some databases (such as IBM DB2, MS SQL Server, and Oracle) support   stored procedures that accept parameters of type IN, INOUT, and OUT as   defined by the ODBC specification.  However, the Unified ODBC driver   currently only supports parameters of type IN to stored procedures.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="odbc_primarykeys" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_primarykeys</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table</code></span>   )</div>  <p class="para rdfs-comment">   Returns a result identifier that can be used to fetch the column names   that comprise the primary key for a table.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="table"/>
	</params>
</keyword>
<keyword name="odbc_procedurecolumns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedurecolumns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedurecolumns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$proc</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$column</code></span>   )</div>  <p class="para rdfs-comment">   Retrieve information about parameters to procedures.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="proc"/>
		<param type="string" name="column"/>
	</params>
</keyword>
<keyword name="odbc_procedurecolumns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedurecolumns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedurecolumns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$proc</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$column</code></span>   )</div>  <p class="para rdfs-comment">   Retrieve information about parameters to procedures.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_procedures" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedures</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedures</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Lists all procedures in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="odbc_procedures" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedures</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_procedures</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Lists all procedures in the requested range.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_result" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>odbc_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Get result data  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="odbc_result_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_result_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>  ] )</div>  <p class="para rdfs-comment">   Prints all rows from a result identifier produced by   <span class="function"><a href="function.odbc-exec.php" class="function">odbc_exec()</a></span>. The result is printed in HTML table format.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="odbc_result_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>odbc_result_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>  ] )</div>  <p class="para rdfs-comment">   Prints all rows from a result identifier produced by   <span class="function"><a href="function.odbc-exec.php" class="function">odbc_exec()</a></span>. The result is printed in HTML table format.  </p>]]></desc>
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="odbc_rollback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_rollback</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   )</div>  <p class="para rdfs-comment">   Rolls back all pending statements on the connection.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="odbc_setoption" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>odbc_setoption</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$function</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$param</code></span>   )</div>  <p class="para rdfs-comment">   This function allows fiddling with the ODBC options for a   particular connection or query result.  It was written to help   find work around to problems in quirky ODBC drivers.  You should   probably only use this function if you are an ODBC programmer and   understand the effects the various options will have.  You will   certainly need a good ODBC reference to explain all the different   options and values that can be used.  Different driver versions   support different options.  </p>  <p class="para">   Because the effects may vary depending on the ODBC driver, use of   this function in scripts to be made publicly available is   strongly discouraged.  Also, some ODBC options are not available   to this function because they must be set before the connection   is established or the query is prepared.  However, if on a   particular job it can make PHP work so your boss doesn&#039;t tell you   to use a commercial product, that&#039;s all that really   matters.  </p>]]></desc>
	<params>
		<param type="resource" name="conn_id"/>
		<param type="int" name="which"/>
		<param type="int" name="option"/>
		<param type="int" name="value"/>
	</params>
</keyword>
<keyword name="odbc_specialcolumns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_specialcolumns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$scope</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$nullable</code></span>   )</div>  <p class="para rdfs-comment">   Retrieves either the optimal set of columns that uniquely identifies a   row in the table, or columns that are automatically updated when any   value in the row is updated by a transaction.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="int" name="type"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="table"/>
		<param type="int" name="scope"/>
		<param type="int" name="nullable"/>
	</params>
</keyword>
<keyword name="odbc_statistics" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_statistics</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$unique</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$accuracy</code></span>   )</div>  <p class="para rdfs-comment">   Get statistics about a table and its indexes.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="name"/>
		<param type="int" name="unique"/>
		<param type="int" name="accuracy"/>
	</params>
</keyword>
<keyword name="odbc_tableprivileges" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tableprivileges</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Lists tables in the requested range and the privileges associated   with each table.  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="odbc_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tables</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all tables in the requested range.  </p>  <p class="para">   To support enumeration of qualifiers, owners, and table types,   the following special semantics for the   <code class="parameter">qualifier</code>, <code class="parameter">owner</code>,   <code class="parameter">name</code>, and   <code class="parameter">table_type</code> are available:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      If <code class="parameter">qualifier</code> is a single percent      character (%) and <code class="parameter">owner</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid qualifiers for the data      source. (All columns except the TABLE_QUALIFIER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">owner</code> is a single percent character      (%) and <code class="parameter">qualifier</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid owners for the data source. (All      columns except the TABLE_OWNER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">table_type</code> is a single percent      character (%) and <code class="parameter">qualifier</code>,      <code class="parameter">owner</code> and <code class="parameter">name</code>      are empty strings, then the result set contains a list of      valid table types for the data source. (All columns except the      TABLE_TYPE column contain NULLs.)     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="name"/>
		<param type="string" name="table_types"/>
	</params>
</keyword>
<keyword name="odbc_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tables</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all tables in the requested range.  </p>  <p class="para">   To support enumeration of qualifiers, owners, and table types,   the following special semantics for the   <code class="parameter">qualifier</code>, <code class="parameter">owner</code>,   <code class="parameter">name</code>, and   <code class="parameter">table_type</code> are available:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      If <code class="parameter">qualifier</code> is a single percent      character (%) and <code class="parameter">owner</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid qualifiers for the data      source. (All columns except the TABLE_QUALIFIER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">owner</code> is a single percent character      (%) and <code class="parameter">qualifier</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid owners for the data source. (All      columns except the TABLE_OWNER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">table_type</code> is a single percent      character (%) and <code class="parameter">qualifier</code>,      <code class="parameter">owner</code> and <code class="parameter">name</code>      are empty strings, then the result set contains a list of      valid table types for the data source. (All columns except the      TABLE_TYPE column contain NULLs.)     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="odbc_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tables</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all tables in the requested range.  </p>  <p class="para">   To support enumeration of qualifiers, owners, and table types,   the following special semantics for the   <code class="parameter">qualifier</code>, <code class="parameter">owner</code>,   <code class="parameter">name</code>, and   <code class="parameter">table_type</code> are available:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      If <code class="parameter">qualifier</code> is a single percent      character (%) and <code class="parameter">owner</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid qualifiers for the data      source. (All columns except the TABLE_QUALIFIER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">owner</code> is a single percent character      (%) and <code class="parameter">qualifier</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid owners for the data source. (All      columns except the TABLE_OWNER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">table_type</code> is a single percent      character (%) and <code class="parameter">qualifier</code>,      <code class="parameter">owner</code> and <code class="parameter">name</code>      are empty strings, then the result set contains a list of      valid table types for the data source. (All columns except the      TABLE_TYPE column contain NULLs.)     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
		<param type="string" name="owner"/>
	</params>
</keyword>
<keyword name="odbc_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tables</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all tables in the requested range.  </p>  <p class="para">   To support enumeration of qualifiers, owners, and table types,   the following special semantics for the   <code class="parameter">qualifier</code>, <code class="parameter">owner</code>,   <code class="parameter">name</code>, and   <code class="parameter">table_type</code> are available:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      If <code class="parameter">qualifier</code> is a single percent      character (%) and <code class="parameter">owner</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid qualifiers for the data      source. (All columns except the TABLE_QUALIFIER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">owner</code> is a single percent character      (%) and <code class="parameter">qualifier</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid owners for the data source. (All      columns except the TABLE_OWNER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">table_type</code> is a single percent      character (%) and <code class="parameter">qualifier</code>,      <code class="parameter">owner</code> and <code class="parameter">name</code>      are empty strings, then the result set contains a list of      valid table types for the data source. (All columns except the      TABLE_TYPE column contain NULLs.)     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
		<param type="string" name="qualifier"/>
	</params>
</keyword>
<keyword name="odbc_tables" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>odbc_tables</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifier</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$owner</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$types</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Lists all tables in the requested range.  </p>  <p class="para">   To support enumeration of qualifiers, owners, and table types,   the following special semantics for the   <code class="parameter">qualifier</code>, <code class="parameter">owner</code>,   <code class="parameter">name</code>, and   <code class="parameter">table_type</code> are available:   <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      If <code class="parameter">qualifier</code> is a single percent      character (%) and <code class="parameter">owner</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid qualifiers for the data      source. (All columns except the TABLE_QUALIFIER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">owner</code> is a single percent character      (%) and <code class="parameter">qualifier</code> and      <code class="parameter">name</code> are empty strings, then the result      set contains a list of valid owners for the data source. (All      columns except the TABLE_OWNER column contain      NULLs.)     </span>    </li>    <li class="listitem">     <span class="simpara">      If <code class="parameter">table_type</code> is a single percent      character (%) and <code class="parameter">qualifier</code>,      <code class="parameter">owner</code> and <code class="parameter">name</code>      are empty strings, then the result set contains a list of      valid table types for the data source. (All columns except the      TABLE_TYPE column contain NULLs.)     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="resource" name="connection_id"/>
	</params>
</keyword>
<keyword name="open" type="function" returnType="mixed">
	<params>
		<param type="string" name="source"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="open" type="function" returnType="mixed">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="opendir" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>opendir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens up a directory handle to be used in subsequent   <span class="function"><a href="function.closedir.php" class="function">closedir()</a></span>, <span class="function"><a href="function.readdir.php" class="function">readdir()</a></span>, and   <span class="function"><a href="function.rewinddir.php" class="function">rewinddir()</a></span> calls.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="opendir" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>opendir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens up a directory handle to be used in subsequent   <span class="function"><a href="function.closedir.php" class="function">closedir()</a></span>, <span class="function"><a href="function.readdir.php" class="function">readdir()</a></span>, and   <span class="function"><a href="function.rewinddir.php" class="function">rewinddir()</a></span> calls.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="openlog" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openlog</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$ident</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$facility</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openlog()</strong></span> opens a connection to the system   logger for a program.    </p>  <p class="para">    The use of <span class="function"><strong>openlog()</strong></span> is optional. It   will automatically be called by <span class="function"><a href="function.syslog.php" class="function">syslog()</a></span> if   necessary, in which case <code class="parameter">ident</code> will default   to <strong><code>FALSE</code></strong>.  </p>]]></desc>
	<params>
		<param type="string" name="ident"/>
		<param type="int" name="option"/>
		<param type="int" name="facility"/>
	</params>
</keyword>
<keyword name="openssl_csr_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_csr_export</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$out</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$notext</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_export()</strong></span> takes the Certificate Signing   Request represented by <code class="parameter">csr</code> and stores it as   ascii-armoured text into <code class="parameter">out</code>, which is passed by   reference.  </p>]]></desc>
	<params>
		<param type="resource" name="csr"/>
		<param type="string" name="&amp;out"/>
		<param type="bool" name="notext"/>
	</params>
</keyword>
<keyword name="openssl_csr_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_csr_export</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$out</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$notext</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_export()</strong></span> takes the Certificate Signing   Request represented by <code class="parameter">csr</code> and stores it as   ascii-armoured text into <code class="parameter">out</code>, which is passed by   reference.  </p>]]></desc>
	<params>
		<param type="resource" name="csr"/>
		<param type="string" name="&amp;out"/>
	</params>
</keyword>
<keyword name="openssl_csr_export_to_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_csr_export_to_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$outfilename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$notext</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_export_to_file()</strong></span> takes the Certificate   Signing Request represented by <code class="parameter">csr</code> and saves it   as ascii-armoured text into the file named by <code class="parameter">outfilename</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="csr"/>
		<param type="string" name="outfilename"/>
		<param type="bool" name="notext"/>
	</params>
</keyword>
<keyword name="openssl_csr_export_to_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_csr_export_to_file</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$outfilename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$notext</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_export_to_file()</strong></span> takes the Certificate   Signing Request represented by <code class="parameter">csr</code> and saves it   as ascii-armoured text into the file named by <code class="parameter">outfilename</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="csr"/>
		<param type="string" name="outfilename"/>
	</params>
</keyword>
<keyword name="openssl_csr_get_public_key" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_csr_get_public_key</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$csr</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_shortnames</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="mixed" name="csr"/>
	</params>
</keyword>
<keyword name="openssl_csr_get_subject" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>openssl_csr_get_subject</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$csr</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$use_shortnames</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="mixed" name="csr"/>
	</params>
</keyword>
<keyword name="openssl_csr_new" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>openssl_csr_new</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter reference">&$privkey</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extraattribs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_new()</strong></span> generates a new CSR (Certificate Signing Request)   based on the information provided by <code class="parameter">dn</code>, which represents the   Distinguished Name to be used in the certificate.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="array" name="dn"/>
		<param type="resource" name="&amp;privkey"/>
		<param type="array" name="configargs"/>
		<param type="array" name="extraattribs"/>
	</params>
</keyword>
<keyword name="openssl_csr_new" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>openssl_csr_new</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$dn</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter reference">&$privkey</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$extraattribs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_new()</strong></span> generates a new CSR (Certificate Signing Request)   based on the information provided by <code class="parameter">dn</code>, which represents the   Distinguished Name to be used in the certificate.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="array" name="dn"/>
		<param type="resource" name="&amp;privkey"/>
	</params>
</keyword>
<keyword name="openssl_csr_sign" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_csr_sign</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$cacert</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$days</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$serial</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_sign()</strong></span> generates an x509 certificate   resource from the given CSR.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="csr"/>
		<param type="mixed" name="x509"/>
		<param type="mixed" name="priv_key"/>
		<param type="long" name="days"/>
		<param type="array" name="config_args"/>
		<param type="long" name="serial"/>
	</params>
</keyword>
<keyword name="openssl_csr_sign" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_csr_sign</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$cacert</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$days</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$serial</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_sign()</strong></span> generates an x509 certificate   resource from the given CSR.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="csr"/>
		<param type="mixed" name="x509"/>
		<param type="mixed" name="priv_key"/>
		<param type="long" name="days"/>
		<param type="array" name="config_args"/>
	</params>
</keyword>
<keyword name="openssl_csr_sign" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_csr_sign</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$csr</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$cacert</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$days</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$serial</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_csr_sign()</strong></span> generates an x509 certificate   resource from the given CSR.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="csr"/>
		<param type="mixed" name="x509"/>
		<param type="mixed" name="priv_key"/>
		<param type="long" name="days"/>
	</params>
</keyword>
<keyword name="openssl_error_string" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>openssl_error_string</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_error_string()</strong></span> returns the last error from the   openSSL library.  Error messages are queued, so this function should be   called multiple times to collect all of the information. The last error will   be the most recent one.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="openssl_open" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$sealed_data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$open_data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$env_key</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key_id</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$method</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_open()</strong></span> opens (decrypts)   <code class="parameter">sealed_data</code> using the private key associated with   the key identifier <code class="parameter">priv_key_id</code> and the envelope key   <code class="parameter">env_key</code>, and fills   <code class="parameter">open_data</code> with the decrypted data.   The envelope key is generated when the   data are sealed and can only be used by one specific private key. See   <span class="function"><a href="function.openssl-seal.php" class="function">openssl_seal()</a></span> for more information.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="&amp;string" name="opendata"/>
		<param type="string" name="ekey"/>
		<param type="mixed" name="privkey"/>
	</params>
</keyword>
<keyword name="openssl_pkey_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_pkey_export</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$out</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_export()</strong></span> exports   <code class="parameter">key</code> as a PEM encoded string and stores it into   <code class="parameter">out</code> (which is passed by reference).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="&amp;mixed" name="out"/>
		<param type="string" name="passphrase"/>
		<param type="array" name="config_args"/>
	</params>
</keyword>
<keyword name="openssl_pkey_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_pkey_export</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$out</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_export()</strong></span> exports   <code class="parameter">key</code> as a PEM encoded string and stores it into   <code class="parameter">out</code> (which is passed by reference).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="&amp;mixed" name="out"/>
		<param type="string" name="passphrase"/>
	</params>
</keyword>
<keyword name="openssl_pkey_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_pkey_export</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$out</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_export()</strong></span> exports   <code class="parameter">key</code> as a PEM encoded string and stores it into   <code class="parameter">out</code> (which is passed by reference).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="&amp;mixed" name="out"/>
	</params>
</keyword>
<keyword name="openssl_pkey_export_to_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_pkey_export_to_file</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$outfilename</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_export_to_file()</strong></span> saves an ascii-armoured   (PEM encoded) rendition of <code class="parameter">key</code> into the file named   by <code class="parameter">outfilename</code>.    </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="string" name="outfilename"/>
		<param type="string" name="passphrase"/>
		<param type="array" name="config_args"/>
	</params>
</keyword>
<keyword name="openssl_pkey_export_to_file" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_pkey_export_to_file</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$outfilename</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_export_to_file()</strong></span> saves an ascii-armoured   (PEM encoded) rendition of <code class="parameter">key</code> into the file named   by <code class="parameter">outfilename</code>.    </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="key"/>
		<param type="string" name="outfilename"/>
	</params>
</keyword>
<keyword name="openssl_pkey_free" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>openssl_pkey_free</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$key</code></span>   )</div>  <p class="para rdfs-comment">   This function frees a private key created by   <span class="function"><a href="function.openssl-pkey-new.php" class="function">openssl_pkey_new()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
	</params>
</keyword>
<keyword name="openssl_pkey_get_details" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>openssl_pkey_get_details</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$key</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the key details (bits, key, type).  </p>]]></desc>
	<params>
		<param type="resource" name="key"/>
	</params>
</keyword>
<keyword name="openssl_pkey_get_private" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_pkey_get_private</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><a href="function.openssl-get-privatekey.php" class="function">openssl_get_privatekey()</a></span> parses   <code class="parameter">key</code> and prepares it for use by other functions.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
		<param type="string" name="passphrase"/>
	</params>
</keyword>
<keyword name="openssl_pkey_get_private" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_pkey_get_private</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$passphrase</code><span class="initializer"> = &quot;&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><a href="function.openssl-get-privatekey.php" class="function">openssl_get_privatekey()</a></span> parses   <code class="parameter">key</code> and prepares it for use by other functions.  </p>]]></desc>
	<params>
		<param type="string" name="key"/>
	</params>
</keyword>
<keyword name="openssl_pkey_get_public" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_pkey_get_public</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$certificate</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><a href="function.openssl-get-publickey.php" class="function">openssl_get_publickey()</a></span> extracts the public key from   <code class="parameter">certificate</code> and prepares it for use by other   functions.  </p>]]></desc>
	<params>
		<param type="mixed" name="cert"/>
	</params>
</keyword>
<keyword name="openssl_pkey_new" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_pkey_new</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_new()</strong></span> generates a new private and public   key pair.  The public component of the key can be obtained using   <span class="function"><a href="function.openssl-pkey-get-public.php" class="function">openssl_pkey_get_public()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
		<param type="array" name="configargs"/>
	</params>
</keyword>
<keyword name="openssl_pkey_new" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>openssl_pkey_new</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$configargs</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_pkey_new()</strong></span> generates a new private and public   key pair.  The public component of the key can be obtained using   <span class="function"><a href="function.openssl-pkey-get-public.php" class="function">openssl_pkey_get_public()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:  <span class="simpara">  You need to have a valid <var class="filename">openssl.cnf</var> installed for  this function to operate correctly.  See the notes under <a href="openssl.installation.php" class="link">the installation  section</a> for more information. </span></p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="openssl_private_decrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_private_decrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$decrypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_private_decrypt()</strong></span> decrypts   <code class="parameter">data</code> that was previous encrypted via   <span class="function"><a href="function.openssl-public-encrypt.php" class="function">openssl_public_encrypt()</a></span> and stores the result into   <code class="parameter">decrypted</code>.   </p>  <p class="para">   You can use this function e.g. to decrypt data which were supposed only to   you.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="decrypted"/>
		<param type="mixed" name="key"/>
		<param type="int" name="padding"/>
	</params>
</keyword>
<keyword name="openssl_private_decrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_private_decrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$decrypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_private_decrypt()</strong></span> decrypts   <code class="parameter">data</code> that was previous encrypted via   <span class="function"><a href="function.openssl-public-encrypt.php" class="function">openssl_public_encrypt()</a></span> and stores the result into   <code class="parameter">decrypted</code>.   </p>  <p class="para">   You can use this function e.g. to decrypt data which were supposed only to   you.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="decrypted"/>
		<param type="mixed" name="key"/>
	</params>
</keyword>
<keyword name="openssl_private_encrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_private_encrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$crypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_private_encrypt()</strong></span> encrypts <code class="parameter">data</code>   with private <code class="parameter">key</code> and stores the result into   <code class="parameter">crypted</code>. Encrypted data can be decrypted via   <span class="function"><a href="function.openssl-public-decrypt.php" class="function">openssl_public_decrypt()</a></span>.   </p>  <p class="para">   This function can be used e.g. to sign data (or its hash) to prove that it   is not written by someone else.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="mixed" name="key"/>
		<param type="int" name="padding"/>
	</params>
</keyword>
<keyword name="openssl_private_encrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_private_encrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$crypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_private_encrypt()</strong></span> encrypts <code class="parameter">data</code>   with private <code class="parameter">key</code> and stores the result into   <code class="parameter">crypted</code>. Encrypted data can be decrypted via   <span class="function"><a href="function.openssl-public-decrypt.php" class="function">openssl_public_decrypt()</a></span>.   </p>  <p class="para">   This function can be used e.g. to sign data (or its hash) to prove that it   is not written by someone else.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="mixed" name="key"/>
	</params>
</keyword>
<keyword name="openssl_public_decrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_public_decrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$decrypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_public_decrypt()</strong></span> decrypts   <code class="parameter">data</code> that was previous encrypted via   <span class="function"><a href="function.openssl-private-encrypt.php" class="function">openssl_private_encrypt()</a></span> and stores the result into   <code class="parameter">decrypted</code>.    </p>  <p class="para">   You can use this function e.g. to check if the message was written by the   owner of the private key.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="resource" name="key"/>
		<param type="int" name="padding"/>
	</params>
</keyword>
<keyword name="openssl_public_decrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_public_decrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$decrypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_public_decrypt()</strong></span> decrypts   <code class="parameter">data</code> that was previous encrypted via   <span class="function"><a href="function.openssl-private-encrypt.php" class="function">openssl_private_encrypt()</a></span> and stores the result into   <code class="parameter">decrypted</code>.    </p>  <p class="para">   You can use this function e.g. to check if the message was written by the   owner of the private key.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="resource" name="key"/>
	</params>
</keyword>
<keyword name="openssl_public_encrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_public_encrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$crypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_public_encrypt()</strong></span> encrypts <code class="parameter">data</code>   with public <code class="parameter">key</code> and stores the result into   <code class="parameter">crypted</code>. Encrypted data can be decrypted via   <span class="function"><a href="function.openssl-private-decrypt.php" class="function">openssl_private_decrypt()</a></span>.   </p>  <p class="para">   This function can be used e.g. to encrypt message which can be then read   only by owner of the private key. It can be also used to store secure data   in database.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="mixed" name="key"/>
		<param type="int" name="padding"/>
	</params>
</keyword>
<keyword name="openssl_public_encrypt" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_public_encrypt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$crypted</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$padding</code><span class="initializer"> = OPENSSL_PKCS1_PADDING</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_public_encrypt()</strong></span> encrypts <code class="parameter">data</code>   with public <code class="parameter">key</code> and stores the result into   <code class="parameter">crypted</code>. Encrypted data can be decrypted via   <span class="function"><a href="function.openssl-private-decrypt.php" class="function">openssl_private_decrypt()</a></span>.   </p>  <p class="para">   This function can be used e.g. to encrypt message which can be then read   only by owner of the private key. It can be also used to store secure data   in database.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="crypted"/>
		<param type="mixed" name="key"/>
	</params>
</keyword>
<keyword name="openssl_seal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>openssl_seal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$sealed_data</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$env_keys</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$pub_key_ids</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$method</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_seal()</strong></span> seals (encrypts)   <code class="parameter">data</code> by using RC4 with a randomly generated   secret key. The key is encrypted with each of the public keys   associated with the identifiers in <code class="parameter">pub_key_ids</code>   and each encrypted key is returned   in <code class="parameter">env_keys</code>. This means that one can send   sealed data to multiple recipients (provided one has obtained their   public keys). Each recipient must receive both the sealed data and   the envelope key that was encrypted with the recipient&#039;s public key.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="&amp;string" name="sealdata"/>
		<param type="&amp;array" name="ekeys"/>
		<param type="array" name="pubkeys"/>
	</params>
</keyword>
<keyword name="openssl_sign" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_sign</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$signature</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key_id</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$signature_alg</code><span class="initializer"> = OPENSSL_ALGO_SHA1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_sign()</strong></span> computes a signature for the   specified <code class="parameter">data</code> by generating a cryptographic   digital signature using the private key associated with   <code class="parameter">priv_key_id</code>. Note that the data itself is   not encrypted.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="&amp;string" name="signature"/>
		<param type="mixed" name="key"/>
		<param type="int" name="signature_alg"/>
	</params>
</keyword>
<keyword name="openssl_sign" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>openssl_sign</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$signature</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$priv_key_id</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$signature_alg</code><span class="initializer"> = OPENSSL_ALGO_SHA1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_sign()</strong></span> computes a signature for the   specified <code class="parameter">data</code> by generating a cryptographic   digital signature using the private key associated with   <code class="parameter">priv_key_id</code>. Note that the data itself is   not encrypted.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="&amp;string" name="signature"/>
		<param type="mixed" name="key"/>
	</params>
</keyword>
<keyword name="openssl_verify" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>openssl_verify</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$signature</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pub_key_id</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$signature_alg</code><span class="initializer"> = OPENSSL_ALGO_SHA1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_verify()</strong></span> verifies that the   <code class="parameter">signature</code> is correct for the specified   <code class="parameter">data</code> using the public key associated with   <code class="parameter">pub_key_id</code>. This must be the public key   corresponding to the private key used for signing.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="signature"/>
		<param type="mixed" name="key"/>
		<param type="int" name="signature_algo"/>
	</params>
</keyword>
<keyword name="openssl_verify" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>openssl_verify</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$signature</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pub_key_id</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$signature_alg</code><span class="initializer"> = OPENSSL_ALGO_SHA1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>openssl_verify()</strong></span> verifies that the   <code class="parameter">signature</code> is correct for the specified   <code class="parameter">data</code> using the public key associated with   <code class="parameter">pub_key_id</code>. This must be the public key   corresponding to the private key used for signing.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
		<param type="string" name="signature"/>
		<param type="mixed" name="key"/>
	</params>
</keyword>
<keyword name="ord" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>ord</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Returns the ASCII value of the first character of   <code class="parameter">string</code>.  </p>  <p class="para">   This function complements <span class="function"><a href="function.chr.php" class="function">chr()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="character"/>
	</params>
</keyword>
<keyword name="output_add_rewrite_var" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>output_add_rewrite_var</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   This function adds another name/value pair to the URL rewrite mechanism.   The name and value will be added to URLs (as GET parameter) and forms   (as hidden input fields) the same way as the session ID when transparent   URL rewriting is enabled with <a href="session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>. Please   note that absolute URLs (http://example.com/..) aren&#039;t rewritten.  </p>  <p class="para">   This function&#039;s behavior is controlled by the <a href="session.configuration.php#ini.url-rewriter.tags" class="link">url_rewriter.tags</a> <var class="filename">php.ini</var>   parameter.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    Calling this function will implicitly start output buffering if it is    not active already.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="output_reset_rewrite_vars" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>output_reset_rewrite_vars</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function resets the URL rewriter and removes all rewrite   variables previously set by the <span class="function"><a href="function.output-add-rewrite-var.php" class="function">output_add_rewrite_var()</a></span>   function or the session mechanism (if <em>session.use_trans_sid</em>   was set on <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span>).  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="pack" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pack</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Pack given arguments into a binary string according to   <code class="parameter">format</code>.   </p>  <p class="para">   The idea for this function was taken from Perl and all formatting codes   work the same as in Perl. However, there are some formatting codes that are   missing such as Perl&#039;s &quot;u&quot; format code.  </p>  <p class="para">   Note that the distinction between signed and unsigned values only   affects the function <span class="function"><a href="function.unpack.php" class="function">unpack()</a></span>, where as   function <span class="function"><strong>pack()</strong></span> gives the same result for   signed and unsigned format codes.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="pack" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pack</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Pack given arguments into a binary string according to   <code class="parameter">format</code>.   </p>  <p class="para">   The idea for this function was taken from Perl and all formatting codes   work the same as in Perl. However, there are some formatting codes that are   missing such as Perl&#039;s &quot;u&quot; format code.  </p>  <p class="para">   Note that the distinction between signed and unsigned values only   affects the function <span class="function"><a href="function.unpack.php" class="function">unpack()</a></span>, where as   function <span class="function"><strong>pack()</strong></span> gives the same result for   signed and unsigned format codes.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
	</params>
</keyword>
<keyword name="pack" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pack</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Pack given arguments into a binary string according to   <code class="parameter">format</code>.   </p>  <p class="para">   The idea for this function was taken from Perl and all formatting codes   work the same as in Perl. However, there are some formatting codes that are   missing such as Perl&#039;s &quot;u&quot; format code.  </p>  <p class="para">   Note that the distinction between signed and unsigned values only   affects the function <span class="function"><a href="function.unpack.php" class="function">unpack()</a></span>, where as   function <span class="function"><strong>pack()</strong></span> gives the same result for   signed and unsigned format codes.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="ParentIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
	</params>
</keyword>
<keyword name="ParentIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="ParentIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="parse_ini_file" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>parse_ini_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$process_sections</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scanner_mode</code><span class="initializer"> = INI_SCANNER_NORMAL</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>parse_ini_file()</strong></span> loads in the   ini file specified in <code class="parameter">filename</code>,   and returns the settings in it in an associative array.  </p>  <p class="para">   The structure of the ini file is the same as the <var class="filename">php.ini</var>&#039;s.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="bool" name="process_sections"/>
	</params>
</keyword>
<keyword name="parse_ini_file" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>parse_ini_file</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$process_sections</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$scanner_mode</code><span class="initializer"> = INI_SCANNER_NORMAL</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>parse_ini_file()</strong></span> loads in the   ini file specified in <code class="parameter">filename</code>,   and returns the settings in it in an associative array.  </p>  <p class="para">   The structure of the ini file is the same as the <var class="filename">php.ini</var>&#039;s.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="parse_str" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>parse_str</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$arr</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses <code class="parameter">str</code> as if it were the query string   passed via a URL and sets variables in the current scope.   </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    To get the current <em>QUERY_STRING</em>, you may use the variable    <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER['QUERY_STRING']</a></var></var>.    Also, you may want to read the section on    <a href="language.variables.external.php" class="link">variables from external    sources</a>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The <a href="info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a> setting    affects the output of this function, as <span class="function"><strong>parse_str()</strong></span> uses    the same mechanism that PHP uses to populate the <var class="varname"><var class="varname"><a href="reserved.variables.get.php" class="classname">$_GET</a></var></var>,    <var class="varname"><var class="varname"><a href="reserved.variables.post.php" class="classname">$_POST</a></var></var>, etc. variables.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
		<param type="array" name="result"/>
	</params>
</keyword>
<keyword name="parse_str" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>parse_str</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$arr</code></span>  ] )</div>  <p class="para rdfs-comment">   Parses <code class="parameter">str</code> as if it were the query string   passed via a URL and sets variables in the current scope.   </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    To get the current <em>QUERY_STRING</em>, you may use the variable    <var class="varname"><var class="varname"><a href="reserved.variables.server.php" class="classname">$_SERVER['QUERY_STRING']</a></var></var>.    Also, you may want to read the section on    <a href="language.variables.external.php" class="link">variables from external    sources</a>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The <a href="info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a> setting    affects the output of this function, as <span class="function"><strong>parse_str()</strong></span> uses    the same mechanism that PHP uses to populate the <var class="varname"><var class="varname"><a href="reserved.variables.get.php" class="classname">$_GET</a></var></var>,    <var class="varname"><var class="varname"><a href="reserved.variables.post.php" class="classname">$_POST</a></var></var>, etc. variables.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="encoded_string"/>
	</params>
</keyword>
<keyword name="parse_url" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>parse_url</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$component</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   This function parses a URL and returns an associative array containing any   of the various components of the URL that are present.  </p>  <p class="para">   This function is <em class="emphasis">not</em> meant to validate   the given URL, it only breaks it up into the above listed parts. Partial   URLs are also accepted, <span class="function"><strong>parse_url()</strong></span> tries its best to   parse them correctly.  </p>]]></desc>
	<params>
		<param type="string" name="url"/>
		<param type="int" name="url_component"/>
	</params>
</keyword>
<keyword name="parse_url" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>parse_url</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$url</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$component</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   This function parses a URL and returns an associative array containing any   of the various components of the URL that are present.  </p>  <p class="para">   This function is <em class="emphasis">not</em> meant to validate   the given URL, it only breaks it up into the above listed parts. Partial   URLs are also accepted, <span class="function"><strong>parse_url()</strong></span> tries its best to   parse them correctly.  </p>]]></desc>
	<params>
		<param type="string" name="url"/>
	</params>
</keyword>
<keyword name="passthru" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>passthru</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$return_var</code></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>passthru()</strong></span> function is similar to the   <span class="function"><a href="function.exec.php" class="function">exec()</a></span> function in that it executes a   <code class="parameter">command</code>. This function   should be used in place of <span class="function"><a href="function.exec.php" class="function">exec()</a></span> or   <span class="function"><a href="function.system.php" class="function">system()</a></span> when the output from the Unix command   is binary data which needs to be passed directly back to the   browser.  A common use for this is to execute something like the   pbmplus utilities that can output an image stream directly.  By   setting the Content-type to <em>image/gif</em> and   then calling a pbmplus program to output a gif, you can create   PHP scripts that output images directly.  </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="int" name="&amp;return_value"/>
	</params>
</keyword>
<keyword name="passthru" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>passthru</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$return_var</code></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>passthru()</strong></span> function is similar to the   <span class="function"><a href="function.exec.php" class="function">exec()</a></span> function in that it executes a   <code class="parameter">command</code>. This function   should be used in place of <span class="function"><a href="function.exec.php" class="function">exec()</a></span> or   <span class="function"><a href="function.system.php" class="function">system()</a></span> when the output from the Unix command   is binary data which needs to be passed directly back to the   browser.  A common use for this is to execute something like the   pbmplus utilities that can output an image stream directly.  By   setting the Content-type to <em>image/gif</em> and   then calling a pbmplus program to output a gif, you can create   PHP scripts that output images directly.  </p>]]></desc>
	<params>
		<param type="string" name="command"/>
	</params>
</keyword>
<keyword name="pcntl_alarm" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_alarm</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$seconds</code></span>   )</div>  <p class="para rdfs-comment">   Creates a timer that will send a <strong><code>SIGALRM</code></strong> signal to   the process after the given number of seconds.   Any call to <span class="function"><strong>pcntl_alarm()</strong></span> will cancel any previously   set alarm.  </p>]]></desc>
	<params>
		<param type="int" name="seconds"/>
	</params>
</keyword>
<keyword name="pcntl_exec" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>pcntl_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$envs</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the program with the given arguments.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="array" name="args"/>
		<param type="array" name="envs"/>
	</params>
</keyword>
<keyword name="pcntl_exec" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>pcntl_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$envs</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the program with the given arguments.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
		<param type="array" name="args"/>
	</params>
</keyword>
<keyword name="pcntl_exec" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>pcntl_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$envs</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes the program with the given arguments.  </p>]]></desc>
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="pcntl_getpriority" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_getpriority</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_getpriority()</strong></span> gets the priority of   <code class="parameter">pid</code>. Because priority levels can differ between   system types and kernel versions, please see your system&#039;s getpriority(2)   man page for specific details.  </p>]]></desc>
	<params>
		<param type="int" name="pid"/>
		<param type="int" name="process_identifier"/>
	</params>
</keyword>
<keyword name="pcntl_getpriority" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_getpriority</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_getpriority()</strong></span> gets the priority of   <code class="parameter">pid</code>. Because priority levels can differ between   system types and kernel versions, please see your system&#039;s getpriority(2)   man page for specific details.  </p>]]></desc>
	<params>
		<param type="int" name="pid"/>
	</params>
</keyword>
<keyword name="pcntl_getpriority" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_getpriority</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_getpriority()</strong></span> gets the priority of   <code class="parameter">pid</code>. Because priority levels can differ between   system types and kernel versions, please see your system&#039;s getpriority(2)   man page for specific details.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pcntl_setpriority" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_setpriority</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$priority</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_setpriority()</strong></span> sets the priority of   <code class="parameter">pid</code>.   </p>]]></desc>
	<params>
		<param type="int" name="priority"/>
		<param type="int" name="pid"/>
		<param type="int" name="process_identifier"/>
	</params>
</keyword>
<keyword name="pcntl_setpriority" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_setpriority</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$priority</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_setpriority()</strong></span> sets the priority of   <code class="parameter">pid</code>.   </p>]]></desc>
	<params>
		<param type="int" name="priority"/>
		<param type="int" name="pid"/>
	</params>
</keyword>
<keyword name="pcntl_setpriority" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_setpriority</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$priority</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code><span class="initializer"> = getmypid()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$process_identifier</code><span class="initializer"> = PRIO_PROCESS</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pcntl_setpriority()</strong></span> sets the priority of   <code class="parameter">pid</code>.   </p>]]></desc>
	<params>
		<param type="int" name="priority"/>
	</params>
</keyword>
<keyword name="pcntl_signal" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_signal</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$signo</code></span>   , <span class="methodparam"><span class="type"><span class="type callable|int">callable|int</span></span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$restart_syscalls</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>pcntl_signal()</strong></span> function installs a new   signal handler or replaces the current signal handler for the signal indicated by <code class="parameter">signo</code>.  </p>]]></desc>
	<params>
		<param type="int" name="signo"/>
		<param type="callback" name="handle"/>
		<param type="bool" name="restart_syscalls"/>
	</params>
</keyword>
<keyword name="pcntl_signal" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_signal</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$signo</code></span>   , <span class="methodparam"><span class="type"><span class="type callable|int">callable|int</span></span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$restart_syscalls</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>pcntl_signal()</strong></span> function installs a new   signal handler or replaces the current signal handler for the signal indicated by <code class="parameter">signo</code>.  </p>]]></desc>
	<params>
		<param type="int" name="signo"/>
		<param type="callback" name="handle"/>
	</params>
</keyword>
<keyword name="pcntl_wait" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_wait</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$status</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The wait function suspends execution of the current process until a   child has exited, or until a signal is delivered whose action is to   terminate the current process or to call a signal handling function.  If a   child has already exited by the time of the call (a so-called &quot;zombie&quot;   process), the function returns immediately.  Any system resources used by   the child are freed.  Please see your system&#039;s wait(2) man page for   specific details as to how wait works on your system.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function is equivalent to calling <span class="function"><a href="function.pcntl-waitpid.php" class="function">pcntl_waitpid()</a></span>    with a <em>-1</em> <code class="parameter">pid</code> and no    <code class="parameter">options</code>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="&amp;status"/>
	</params>
</keyword>
<keyword name="pcntl_waitpid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_waitpid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$status</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Suspends execution of the current process until a child as specified by   the <code class="parameter">pid</code> argument has exited, or until a signal is   delivered whose action is to terminate the current process or to call a   signal handling function.  </p>  <p class="para">   If a child as requested by <code class="parameter">pid</code> has already exited   by the time of the call (a so-called &quot;zombie&quot; process), the function   returns immediately.  Any system resources used by the child are freed.   Please see your system&#039;s waitpid(2) man page for specific details as to   how waitpid works on your system.  </p>]]></desc>
	<params>
		<param type="int" name="pid"/>
		<param type="int" name="&amp;status"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="pcntl_wexitstatus" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_wexitstatus</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   Returns the return code of a terminated child.  This function is   only useful if <span class="function"><a href="function.pcntl-wifexited.php" class="function">pcntl_wifexited()</a></span> returned   <strong><code>TRUE</code></strong>.  </p>]]></desc>
	<params>
		<param type="int" name="status"/>
	</params>
</keyword>
<keyword name="pcntl_wifexited" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_wifexited</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether the child status code represents a normal exit.  </p>]]></desc>
	<params>
		<param type="int" name="status"/>
	</params>
</keyword>
<keyword name="pcntl_wifsignaled" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pcntl_wifsignaled</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether the child process exited because of a signal which was not   caught.  </p>]]></desc>
	<params>
		<param type="int" name="status"/>
	</params>
</keyword>
<keyword name="pcntl_wtermsig" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pcntl_wtermsig</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$status</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of the signal that caused the child process to   terminate. This function is only useful if   <span class="function"><a href="function.pcntl-wifsignaled.php" class="function">pcntl_wifsignaled()</a></span> returned <strong><code>TRUE</code></strong>.  </p>]]></desc>
	<params>
		<param type="int" name="status"/>
	</params>
</keyword>
<keyword name="PDO::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="dsn"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="PDO::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="dsn"/>
		<param type="string" name="username"/>
		<param type="string" name="passwd"/>
	</params>
</keyword>
<keyword name="PDO::__sleep" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::__wakeup" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::beginTransaction" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::commit" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::errorCode" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::errorInfo" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::exec" type="function" returnType="long">
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="PDO::getAttribute" type="function" returnType="mixed">
	<params>
		<param type="long" name="attribute"/>
	</params>
</keyword>
<keyword name="PDO::lastInsertId" type="function" returnType="string">
	<params>
		<param type="string" name="seqname"/>
	</params>
</keyword>
<keyword name="PDO::lastInsertId" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="PDO::prepare" type="function" returnType="object">
	<params>
		<param type="string" name="statment"/>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="PDO::prepare" type="function" returnType="object">
	<params>
		<param type="string" name="statment"/>
	</params>
</keyword>
<keyword name="PDO::query" type="function" returnType="object">
	<params>
		<param type="string" name="sql"/>
		<param type="PDOStatement::setFetchMode()" name="args"/>
	</params>
</keyword>
<keyword name="PDO::query" type="function" returnType="object">
	<params>
		<param type="string" name="sql"/>
	</params>
</keyword>
<keyword name="PDO::quote" type="function" returnType="string">
	<params>
		<param type="string" name="str"/>
		<param type="int" name="paramtype"/>
	</params>
</keyword>
<keyword name="PDO::quote" type="function" returnType="string">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="PDO::rollBack" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDO::setAttribute" type="function" returnType="bool">
	<params>
		<param type="long" name="attribute"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="pdo_drivers" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::__sleep" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::__wakeup" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindColumn" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$column"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
		<param type="int" name="$maxlen"/>
		<param type="mixed" name="$driverdata"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindColumn" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$column"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
		<param type="int" name="$maxlen"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindColumn" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$column"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindColumn" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$column"/>
		<param type="mixed" name="&amp;$param"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindParam" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
		<param type="int" name="$maxlen"/>
		<param type="mixed" name="$driverdata"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindParam" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
		<param type="int" name="$maxlen"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindParam" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="&amp;$param"/>
		<param type="int" name="$type"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindParam" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="&amp;$param"/>
	</params>
</keyword>
<keyword name="PDOStatement::bindValue" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="$param"/>
		<param type="int" name="$type "/>
	</params>
</keyword>
<keyword name="PDOStatement::bindValue" type="function" returnType="bool">
	<params>
		<param type="mixed" name="$paramno"/>
		<param type="mixed" name="$param"/>
	</params>
</keyword>
<keyword name="PDOStatement::closeCursor" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::columnCount" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::debugDumpParams" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::errorCode" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::errorInfo" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::execute" type="function" returnType="bool">
	<params>
		<param type="array" name="$bound_input_params"/>
	</params>
</keyword>
<keyword name="PDOStatement::execute" type="function" returnType="bool">
	<params>
	</params>
</keyword>
<keyword name="PDOStatement::fetch" type="function" returnType="mixed">
	<params>
		<param type="int" name="$how"/>
		<param type="int" name="$orientation"/>
		<param type="int" name="$offset"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetch" type="function" returnType="mixed">
	<params>
		<param type="int" name="$how"/>
		<param type="int" name="$orientation"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetch" type="function" returnType="mixed">
	<params>
		<param type="int" name="$how"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetch" type="function" returnType="mixed">
	<params>
	</params>
</keyword>
<keyword name="PDOStatement::fetchAll" type="function" returnType="array">
	<params>
		<param type="int" name="$how"/>
		<param type="string" name="class_name"/>
		<param type="NULL|array" name="ctor_args"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetchAll" type="function" returnType="array">
	<params>
		<param type="int" name="$how"/>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetchAll" type="function" returnType="array">
	<params>
		<param type="int" name="$how"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetchAll" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="PDOStatement::fetchColumn" type="function" returnType="string">
	<params>
		<param type="int" name="column_number"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetchColumn" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="PDOStatement::fetchObject" type="function" returnType="mixed">
	<params>
		<param type="string" name="class_name"/>
		<param type="NULL|array" name="ctor_args"/>
	</params>
</keyword>
<keyword name="PDOStatement::fetchObject" type="function" returnType="mixed">
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="PDOStatement::getAttribute" type="function" returnType="mixed">
	<params>
		<param type="long" name="attribute"/>
	</params>
</keyword>
<keyword name="PDOStatement::getColumnMeta" type="function" returnType="array">
	<params>
		<param type="int" name="$column"/>
	</params>
</keyword>
<keyword name="PDOStatement::nextRowset" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::rowCount" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="PDOStatement::setAttribute" type="function" returnType="bool">
	<params>
		<param type="long" name="attribute"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="PDOStatement::setFetchMode" type="function" returnType="bool">
	<params>
		<param type="int" name="mode"/>
		<param type="mixed*" name="params"/>
	</params>
</keyword>
<keyword name="PDOStatement::setFetchMode" type="function" returnType="bool">
	<params>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="pfsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pfsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function behaves exactly as <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span> with the   difference that the connection is not closed after the script finishes.   It is the persistent version of <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
		<param type="string" name="errstr"/>
		<param type="float" name="timeout"/>
	</params>
</keyword>
<keyword name="pfsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pfsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function behaves exactly as <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span> with the   difference that the connection is not closed after the script finishes.   It is the persistent version of <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
		<param type="string" name="errstr"/>
	</params>
</keyword>
<keyword name="pfsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pfsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function behaves exactly as <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span> with the   difference that the connection is not closed after the script finishes.   It is the persistent version of <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
		<param type="int" name="errno"/>
	</params>
</keyword>
<keyword name="pfsockopen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pfsockopen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   This function behaves exactly as <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span> with the   difference that the connection is not closed after the script finishes.   It is the persistent version of <span class="function"><a href="function.fsockopen.php" class="function">fsockopen()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="hostname"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="pg_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_affected_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_affected_rows()</strong></span> returns the number of tuples   (instances/records/rows) affected by <em>INSERT</em>,    <em>UPDATE</em>, and <em>DELETE</em>   queries.   </p>  <p class="para">   Since PostgreSQL 9.0 and above, the server returns the number of    SELECTed rows. Older PostgreSQL return 0 for SELECT.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_cmdtuples()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_close()</strong></span> closes the non-persistent   connection to a PostgreSQL database associated with the given   <code class="parameter">connection</code> resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Using <span class="function"><strong>pg_close()</strong></span> is not usually necessary, as    non-persistent open connections are automatically closed at the end    of the script.   </p>  </p></blockquote>  <p class="para">   If there is open large object resource on the connection, do not   close the connection before closing all large object resources.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_close()</strong></span> closes the non-persistent   connection to a PostgreSQL database associated with the given   <code class="parameter">connection</code> resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Using <span class="function"><strong>pg_close()</strong></span> is not usually necessary, as    non-persistent open connections are automatically closed at the end    of the script.   </p>  </p></blockquote>  <p class="para">   If there is open large object resource on the connection, do not   close the connection before closing all large object resources.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connect()</strong></span> opens a connection to a   PostgreSQL database specified by the   <code class="parameter">connection_string</code>.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_connect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   The old syntax with multiple parameters   <strong class="command">$conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)   </strong> has been deprecated.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string"/>
		<param type="int" name="connect_type "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
		<param type="string" name="options"/>
		<param type="string" name="tty"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connect()</strong></span> opens a connection to a   PostgreSQL database specified by the   <code class="parameter">connection_string</code>.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_connect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   The old syntax with multiple parameters   <strong class="command">$conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)   </strong> has been deprecated.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string"/>
		<param type="int" name="connect_type "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
		<param type="string" name="options"/>
	</params>
</keyword>
<keyword name="pg_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connect()</strong></span> opens a connection to a   PostgreSQL database specified by the   <code class="parameter">connection_string</code>.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_connect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   The old syntax with multiple parameters   <strong class="command">$conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)   </strong> has been deprecated.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string"/>
		<param type="int" name="connect_type "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
	</params>
</keyword>
<keyword name="pg_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connect()</strong></span> opens a connection to a   PostgreSQL database specified by the   <code class="parameter">connection_string</code>.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_connect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   The old syntax with multiple parameters   <strong class="command">$conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)   </strong> has been deprecated.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string"/>
		<param type="int" name="connect_type "/>
	</params>
</keyword>
<keyword name="pg_connect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_connect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connect()</strong></span> opens a connection to a   PostgreSQL database specified by the   <code class="parameter">connection_string</code>.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_connect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   The old syntax with multiple parameters   <strong class="command">$conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)   </strong> has been deprecated.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string"/>
	</params>
</keyword>
<keyword name="pg_connection_busy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_connection_busy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connection_busy()</strong></span> determines whether or not a connection   is busy.  If it is busy, a previous query is still executing.   If <span class="function"><a href="function.pg-get-result.php" class="function">pg_get_result()</a></span> is used on the connection, it will be blocked.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_connection_reset" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_connection_reset</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_connection_reset()</strong></span> resets the connection.   It is useful for error recovery.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_convert" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_convert</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_convert()</strong></span> checks and converts the values in   <code class="parameter">assoc_array</code> into suitable values for use in an SQL   statement. Precondition for <span class="function"><strong>pg_convert()</strong></span> is the    existence of a table <code class="parameter">table_name</code> which has at least   as many columns as <code class="parameter">assoc_array</code> has elements. The   fieldnames in <code class="parameter">table_name</code> must match the indices in   <code class="parameter">assoc_array</code> and the corresponding datatypes must be   compatible. Returns an array with the converted values on success, <strong><code>FALSE</code></strong>   otherwise.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Since PHP 5.6.0, it accepts boolean values. It converted to PostgreSQL    boolean. String representations of boolean value is also supported. <strong><code>NULL</code></strong> is    converted to PostgreSQL NULL.   </p>   <p class="para">    Prior to PHP 5.6.0, if there are boolean fields in <code class="parameter">table_name</code>     don&#039;t use the constant <strong><code>TRUE</code></strong> in <code class="parameter">assoc_array</code>. It will be    converted to the string &#039;TRUE&#039; which is no valid entry for boolean fields    in PostgreSQL. Use one of t, true, 1, y, yes instead.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="values"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="pg_convert" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_convert</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_convert()</strong></span> checks and converts the values in   <code class="parameter">assoc_array</code> into suitable values for use in an SQL   statement. Precondition for <span class="function"><strong>pg_convert()</strong></span> is the    existence of a table <code class="parameter">table_name</code> which has at least   as many columns as <code class="parameter">assoc_array</code> has elements. The   fieldnames in <code class="parameter">table_name</code> must match the indices in   <code class="parameter">assoc_array</code> and the corresponding datatypes must be   compatible. Returns an array with the converted values on success, <strong><code>FALSE</code></strong>   otherwise.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Since PHP 5.6.0, it accepts boolean values. It converted to PostgreSQL    boolean. String representations of boolean value is also supported. <strong><code>NULL</code></strong> is    converted to PostgreSQL NULL.   </p>   <p class="para">    Prior to PHP 5.6.0, if there are boolean fields in <code class="parameter">table_name</code>     don&#039;t use the constant <strong><code>TRUE</code></strong> in <code class="parameter">assoc_array</code>. It will be    converted to the string &#039;TRUE&#039; which is no valid entry for boolean fields    in PostgreSQL. Use one of t, true, 1, y, yes instead.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="values"/>
	</params>
</keyword>
<keyword name="pg_copy_from" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_copy_from</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$rows</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_from()</strong></span> inserts records into a table from    <code class="parameter">rows</code>. It issues a <em>COPY FROM</em> SQL command    internally to insert records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
		<param type="array" name="rows"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="null_as"/>
	</params>
</keyword>
<keyword name="pg_copy_from" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_copy_from</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$rows</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_from()</strong></span> inserts records into a table from    <code class="parameter">rows</code>. It issues a <em>COPY FROM</em> SQL command    internally to insert records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
		<param type="array" name="rows"/>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="pg_copy_from" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_copy_from</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$rows</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_from()</strong></span> inserts records into a table from    <code class="parameter">rows</code>. It issues a <em>COPY FROM</em> SQL command    internally to insert records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
		<param type="array" name="rows"/>
	</params>
</keyword>
<keyword name="pg_copy_to" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_copy_to</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_to()</strong></span> copies a table to an array. It   issues <em>COPY TO</em> SQL command internally to   retrieve records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="null_as"/>
	</params>
</keyword>
<keyword name="pg_copy_to" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_copy_to</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_to()</strong></span> copies a table to an array. It   issues <em>COPY TO</em> SQL command internally to   retrieve records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="pg_copy_to" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_copy_to</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$null_as</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_copy_to()</strong></span> copies a table to an array. It   issues <em>COPY TO</em> SQL command internally to   retrieve records.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="table_name"/>
	</params>
</keyword>
<keyword name="pg_dbname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_dbname</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_dbname()</strong></span> returns the name of the database   that the given PostgreSQL <code class="parameter">connection</code>   resource.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_dbname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_dbname</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_dbname()</strong></span> returns the name of the database   that the given PostgreSQL <code class="parameter">connection</code>   resource.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_end_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_end_copy</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_end_copy()</strong></span> syncs the PostgreSQL frontend   (usually a web server process) with the PostgreSQL server after   doing a copy operation performed by   <span class="function"><a href="function.pg-put-line.php" class="function">pg_put_line()</a></span>. <span class="function"><strong>pg_end_copy()</strong></span>   must be issued, otherwise the PostgreSQL server may get out of   sync with the frontend and will report an error.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_end_copy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_end_copy</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_end_copy()</strong></span> syncs the PostgreSQL frontend   (usually a web server process) with the PostgreSQL server after   doing a copy operation performed by   <span class="function"><a href="function.pg-put-line.php" class="function">pg_put_line()</a></span>. <span class="function"><strong>pg_end_copy()</strong></span>   must be issued, otherwise the PostgreSQL server may get out of   sync with the frontend and will report an error.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_escape_bytea" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_escape_bytea</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_escape_bytea()</strong></span> escapes string for   bytea datatype.  It returns escaped string.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When you <em>SELECT</em> a bytea type, PostgreSQL returns octal byte values    prefixed with &#039;\&#039; (e.g. \032). Users are supposed to convert back to    binary format manually.   </p>   <p class="para">    This function requires PostgreSQL 7.2 or later. With PostgreSQL    7.2.0 and 7.2.1, bytea values must be cast when you enable    multi-byte support. i.e. <em>INSERT INTO test_table (image)    VALUES (&#039;$image_escaped&#039;::bytea);</em> PostgreSQL 7.2.2 or    later does not need a cast. The exception is when the client and backend    character encoding does not match, and there may be multi-byte    stream error. User must then cast to bytea to avoid this error.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="pg_escape_bytea" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_escape_bytea</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_escape_bytea()</strong></span> escapes string for   bytea datatype.  It returns escaped string.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When you <em>SELECT</em> a bytea type, PostgreSQL returns octal byte values    prefixed with &#039;\&#039; (e.g. \032). Users are supposed to convert back to    binary format manually.   </p>   <p class="para">    This function requires PostgreSQL 7.2 or later. With PostgreSQL    7.2.0 and 7.2.1, bytea values must be cast when you enable    multi-byte support. i.e. <em>INSERT INTO test_table (image)    VALUES (&#039;$image_escaped&#039;::bytea);</em> PostgreSQL 7.2.2 or    later does not need a cast. The exception is when the client and backend    character encoding does not match, and there may be multi-byte    stream error. User must then cast to bytea to avoid this error.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="pg_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_escape_string</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_escape_string()</strong></span> escapes a string for querying   the database.  It returns an escaped string in the PostgreSQL   format without quotes. <span class="function"><a href="function.pg-escape-literal.php" class="function">pg_escape_literal()</a></span> is   more preferred way to escape SQL parameters for PostgreSQL.   <span class="function"><a href="function.addslashes.php" class="function">addslashes()</a></span> must not be used with PostgreSQL.   If the type of the column is   bytea, <span class="function"><a href="function.pg-escape-bytea.php" class="function">pg_escape_bytea()</a></span> must be used   instead. <span class="function"><a href="function.pg-escape-identifier.php" class="function">pg_escape_identifier()</a></span> must be used to   escape identifiers (e.g. table names, field names)  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function requires PostgreSQL 7.2 or later.    </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="pg_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_escape_string</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_escape_string()</strong></span> escapes a string for querying   the database.  It returns an escaped string in the PostgreSQL   format without quotes. <span class="function"><a href="function.pg-escape-literal.php" class="function">pg_escape_literal()</a></span> is   more preferred way to escape SQL parameters for PostgreSQL.   <span class="function"><a href="function.addslashes.php" class="function">addslashes()</a></span> must not be used with PostgreSQL.   If the type of the column is   bytea, <span class="function"><a href="function.pg-escape-bytea.php" class="function">pg_escape_bytea()</a></span> must be used   instead. <span class="function"><a href="function.pg-escape-identifier.php" class="function">pg_escape_identifier()</a></span> must be used to   escape identifiers (e.g. table names, field names)  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function requires PostgreSQL 7.2 or later.    </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="pg_execute" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_execute</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Sends a request to execute a prepared statement with given parameters, and     waits for the result.  </p>  <p class="para">    <span class="function"><strong>pg_execute()</strong></span> is like <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>,     but the command to be executed is     specified by naming a previously-prepared statement, instead of giving a     query string. This feature allows commands that will be used repeatedly to     be parsed and planned just once, rather than each time they are executed.     The statement must have been prepared previously in the current session.     <span class="function"><strong>pg_execute()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    The parameters are identical to <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>, except that the name of a     prepared statement is given instead of a query string.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="stmtname"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="pg_execute" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_execute</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Sends a request to execute a prepared statement with given parameters, and     waits for the result.  </p>  <p class="para">    <span class="function"><strong>pg_execute()</strong></span> is like <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>,     but the command to be executed is     specified by naming a previously-prepared statement, instead of giving a     query string. This feature allows commands that will be used repeatedly to     be parsed and planned just once, rather than each time they are executed.     The statement must have been prepared previously in the current session.     <span class="function"><strong>pg_execute()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    The parameters are identical to <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>, except that the name of a     prepared statement is given instead of a query string.  </p>]]></desc>
	<params>
		<param type="string" name="stmtname"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="pg_fetch_all" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_all()</strong></span> returns an array that   contains all rows (records) in the result resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_fetch_all_columns" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_all_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$column</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_all_columns()</strong></span> returns an array that   contains all rows (records) in a particular column of the result resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="column_number"/>
	</params>
</keyword>
<keyword name="pg_fetch_all_columns" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_all_columns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$column</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_all_columns()</strong></span> returns an array that   contains all rows (records) in a particular column of the result resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = PGSQL_BOTH</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_array()</strong></span> returns an array that   corresponds to the fetched row (record).  </p>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices (field number) to the result array, it   can also store the data using associative indices (field name).   It stores both indicies by default.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>, and   is significantly easier to use.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="pg_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = PGSQL_BOTH</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_array()</strong></span> returns an array that   corresponds to the fetched row (record).  </p>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices (field number) to the result array, it   can also store the data using associative indices (field name).   It stores both indicies by default.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>, and   is significantly easier to use.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="pg_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = PGSQL_BOTH</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_array()</strong></span> returns an array that   corresponds to the fetched row (record).  </p>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices (field number) to the result array, it   can also store the data using associative indices (field name).   It stores both indicies by default.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>  <p class="para">   <span class="function"><strong>pg_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>, and   is significantly easier to use.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_assoc()</strong></span> returns an associative array that   corresponds to the fetched row (records).  </p>  <p class="para">   <span class="function"><strong>pg_fetch_assoc()</strong></span> is equivalent to calling   <span class="function"><a href="function.pg-fetch-array.php" class="function">pg_fetch_array()</a></span> with <strong><code>PGSQL_ASSOC</code></strong> as the   optional third parameter. It only returns an associative array.   If you need the numeric indices, use    <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>.    </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>  <p class="para">   <span class="function"><strong>pg_fetch_assoc()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>, and   is significantly easier to use.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="pg_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_fetch_assoc()</strong></span> returns an associative array that   corresponds to the fetched row (records).  </p>  <p class="para">   <span class="function"><strong>pg_fetch_assoc()</strong></span> is equivalent to calling   <span class="function"><a href="function.pg-fetch-array.php" class="function">pg_fetch_array()</a></span> with <strong><code>PGSQL_ASSOC</code></strong> as the   optional third parameter. It only returns an associative array.   If you need the numeric indices, use    <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>.    </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This function sets NULL fields tothe PHP <strong><code>NULL</code></strong> value.</span></p></blockquote>  <p class="para">   <span class="function"><strong>pg_fetch_assoc()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.pg-fetch-row.php" class="function">pg_fetch_row()</a></span>, and   is significantly easier to use.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_field_is_null" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_is_null</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_is_null</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_is_null()</strong></span> tests if a field in a PostgreSQL   result resource is SQL <em>NULL</em> or not.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_fieldisnull()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field_name_or_number"/>
	</params>
</keyword>
<keyword name="pg_field_is_null" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_is_null</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_is_null</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_is_null()</strong></span> tests if a field in a PostgreSQL   result resource is SQL <em>NULL</em> or not.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_fieldisnull()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="mixed" name="field_name_or_number"/>
	</params>
</keyword>
<keyword name="pg_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_name()</strong></span> returns the name of the field   occupying the given <code class="parameter">field_number</code> in the   given PostgreSQL <code class="parameter">result</code> resource.  Field   numbering starts from 0.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_fieldname()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="pg_field_num" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_num</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$field_name</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_num()</strong></span> will return the number of the   field number that corresponds to the   <code class="parameter">field_name</code> in the given PostgreSQL   <code class="parameter">result</code> resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_fieldnum()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="field_name"/>
	</params>
</keyword>
<keyword name="pg_field_prtlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_prtlen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field_name_or_number</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_prtlen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field_name_or_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_prtlen()</strong></span> returns the actual printed   length (number of characters) of a specific value in a PostgreSQL   <code class="parameter">result</code>.  Row numbering starts at 0.  This   function will return <strong><code>FALSE</code></strong> on an error.  </p>  <p class="para">   <code class="parameter">field_name_or_number</code> can be passed either as an   <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> or as a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>. If it is passed as an   <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, PHP recognises it as the field number, otherwise as   field name.  </p>  <p class="para">   See the example given at the <span class="function"><a href="function.pg-field-name.php" class="function">pg_field_name()</a></span> page.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">     This function used to be called <span class="function"><strong>pg_fieldprtlen()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field_name_or_number"/>
	</params>
</keyword>
<keyword name="pg_field_prtlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_prtlen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field_name_or_number</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_prtlen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field_name_or_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_prtlen()</strong></span> returns the actual printed   length (number of characters) of a specific value in a PostgreSQL   <code class="parameter">result</code>.  Row numbering starts at 0.  This   function will return <strong><code>FALSE</code></strong> on an error.  </p>  <p class="para">   <code class="parameter">field_name_or_number</code> can be passed either as an   <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span> or as a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>. If it is passed as an   <span class="type"><a href="language.types.integer.php" class="type integer">integer</a></span>, PHP recognises it as the field number, otherwise as   field name.  </p>  <p class="para">   See the example given at the <span class="function"><a href="function.pg-field-name.php" class="function">pg_field_name()</a></span> page.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">     This function used to be called <span class="function"><strong>pg_fieldprtlen()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="mixed" name="field_name_or_number"/>
	</params>
</keyword>
<keyword name="pg_field_size" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_size</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_size()</strong></span> returns the internal storage   size (in bytes) of the field number in the given PostgreSQL   <code class="parameter">result</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_fieldsize()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="pg_field_table" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$oid_only</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_table()</strong></span> returns the name of the table that field    belongs to, or the table&#039;s oid if <code class="parameter">oid_only</code> is <strong><code>TRUE</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_number"/>
		<param type="bool" name="oid_only"/>
	</params>
</keyword>
<keyword name="pg_field_table" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_field_table</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$oid_only</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_table()</strong></span> returns the name of the table that field    belongs to, or the table&#039;s oid if <code class="parameter">oid_only</code> is <strong><code>TRUE</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="pg_field_type_oid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_field_type_oid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_field_type_oid()</strong></span> returns an integer containing the   OID of the base type of the given <code class="parameter">field_number</code> in the   given PostgreSQL <code class="parameter">result</code> resource.  </p>  <p class="para">    You can get more information about the field type by querying PostgreSQL&#039;s    <em>pg_type</em> system table using the OID obtained with this function.    The PostgreSQL <span class="function"><strong>format_type()</strong></span> function will convert a    type OID into an SQL standard type name.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If the field uses a PostgreSQL domain (rather than a basic type), it is    the OID of the domain&#039;s underlying type that is returned, rather than the OID    of the domain itself.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_number"/>
	</params>
</keyword>
<keyword name="pg_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_free_result()</strong></span> frees the memory and data associated with the   specified PostgreSQL query result <span class="type"><a href="language.types.resource.php" class="type resource">resource</a></span>.  </p>  <p class="para">   This function need only be called if memory   consumption during script execution is a problem.   Otherwise, all result memory will    be automatically freed when the script ends.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_freeresult()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_get_notify" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_get_notify</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_notify()</strong></span> gets notifications generated by a   <em>NOTIFY</em> SQL command. To receive notifications,   the <em>LISTEN</em> SQL command must be   issued.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="" name="result_type"/>
	</params>
</keyword>
<keyword name="pg_get_notify" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_get_notify</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_notify()</strong></span> gets notifications generated by a   <em>NOTIFY</em> SQL command. To receive notifications,   the <em>LISTEN</em> SQL command must be   issued.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_get_notify" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_get_notify</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_notify()</strong></span> gets notifications generated by a   <em>NOTIFY</em> SQL command. To receive notifications,   the <em>LISTEN</em> SQL command must be   issued.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_get_pid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_get_pid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_pid()</strong></span> gets the backend&#039;s (database server   process) PID. The PID is useful to determine whether or not a <em>NOTIFY</em>   message received via <span class="function"><a href="function.pg-get-notify.php" class="function">pg_get_notify()</a></span> is sent from another process   or not.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_get_pid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_get_pid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_pid()</strong></span> gets the backend&#039;s (database server   process) PID. The PID is useful to determine whether or not a <em>NOTIFY</em>   message received via <span class="function"><a href="function.pg-get-notify.php" class="function">pg_get_notify()</a></span> is sent from another process   or not.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_get_result" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_get_result</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_get_result()</strong></span> gets the result resource from   an asynchronous query executed by   <span class="function"><a href="function.pg-send-query.php" class="function">pg_send_query()</a></span>, <span class="function"><a href="function.pg-send-query-params.php" class="function">pg_send_query_params()</a></span> or   <span class="function"><a href="function.pg-send-execute.php" class="function">pg_send_execute()</a></span>.  </p>  <p class="para"><span class="function"><a href="function.pg-send-query.php" class="function">pg_send_query()</a></span> and the   other asynchronous query functions   can send multiple queries to a PostgreSQL server and   <span class="function"><strong>pg_get_result()</strong></span> is used to get each query&#039;s results,   one by one.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_host" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_host</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_host()</strong></span> returns the host name of the given   PostgreSQL <code class="parameter">connection</code> resource is   connected to.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_host" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_host</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_host()</strong></span> returns the host name of the given   PostgreSQL <code class="parameter">connection</code> resource is   connected to.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_insert" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_insert</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_insert()</strong></span> inserts the values of <code class="parameter">assoc_array</code>    into the table specified by <code class="parameter">table_name</code>.   If <code class="parameter">options</code> is   specified, <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied   to <code class="parameter">assoc_array</code> with the specified options.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="values"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="pg_insert" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_insert</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_insert()</strong></span> inserts the values of <code class="parameter">assoc_array</code>    into the table specified by <code class="parameter">table_name</code>.   If <code class="parameter">options</code> is   specified, <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied   to <code class="parameter">assoc_array</code> with the specified options.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="values"/>
	</params>
</keyword>
<keyword name="pg_last_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_last_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_last_error()</strong></span> returns the last error message   for a given <code class="parameter">connection</code>.   </p>  <p class="para">   Error messages may be overwritten by internal PostgreSQL (libpq)   function calls. It may not return an appropriate error message if   multiple errors occur inside a PostgreSQL module function.  </p>  <p class="para">   Use <span class="function"><a href="function.pg-result-error.php" class="function">pg_result_error()</a></span>, <span class="function"><a href="function.pg-result-error-field.php" class="function">pg_result_error_field()</a></span>,   <span class="function"><a href="function.pg-result-status.php" class="function">pg_result_status()</a></span> and   <span class="function"><a href="function.pg-connection-status.php" class="function">pg_connection_status()</a></span> for better error handling.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_errormessage()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_last_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_last_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_last_error()</strong></span> returns the last error message   for a given <code class="parameter">connection</code>.   </p>  <p class="para">   Error messages may be overwritten by internal PostgreSQL (libpq)   function calls. It may not return an appropriate error message if   multiple errors occur inside a PostgreSQL module function.  </p>  <p class="para">   Use <span class="function"><a href="function.pg-result-error.php" class="function">pg_result_error()</a></span>, <span class="function"><a href="function.pg-result-error-field.php" class="function">pg_result_error_field()</a></span>,   <span class="function"><a href="function.pg-result-status.php" class="function">pg_result_status()</a></span> and   <span class="function"><a href="function.pg-connection-status.php" class="function">pg_connection_status()</a></span> for better error handling.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_errormessage()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_last_notice" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_last_notice</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_last_notice()</strong></span> returns the last notice   message from the PostgreSQL server on the specified   <code class="parameter">connection</code>. The PostgreSQL server sends notice   messages in several cases, for instance when creating a <em>SERIAL</em>   column in a table.  </p>  <p class="para">   With <span class="function"><strong>pg_last_notice()</strong></span>, you can avoid issuing useless   queries by checking whether or not the notice is related to your transaction.  </p>  <p class="para">   Notice message tracking can be set to optional by setting 1 for   <em>pgsql.ignore_notice</em> in <var class="filename">php.ini</var>.  </p>  <p class="para">   Notice message logging can be set to optional by setting 0 for   <em>pgsql.log_notice</em> in <var class="filename">php.ini</var>.   Unless <em>pgsql.ignore_notice</em> is set   to 0, notice message cannot be logged.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_last_oid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_last_oid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_last_oid()</strong></span> is used to retrieve the   <var class="varname"><var class="varname">OID</var></var> assigned to an inserted row.  </p>  <p class="para">   OID field became an optional field from PostgreSQL 7.2 and will   not be present by default in PostgreSQL 8.1. When the   OID field is not present in a table, the programmer must use    <span class="function"><a href="function.pg-result-status.php" class="function">pg_result_status()</a></span> to check for successful   insertion.  </p>  <p class="para">   To get the value of a <em>SERIAL</em> field in an inserted   row, it is necessary to use the PostgreSQL <em>CURRVAL</em>   function, naming the sequence whose last value is required.  If the   name of the sequence is unknown, the <em>pg_get_serial_sequence</em>   PostgreSQL 8.0 function is necessary.  </p>  <p class="para">   PostgreSQL 8.1 has a function <em>LASTVAL</em> that returns   the value of the most recently used sequence in the session.  This avoids   the need for naming the sequence, table or column altogether.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_getlastoid()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_lo_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_close()</strong></span> closes a large   object. <code class="parameter">large_object</code> is a resource for the   large object from <span class="function"><a href="function.pg-lo-open.php" class="function">pg_lo_open()</a></span>.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loclose()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
	</params>
</keyword>
<keyword name="pg_lo_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_create</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_create</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_create()</strong></span> creates a large   object and returns the <var class="varname"><var class="varname">OID</var></var> of the large   object.  PostgreSQL access modes   <strong><code>INV_READ</code></strong>, <strong><code>INV_WRITE</code></strong>, and    <strong><code>INV_ARCHIVE</code></strong> are not supported, the   object is created always with both read and write   access. <strong><code>INV_ARCHIVE</code></strong> has been removed from PostgreSQL itself   (version 6.3 and above).  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <p class="para">   Instead of using the large object interface (which has no access controls   and is cumbersome to use), try PostgreSQL&#039;s <var class="varname"><var class="varname">bytea</var></var>   column type and <span class="function"><a href="function.pg-escape-bytea.php" class="function">pg_escape_bytea()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_locreate()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_lo_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_create</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_create</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_create()</strong></span> creates a large   object and returns the <var class="varname"><var class="varname">OID</var></var> of the large   object.  PostgreSQL access modes   <strong><code>INV_READ</code></strong>, <strong><code>INV_WRITE</code></strong>, and    <strong><code>INV_ARCHIVE</code></strong> are not supported, the   object is created always with both read and write   access. <strong><code>INV_ARCHIVE</code></strong> has been removed from PostgreSQL itself   (version 6.3 and above).  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <p class="para">   Instead of using the large object interface (which has no access controls   and is cumbersome to use), try PostgreSQL&#039;s <var class="varname"><var class="varname">bytea</var></var>   column type and <span class="function"><a href="function.pg-escape-bytea.php" class="function">pg_escape_bytea()</a></span>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_locreate()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_lo_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_export</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_export()</strong></span> takes a large object in a   PostgreSQL database and saves its contents to a file on the local   filesystem.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loexport()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="objoid"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="pg_lo_export" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_export</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_export()</strong></span> takes a large object in a   PostgreSQL database and saves its contents to a file on the local   filesystem.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loexport()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="int" name="objoid"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="pg_lo_import" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_import</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_import()</strong></span> creates a new large object   in the database using a file on the filesystem as its data   source.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">When <a href="features.safe-mode.php" class="link">safe mode</a> is enabled, PHP checks whetherthe files or directories being operated upon have the same UID (owner) as thescript that is being executed.</span></p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loimport()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="pg_lo_import" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_import</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object_id</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_import()</strong></span> creates a new large object   in the database using a file on the filesystem as its data   source.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">When <a href="features.safe-mode.php" class="link">safe mode</a> is enabled, PHP checks whetherthe files or directories being operated upon have the same UID (owner) as thescript that is being executed.</span></p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loimport()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="pg_lo_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_lo_open</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_open()</strong></span> opens a large object in the database   and returns large object resource so that it can be manipulated.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Do not close the database connection before closing the large    object resource.    </p>  </div>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loopen()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="large_object_oid"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="pg_lo_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_lo_open</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_open()</strong></span> opens a large object in the database   and returns large object resource so that it can be manipulated.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Do not close the database connection before closing the large    object resource.    </p>  </div>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loopen()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="int" name="large_object_oid"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="pg_lo_read" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_lo_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code><span class="initializer"> = 8192</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_read()</strong></span> reads at most   <code class="parameter">len</code> bytes from a large object and   returns it as a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loread()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="pg_lo_read" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_lo_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code><span class="initializer"> = 8192</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_read()</strong></span> reads at most   <code class="parameter">len</code> bytes from a large object and   returns it as a <span class="type"><a href="language.types.string.php" class="type string">string</a></span>.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loread()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
	</params>
</keyword>
<keyword name="pg_lo_read_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_read_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_read_all()</strong></span> reads a large object and passes   it straight through to the browser after sending all pending   headers. Mainly intended for sending binary data like images or   sound.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_loreadall()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
	</params>
</keyword>
<keyword name="pg_lo_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$whence</code><span class="initializer"> = PGSQL_SEEK_CUR</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_seek()</strong></span> seeks a position within a large object   resource.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
		<param type="int" name="offset"/>
		<param type="int" name="whence"/>
	</params>
</keyword>
<keyword name="pg_lo_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$whence</code><span class="initializer"> = PGSQL_SEEK_CUR</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_seek()</strong></span> seeks a position within a large object   resource.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="pg_lo_tell" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_tell</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_tell()</strong></span> returns the current position (offset   from the beginning) of a large object.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
	</params>
</keyword>
<keyword name="pg_lo_unlink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_unlink</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_unlink()</strong></span> deletes a large object with the   <code class="parameter">oid</code>. Returns <strong><code>TRUE</code></strong> on success or <strong><code>FALSE</code></strong> on failure.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_lounlink()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="large_object_oid"/>
	</params>
</keyword>
<keyword name="pg_lo_unlink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_lo_unlink</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_unlink()</strong></span> deletes a large object with the   <code class="parameter">oid</code>. Returns <strong><code>TRUE</code></strong> on success or <strong><code>FALSE</code></strong> on failure.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_lounlink()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="large_object_oid"/>
	</params>
</keyword>
<keyword name="pg_lo_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_write</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_write()</strong></span> writes data into a large object   at the current seek position.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_lowrite()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
		<param type="string" name="buf"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="pg_lo_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_lo_write</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$large_object</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_lo_write()</strong></span> writes data into a large object   at the current seek position.  </p>  <p class="para">   To use the large object interface, it is necessary to   enclose it within a transaction block.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_lowrite()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="large_object"/>
		<param type="string" name="buf"/>
	</params>
</keyword>
<keyword name="pg_meta_data" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_meta_data</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$extended</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_meta_data()</strong></span> returns table definition for   <em>table_name</em> as an array.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
	</params>
</keyword>
<keyword name="pg_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_num_fields()</strong></span> returns the number of fields   (columns) in a PostgreSQL result resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_numfields()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_num_rows()</strong></span> will return the number of rows in   a PostgreSQL result resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_numrows()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_options" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_options</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_options()</strong></span> will return a string containing   the options specified on the given PostgreSQL   <code class="parameter">connection</code> resource.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_options" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_options</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_options()</strong></span> will return a string containing   the options specified on the given PostgreSQL   <code class="parameter">connection</code> resource.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_pconnect()</strong></span> opens a connection to a   PostgreSQL database. It returns a connection resource that is   needed by other PostgreSQL functions.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_pconnect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   To enable persistent connection, the <a href="pgsql.configuration.php#ini.pgsql.allow-persistent" class="link">pgsql.allow_persistent</a>   <var class="filename">php.ini</var> directive must be set to &quot;On&quot; (which is the default).   The maximum number of persistent connection can be defined with the <a href="pgsql.configuration.php#ini.pgsql.max-persistent" class="link">pgsql.max_persistent</a>   <var class="filename">php.ini</var> directive (defaults to -1 for no limit). The total number   of connections can be set with the <a href="pgsql.configuration.php#ini.pgsql.max-links" class="link">pgsql.max_links</a>    <var class="filename">php.ini</var> directive.  </p>  <p class="para">   <span class="function"><a href="function.pg-close.php" class="function">pg_close()</a></span> will not close persistent links   generated by <span class="function"><strong>pg_pconnect()</strong></span>.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string "/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_pconnect()</strong></span> opens a connection to a   PostgreSQL database. It returns a connection resource that is   needed by other PostgreSQL functions.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_pconnect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   To enable persistent connection, the <a href="pgsql.configuration.php#ini.pgsql.allow-persistent" class="link">pgsql.allow_persistent</a>   <var class="filename">php.ini</var> directive must be set to &quot;On&quot; (which is the default).   The maximum number of persistent connection can be defined with the <a href="pgsql.configuration.php#ini.pgsql.max-persistent" class="link">pgsql.max_persistent</a>   <var class="filename">php.ini</var> directive (defaults to -1 for no limit). The total number   of connections can be set with the <a href="pgsql.configuration.php#ini.pgsql.max-links" class="link">pgsql.max_links</a>    <var class="filename">php.ini</var> directive.  </p>  <p class="para">   <span class="function"><a href="function.pg-close.php" class="function">pg_close()</a></span> will not close persistent links   generated by <span class="function"><strong>pg_pconnect()</strong></span>.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string "/>
		<param type="string" name="host"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_pconnect()</strong></span> opens a connection to a   PostgreSQL database. It returns a connection resource that is   needed by other PostgreSQL functions.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_pconnect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   To enable persistent connection, the <a href="pgsql.configuration.php#ini.pgsql.allow-persistent" class="link">pgsql.allow_persistent</a>   <var class="filename">php.ini</var> directive must be set to &quot;On&quot; (which is the default).   The maximum number of persistent connection can be defined with the <a href="pgsql.configuration.php#ini.pgsql.max-persistent" class="link">pgsql.max_persistent</a>   <var class="filename">php.ini</var> directive (defaults to -1 for no limit). The total number   of connections can be set with the <a href="pgsql.configuration.php#ini.pgsql.max-links" class="link">pgsql.max_links</a>    <var class="filename">php.ini</var> directive.  </p>  <p class="para">   <span class="function"><a href="function.pg-close.php" class="function">pg_close()</a></span> will not close persistent links   generated by <span class="function"><strong>pg_pconnect()</strong></span>.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_pconnect()</strong></span> opens a connection to a   PostgreSQL database. It returns a connection resource that is   needed by other PostgreSQL functions.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_pconnect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   To enable persistent connection, the <a href="pgsql.configuration.php#ini.pgsql.allow-persistent" class="link">pgsql.allow_persistent</a>   <var class="filename">php.ini</var> directive must be set to &quot;On&quot; (which is the default).   The maximum number of persistent connection can be defined with the <a href="pgsql.configuration.php#ini.pgsql.max-persistent" class="link">pgsql.max_persistent</a>   <var class="filename">php.ini</var> directive (defaults to -1 for no limit). The total number   of connections can be set with the <a href="pgsql.configuration.php#ini.pgsql.max-links" class="link">pgsql.max_links</a>    <var class="filename">php.ini</var> directive.  </p>  <p class="para">   <span class="function"><a href="function.pg-close.php" class="function">pg_close()</a></span> will not close persistent links   generated by <span class="function"><strong>pg_pconnect()</strong></span>.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
		<param type="string" name="options"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_pconnect" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_pconnect</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$connection_string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$connect_type</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_pconnect()</strong></span> opens a connection to a   PostgreSQL database. It returns a connection resource that is   needed by other PostgreSQL functions.  </p>  <p class="para">   If a second call is made to <span class="function"><strong>pg_pconnect()</strong></span> with   the same <code class="parameter">connection_string</code> as an existing connection, the   existing connection will be returned unless you pass   <strong><code>PGSQL_CONNECT_FORCE_NEW</code></strong> as   <code class="parameter">connect_type</code>.  </p>  <p class="para">   To enable persistent connection, the <a href="pgsql.configuration.php#ini.pgsql.allow-persistent" class="link">pgsql.allow_persistent</a>   <var class="filename">php.ini</var> directive must be set to &quot;On&quot; (which is the default).   The maximum number of persistent connection can be defined with the <a href="pgsql.configuration.php#ini.pgsql.max-persistent" class="link">pgsql.max_persistent</a>   <var class="filename">php.ini</var> directive (defaults to -1 for no limit). The total number   of connections can be set with the <a href="pgsql.configuration.php#ini.pgsql.max-links" class="link">pgsql.max_links</a>    <var class="filename">php.ini</var> directive.  </p>  <p class="para">   <span class="function"><a href="function.pg-close.php" class="function">pg_close()</a></span> will not close persistent links   generated by <span class="function"><strong>pg_pconnect()</strong></span>.  </p>]]></desc>
	<params>
		<param type="string" name="connection_string "/>
		<param type="string" name="host"/>
		<param type="string" name="port"/>
		<param type="string" name="options"/>
		<param type="string" name="tty"/>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="pg_ping" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_ping</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_ping()</strong></span> pings a database connection and tries to   reconnect it if it is broken.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_ping" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_ping</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_ping()</strong></span> pings a database connection and tries to   reconnect it if it is broken.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_port" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_port</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_port()</strong></span> returns the port number that the   given PostgreSQL <code class="parameter">connection</code> resource is   connected to.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_port" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_port</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_port()</strong></span> returns the port number that the   given PostgreSQL <code class="parameter">connection</code> resource is   connected to.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_prepare" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_prepare</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">    <span class="function"><strong>pg_prepare()</strong></span> creates a prepared statement for later execution with     <span class="function"><a href="function.pg-execute.php" class="function">pg_execute()</a></span> or <span class="function"><a href="function.pg-send-execute.php" class="function">pg_send_execute()</a></span>.     This feature allows commands that will be used repeatedly to     be parsed and planned just once, rather than each time they are executed.     <span class="function"><strong>pg_prepare()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    The function creates a prepared statement named <code class="parameter">stmtname</code> from the <code class="parameter">query</code>     string, which must contain a single SQL command. <code class="parameter">stmtname</code> may be &quot;&quot; to     create an unnamed statement, in which case any pre-existing unnamed     statement is automatically replaced; otherwise it is an error if the     statement name is already defined in the current session. If any parameters     are used, they are referred to in the <code class="parameter">query</code> as $1, $2, etc.  </p>  <p class="para">    Prepared statements for use with <span class="function"><strong>pg_prepare()</strong></span> can also be created by     executing SQL <em>PREPARE</em> statements. (But <span class="function"><strong>pg_prepare()</strong></span> is more flexible since it     does not require parameter types to be pre-specified.) Also, although there     is no PHP function for deleting a prepared statement, the SQL <em>DEALLOCATE</em>    statement can be used for that purpose.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="stmtname"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_prepare" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_prepare</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">    <span class="function"><strong>pg_prepare()</strong></span> creates a prepared statement for later execution with     <span class="function"><a href="function.pg-execute.php" class="function">pg_execute()</a></span> or <span class="function"><a href="function.pg-send-execute.php" class="function">pg_send_execute()</a></span>.     This feature allows commands that will be used repeatedly to     be parsed and planned just once, rather than each time they are executed.     <span class="function"><strong>pg_prepare()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    The function creates a prepared statement named <code class="parameter">stmtname</code> from the <code class="parameter">query</code>     string, which must contain a single SQL command. <code class="parameter">stmtname</code> may be &quot;&quot; to     create an unnamed statement, in which case any pre-existing unnamed     statement is automatically replaced; otherwise it is an error if the     statement name is already defined in the current session. If any parameters     are used, they are referred to in the <code class="parameter">query</code> as $1, $2, etc.  </p>  <p class="para">    Prepared statements for use with <span class="function"><strong>pg_prepare()</strong></span> can also be created by     executing SQL <em>PREPARE</em> statements. (But <span class="function"><strong>pg_prepare()</strong></span> is more flexible since it     does not require parameter types to be pre-specified.) Also, although there     is no PHP function for deleting a prepared statement, the SQL <em>DEALLOCATE</em>    statement can be used for that purpose.  </p>]]></desc>
	<params>
		<param type="string" name="stmtname"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_put_line" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_put_line</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_put_line()</strong></span> sends a NULL-terminated string   to the PostgreSQL backend server.  This is needed in conjunction   with PostgreSQL&#039;s <em>COPY FROM</em> command.  </p>  <p class="para"><em>COPY</em> is a high-speed data loading interface   supported by PostgreSQL.  Data is passed in without being parsed,    and in a single transaction.  </p>  <p class="para">   An alternative to using raw <span class="function"><strong>pg_put_line()</strong></span> commands   is to use <span class="function"><a href="function.pg-copy-from.php" class="function">pg_copy_from()</a></span>.  This is a far simpler    interface.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">     The application must explicitly send the two characters &quot;\.&quot;    on the last line to indicate to the backend that it has finished    sending its data, before issuing <span class="function"><a href="function.pg-end-copy.php" class="function">pg_end_copy()</a></span>.   </p>  </p></blockquote>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Use of the <span class="function"><strong>pg_put_line()</strong></span> causes most large object    operations, including <span class="function"><a href="function.pg-lo-read.php" class="function">pg_lo_read()</a></span> and    <span class="function"><a href="function.pg-lo-tell.php" class="function">pg_lo_tell()</a></span>, to subsequently fail. You can use    <span class="function"><a href="function.pg-copy-from.php" class="function">pg_copy_from()</a></span> and <span class="function"><a href="function.pg-copy-to.php" class="function">pg_copy_to()</a></span>    instead.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_put_line" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_put_line</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_put_line()</strong></span> sends a NULL-terminated string   to the PostgreSQL backend server.  This is needed in conjunction   with PostgreSQL&#039;s <em>COPY FROM</em> command.  </p>  <p class="para"><em>COPY</em> is a high-speed data loading interface   supported by PostgreSQL.  Data is passed in without being parsed,    and in a single transaction.  </p>  <p class="para">   An alternative to using raw <span class="function"><strong>pg_put_line()</strong></span> commands   is to use <span class="function"><a href="function.pg-copy-from.php" class="function">pg_copy_from()</a></span>.  This is a far simpler    interface.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">     The application must explicitly send the two characters &quot;\.&quot;    on the last line to indicate to the backend that it has finished    sending its data, before issuing <span class="function"><a href="function.pg-end-copy.php" class="function">pg_end_copy()</a></span>.   </p>  </p></blockquote>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    Use of the <span class="function"><strong>pg_put_line()</strong></span> causes most large object    operations, including <span class="function"><a href="function.pg-lo-read.php" class="function">pg_lo_read()</a></span> and    <span class="function"><a href="function.pg-lo-tell.php" class="function">pg_lo_tell()</a></span>, to subsequently fail. You can use    <span class="function"><a href="function.pg-copy-from.php" class="function">pg_copy_from()</a></span> and <span class="function"><a href="function.pg-copy-to.php" class="function">pg_copy_to()</a></span>    instead.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_query()</strong></span> executes the <code class="parameter">query</code>   on the specified database <code class="parameter">connection</code>.   <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span> should be preferred   in most cases.  </p>  <p class="para">   If an error occurs, and <strong><code>FALSE</code></strong> is returned, details of the error can   be retrieved using the <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>   function if the connection is valid.  </p>  <p class="para">   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     Although <code class="parameter">connection</code> can be omitted, it     is not recommended, since it can be the cause of hard to find     bugs in scripts.    </span>   </p></blockquote>  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_exec()</strong></span>.    <span class="function"><strong>pg_exec()</strong></span> is still available for compatibility    reasons, but users are encouraged to use the newer name.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_query</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_query()</strong></span> executes the <code class="parameter">query</code>   on the specified database <code class="parameter">connection</code>.   <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span> should be preferred   in most cases.  </p>  <p class="para">   If an error occurs, and <strong><code>FALSE</code></strong> is returned, details of the error can   be retrieved using the <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>   function if the connection is valid.  </p>  <p class="para">   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     Although <code class="parameter">connection</code> can be omitted, it     is not recommended, since it can be the cause of hard to find     bugs in scripts.    </span>   </p></blockquote>  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function used to be called <span class="function"><strong>pg_exec()</strong></span>.    <span class="function"><strong>pg_exec()</strong></span> is still available for compatibility    reasons, but users are encouraged to use the newer name.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_query_params" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_query_params</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Submits a command to the server and waits for the result, with the ability     to pass parameters separately from the SQL command text.  </p>  <p class="para">    <span class="function"><strong>pg_query_params()</strong></span> is like <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>,     but offers additional functionality: parameter     values can be specified separately from the command string proper.     <span class="function"><strong>pg_query_params()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    If parameters are used, they are referred to in the    <code class="parameter">query</code> string as $1, $2, etc. The same parameter may    appear more than once in the <code class="parameter">query</code>; the same value    will be used in that case. <code class="parameter">params</code> specifies the    actual values of the parameters. A <strong><code>NULL</code></strong> value in this array means the    corresponding parameter is SQL <em>NULL</em>.  </p>  <p class="para">    The primary advantage of <span class="function"><strong>pg_query_params()</strong></span> over <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>     is that parameter values     may be separated from the <code class="parameter">query</code> string, thus avoiding the need for tedious     and error-prone quoting and escaping. Unlike <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>,     <span class="function"><strong>pg_query_params()</strong></span> allows at     most one SQL command in the given string. (There can be semicolons in it,     but not more than one nonempty command.)  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="query"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="pg_query_params" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>pg_query_params</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Submits a command to the server and waits for the result, with the ability     to pass parameters separately from the SQL command text.  </p>  <p class="para">    <span class="function"><strong>pg_query_params()</strong></span> is like <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>,     but offers additional functionality: parameter     values can be specified separately from the command string proper.     <span class="function"><strong>pg_query_params()</strong></span> is supported only against PostgreSQL 7.4 or    higher connections; it will fail when using earlier versions.  </p>  <p class="para">    If parameters are used, they are referred to in the    <code class="parameter">query</code> string as $1, $2, etc. The same parameter may    appear more than once in the <code class="parameter">query</code>; the same value    will be used in that case. <code class="parameter">params</code> specifies the    actual values of the parameters. A <strong><code>NULL</code></strong> value in this array means the    corresponding parameter is SQL <em>NULL</em>.  </p>  <p class="para">    The primary advantage of <span class="function"><strong>pg_query_params()</strong></span> over <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>     is that parameter values     may be separated from the <code class="parameter">query</code> string, thus avoiding the need for tedious     and error-prone quoting and escaping. Unlike <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span>,     <span class="function"><strong>pg_query_params()</strong></span> allows at     most one SQL command in the given string. (There can be semicolons in it,     but not more than one nonempty command.)  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="pg_result_error" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_result_error</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_result_error()</strong></span> returns any error message   associated with the <code class="parameter">result</code> resource. Therefore,   the user has a better chance of getting the correct error message than   with <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>.  </p>  <p class="para">   The function <span class="function"><a href="function.pg-result-error-field.php" class="function">pg_result_error_field()</a></span> can give much greater   detail on result errors than <span class="function"><strong>pg_result_error()</strong></span>.  </p>  <p class="para">   Because <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span> returns <strong><code>FALSE</code></strong> if the query fails,   you must use <span class="function"><a href="function.pg-send-query.php" class="function">pg_send_query()</a></span> and   <span class="function"><a href="function.pg-get-result.php" class="function">pg_get_result()</a></span> to get the result handle.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_result_error_field" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_result_error_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$fieldcode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_result_error_field()</strong></span> returns one of the detailed error message   fields associated with <code class="parameter">result</code> resource. It is only available   against a PostgreSQL 7.4 or above server.  The error field is specified by   the <code class="parameter">fieldcode</code>.  </p>  <p class="para">   Because <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span> and <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span> return <strong><code>FALSE</code></strong> if the query fails,   you must use <span class="function"><a href="function.pg-send-query.php" class="function">pg_send_query()</a></span> and   <span class="function"><a href="function.pg-get-result.php" class="function">pg_get_result()</a></span> to get the result handle.  </p>  <p class="para">   If you need to get additional error information from failed <span class="function"><a href="function.pg-query.php" class="function">pg_query()</a></span> queries,     use <span class="function"><a href="function.pg-set-error-verbosity.php" class="function">pg_set_error_verbosity()</a></span> and <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>   and then parse the result.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="fieldcode"/>
	</params>
</keyword>
<keyword name="pg_result_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_result_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_result_seek()</strong></span> sets the internal row offset in   a result resource.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="pg_result_status" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_result_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = PGSQL_STATUS_LONG</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_result_status()</strong></span> returns the status of a result   resource, or the PostgreSQL command completion tag associated with the result  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="long" name="result_type"/>
	</params>
</keyword>
<keyword name="pg_result_status" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_result_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code><span class="initializer"> = PGSQL_STATUS_LONG</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_result_status()</strong></span> returns the status of a result   resource, or the PostgreSQL command completion tag associated with the result  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="pg_select" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_select</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_select()</strong></span> selects records specified by   <em>assoc_array</em> which has   <em>field=&gt;value</em>. For a successful query, it returns an   array containing all records and fields that match the condition   specified by <em>assoc_array</em>.  </p>  <p class="para">If <em>options</em> is specified,   <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied to   <em>assoc_array</em> with the specified flags.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="ids"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="pg_select" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_select</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$assoc_array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_select()</strong></span> selects records specified by   <em>assoc_array</em> which has   <em>field=&gt;value</em>. For a successful query, it returns an   array containing all records and fields that match the condition   specified by <em>assoc_array</em>.  </p>  <p class="para">If <em>options</em> is specified,   <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied to   <em>assoc_array</em> with the specified flags.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="ids"/>
	</params>
</keyword>
<keyword name="pg_send_execute" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_send_execute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Sends a request to execute a prepared statement with given parameters,     without waiting for the result(s).  </p>  <p class="para">    This is similar to <span class="function"><a href="function.pg-send-query-params.php" class="function">pg_send_query_params()</a></span>, but the command to be executed is specified     by naming a previously-prepared statement, instead of giving a query string. The     function&#039;s parameters are handled identically to <span class="function"><a href="function.pg-execute.php" class="function">pg_execute()</a></span>.     Like <span class="function"><a href="function.pg-execute.php" class="function">pg_execute()</a></span>, it will not work on pre-7.4 versions of    PostgreSQL.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="stmtname"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="pg_send_prepare" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_send_prepare</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$stmtname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   )</div>  <p class="para rdfs-comment">    Sends a request to create a prepared statement with the given parameters,     without waiting for completion.  </p>  <p class="para">    This is an asynchronous version of <span class="function"><a href="function.pg-prepare.php" class="function">pg_prepare()</a></span>: it returns <strong><code>TRUE</code></strong> if it was able to     dispatch the request, and <strong><code>FALSE</code></strong> if not. After a successful call, call     <span class="function"><a href="function.pg-get-result.php" class="function">pg_get_result()</a></span> to determine whether the server successfully created the     prepared statement. The function&#039;s parameters are handled identically to     <span class="function"><a href="function.pg-prepare.php" class="function">pg_prepare()</a></span>. Like <span class="function"><a href="function.pg-prepare.php" class="function">pg_prepare()</a></span>, it will not work     on pre-7.4 versions of PostgreSQL.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="stmtname"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_send_query_params" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_send_query_params</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">    Submits a command and separate parameters to the server without     waiting for the result(s).  </p>  <p class="para">    This is equivalent to <span class="function"><a href="function.pg-send-query.php" class="function">pg_send_query()</a></span> except that query     parameters can be specified separately from the     <code class="parameter">query</code> string. The function&#039;s parameters are     handled identically to <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>. Like     <span class="function"><a href="function.pg-query-params.php" class="function">pg_query_params()</a></span>, it will not work on pre-7.4 PostgreSQL     connections, and it allows only one command in the query string.   </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="pg_set_client_encoding" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_set_client_encoding</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_set_client_encoding()</strong></span> sets the client   encoding and returns 0 if success or -1 if error.  </p>  <p class="para">   PostgreSQL will automatically convert data in the backend database   encoding into the frontend encoding.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The function used to be called    <span class="function"><strong>pg_setclientencoding()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="pg_set_client_encoding" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_set_client_encoding</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_set_client_encoding()</strong></span> sets the client   encoding and returns 0 if success or -1 if error.  </p>  <p class="para">   PostgreSQL will automatically convert data in the backend database   encoding into the frontend encoding.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The function used to be called    <span class="function"><strong>pg_setclientencoding()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="pg_set_error_verbosity" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_set_error_verbosity</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">int</span> <code class="parameter">$verbosity</code></span>   )</div>  <p class="para rdfs-comment">    Determines the verbosity of messages returned by <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>     and <span class="function"><a href="function.pg-result-error.php" class="function">pg_result_error()</a></span>.  </p>  <p class="para">   <span class="function"><strong>pg_set_error_verbosity()</strong></span> sets the verbosity mode, returning the connection&#039;s previous    setting. In <strong><code>PGSQL_ERRORS_TERSE</code></strong> mode, returned messages include severity, primary text, and    position only; this will normally fit on a single line. The default mode (<strong><code>PGSQL_ERRORS_DEFAULT</code></strong>)   produces messages that include the above plus any detail, hint, or context    fields (these may span multiple lines). The <strong><code>PGSQL_ERRORS_VERBOSE</code></strong> mode includes all available    fields. Changing the verbosity does not affect the messages available from    already-existing result objects, only subsequently-created ones.  </p>]]></desc>
	<params>
		<param type="int" name="verbosity"/>
	</params>
</keyword>
<keyword name="pg_set_error_verbosity" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_set_error_verbosity</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   ], <span class="methodparam"><span class="type">int</span> <code class="parameter">$verbosity</code></span>   )</div>  <p class="para rdfs-comment">    Determines the verbosity of messages returned by <span class="function"><a href="function.pg-last-error.php" class="function">pg_last_error()</a></span>     and <span class="function"><a href="function.pg-result-error.php" class="function">pg_result_error()</a></span>.  </p>  <p class="para">   <span class="function"><strong>pg_set_error_verbosity()</strong></span> sets the verbosity mode, returning the connection&#039;s previous    setting. In <strong><code>PGSQL_ERRORS_TERSE</code></strong> mode, returned messages include severity, primary text, and    position only; this will normally fit on a single line. The default mode (<strong><code>PGSQL_ERRORS_DEFAULT</code></strong>)   produces messages that include the above plus any detail, hint, or context    fields (these may span multiple lines). The <strong><code>PGSQL_ERRORS_VERBOSE</code></strong> mode includes all available    fields. Changing the verbosity does not affect the messages available from    already-existing result objects, only subsequently-created ones.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
		<param type="int" name="verbosity"/>
	</params>
</keyword>
<keyword name="pg_trace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_trace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code><span class="initializer"> = &quot;w&quot;</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_trace()</strong></span> enables tracing of the PostgreSQL   frontend/backend communication to a file. To fully understand the results,   one needs to be familiar with the internals of PostgreSQL   communication protocol.  </p>  <p class="para">For those who are not, it can still be   useful for tracing errors in queries sent to the server, you   could do for example <strong class="command">grep &#039;^To backend&#039;   trace.log</strong> and see what queries actually were sent to the   PostgreSQL server. For more information, refer to the   <a href="http://www.postgresql.org/docs/current/interactive/" class="link external">&raquo;&nbsp;PostgreSQL Documentation</a>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_trace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_trace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code><span class="initializer"> = &quot;w&quot;</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_trace()</strong></span> enables tracing of the PostgreSQL   frontend/backend communication to a file. To fully understand the results,   one needs to be familiar with the internals of PostgreSQL   communication protocol.  </p>  <p class="para">For those who are not, it can still be   useful for tracing errors in queries sent to the server, you   could do for example <strong class="command">grep &#039;^To backend&#039;   trace.log</strong> and see what queries actually were sent to the   PostgreSQL server. For more information, refer to the   <a href="http://www.postgresql.org/docs/current/interactive/" class="link external">&raquo;&nbsp;PostgreSQL Documentation</a>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="pg_trace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_trace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code><span class="initializer"> = &quot;w&quot;</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_trace()</strong></span> enables tracing of the PostgreSQL   frontend/backend communication to a file. To fully understand the results,   one needs to be familiar with the internals of PostgreSQL   communication protocol.  </p>  <p class="para">For those who are not, it can still be   useful for tracing errors in queries sent to the server, you   could do for example <strong class="command">grep &#039;^To backend&#039;   trace.log</strong> and see what queries actually were sent to the   PostgreSQL server. For more information, refer to the   <a href="http://www.postgresql.org/docs/current/interactive/" class="link external">&raquo;&nbsp;PostgreSQL Documentation</a>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="pg_transaction_status" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pg_transaction_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   )</div>  <p class="para rdfs-comment">    Returns the current in-transaction status of the server.  </p>  <div class="caution"><strong class="caution">Caution</strong>    <p class="para">      <span class="function"><strong>pg_transaction_status()</strong></span> will give incorrect results when using      a PostgreSQL 7.3 server that has the parameter <em>autocommit</em>      set to off.  The server-side autocommit feature has been      deprecated and does not exist in later server versions.    </p>  </div>]]></desc>
	<params>
		<param type="resource" name="connnection"/>
	</params>
</keyword>
<keyword name="pg_tty" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_tty</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_tty()</strong></span> returns the TTY name that server   side debugging output is sent to on the given PostgreSQL   <code class="parameter">connection</code> resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>pg_tty()</strong></span> is obsolete, since the server no longer pays    attention to the TTY setting, but the function remains for backwards    compatibility.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_tty" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_tty</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_tty()</strong></span> returns the TTY name that server   side debugging output is sent to on the given PostgreSQL   <code class="parameter">connection</code> resource.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    <span class="function"><strong>pg_tty()</strong></span> is obsolete, since the server no longer pays    attention to the TTY setting, but the function remains for backwards    compatibility.   </p>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_unescape_bytea" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>pg_unescape_bytea</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_unescape_bytea()</strong></span> unescapes PostgreSQL bytea data   values.  It returns the unescaped string, possibly containing binary data.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    When you <em>SELECT</em> a bytea type, PostgreSQL returns octal byte values    prefixed with &#039;\&#039; (e.g. \032). Users are supposed to convert back to    binary format manually.   </p>   <p class="para">    This function requires PostgreSQL 7.2 or later. With PostgreSQL    7.2.0 and 7.2.1, bytea values must be cast when you enable    multi-byte support. i.e. <em>INSERT INTO test_table (image)    VALUES (&#039;$image_escaped&#039;::bytea);</em> PostgreSQL 7.2.2 or    later does not need a cast. The exception is when the client and backend    character encoding does not match, and there may be multi-byte    stream error. User must then cast to bytea to avoid this error.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="pg_untrace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_untrace</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   Stop tracing started by <span class="function"><a href="function.pg-trace.php" class="function">pg_trace()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_untrace" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pg_untrace</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   Stop tracing started by <span class="function"><a href="function.pg-trace.php" class="function">pg_trace()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pg_update" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_update</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$condition</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_update()</strong></span> updates records that matches   <em>condition</em> with <em>data</em>. If   <em>options</em> is specified,   <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied to   <em>data</em> with specified options.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="fields"/>
		<param type="array" name="ids"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="pg_update" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>pg_update</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$condition</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$options</code><span class="initializer"> = PGSQL_DML_EXEC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_update()</strong></span> updates records that matches   <em>condition</em> with <em>data</em>. If   <em>options</em> is specified,   <span class="function"><a href="function.pg-convert.php" class="function">pg_convert()</a></span> is applied to   <em>data</em> with specified options.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="table"/>
		<param type="array" name="fields"/>
		<param type="array" name="ids"/>
	</params>
</keyword>
<keyword name="pg_version" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_version</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_version()</strong></span> returns an array with the client, protocol   and server version. Protocol and server versions are only available if PHP   was compiled with PostgreSQL 7.4 or later.  </p>  <p class="para">   For more detailed server information, use <span class="function"><a href="function.pg-parameter-status.php" class="function">pg_parameter_status()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="pg_version" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>pg_version</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$connection</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pg_version()</strong></span> returns an array with the client, protocol   and server version. Protocol and server versions are only available if PHP   was compiled with PostgreSQL 7.4 or later.  </p>  <p class="para">   For more detailed server information, use <span class="function"><a href="function.pg-parameter-status.php" class="function">pg_parameter_status()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="php_egg_logo_guid" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_ini_loaded_file" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_ini_loaded_file</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Check if a <var class="filename">php.ini</var> file is loaded, and retrieve its path.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_ini_scanned_files" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_ini_scanned_files</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>php_ini_scanned_files()</strong></span> returns a comma-separated   list of configuration files parsed after <var class="filename">php.ini</var>.  These files are   found in a directory defined by the   <strong class="option configure">--with-config-file-scan-dir</strong> option   which is set during compilation.  </p>  <p class="para">   The returned configuration files also include the path as declared in   the <strong class="option configure">--with-config-file-scan-dir</strong>   option.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_logo_guid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_logo_guid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function returns the ID which can be used to display the PHP logo   using the built-in image.   Logo is displayed only if <a href="ini.core.php#ini.expose-php" class="link">expose_php</a>   is On.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.5.0.</p></div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_real_logo_guid" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_sapi_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_sapi_name</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Returns a lowercase string that describes the type of interface   (the Server API, SAPI) that PHP is using. For example, in CLI PHP this   string will be &quot;cli&quot; whereas with Apache it may have several different   values depending on the exact SAPI used. Possible values are listed   below.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="php_strip_whitespace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_strip_whitespace</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Returns the PHP source code in <code class="parameter">filename</code> with   PHP comments and whitespace removed. This may be useful for determining the   amount of actual code in your scripts compared with the amount of comments.   This is similar to using <strong class="command">php -w</strong> from the   <a href="features.commandline.php" class="link">commandline</a>.  </p>]]></desc>
	<params>
		<param type="string" name="file_name"/>
	</params>
</keyword>
<keyword name="php_uname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>php_uname</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code><span class="initializer"> = &quot;a&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>php_uname()</strong></span> returns a description of the operating   system PHP is running on.  This is the same string you see at the very   top of the <span class="function"><a href="function.phpinfo.php" class="function">phpinfo()</a></span> output.  For the name of just   the operating system, consider using the <strong><code>PHP_OS</code></strong>   constant, but keep in mind this constant will contain the operating   system PHP was <em class="emphasis">built</em> on.  </p>  <p class="para">   On some older UNIX platforms, it may not be able to determine the   current OS information in which case it will revert to displaying   the OS PHP was built on.  This will only happen if your uname()    library call either doesn&#039;t exist or doesn&#039;t work.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="phpcredits" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>phpcredits</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = CREDITS_ALL</span></span>  ] )</div>  <p class="para rdfs-comment">   This function prints out the credits listing the PHP developers,   modules, etc. It generates the appropriate HTML codes to insert   the information in a page.   </p>]]></desc>
	<params>
		<param type="int" name="flag"/>
	</params>
</keyword>
<keyword name="phpcredits" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>phpcredits</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$flag</code><span class="initializer"> = CREDITS_ALL</span></span>  ] )</div>  <p class="para rdfs-comment">   This function prints out the credits listing the PHP developers,   modules, etc. It generates the appropriate HTML codes to insert   the information in a page.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="phpinfo" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>phpinfo</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$what</code><span class="initializer"> = INFO_ALL</span></span>  ] )</div>  <p class="para rdfs-comment">   Outputs a large amount of information about the current state of  PHP.    This includes information about PHP compilation options and extensions,   the PHP version, server information and environment (if compiled as a   module), the PHP environment, OS version information, paths, master and   local values of configuration options, HTTP headers, and the PHP License.  </p>  <p class="para">   Because every system is setup differently, <span class="function"><strong>phpinfo()</strong></span> is   commonly used to check <a href="configuration.php" class="link">configuration settings</a> and for available   <a href="language.variables.predefined.php" class="link">predefined variables</a>   on a given system.  </p>  <p class="para">   <span class="function"><strong>phpinfo()</strong></span> is also a valuable debugging tool as it   contains all EGPCS (Environment, GET, POST, Cookie, Server) data.  </p>]]></desc>
	<params>
		<param type="int" name="what"/>
	</params>
</keyword>
<keyword name="phpinfo" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>phpinfo</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$what</code><span class="initializer"> = INFO_ALL</span></span>  ] )</div>  <p class="para rdfs-comment">   Outputs a large amount of information about the current state of  PHP.    This includes information about PHP compilation options and extensions,   the PHP version, server information and environment (if compiled as a   module), the PHP environment, OS version information, paths, master and   local values of configuration options, HTTP headers, and the PHP License.  </p>  <p class="para">   Because every system is setup differently, <span class="function"><strong>phpinfo()</strong></span> is   commonly used to check <a href="configuration.php" class="link">configuration settings</a> and for available   <a href="language.variables.predefined.php" class="link">predefined variables</a>   on a given system.  </p>  <p class="para">   <span class="function"><strong>phpinfo()</strong></span> is also a valuable debugging tool as it   contains all EGPCS (Environment, GET, POST, Cookie, Server) data.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="phpversion" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>phpversion</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$extension</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns a string containing the version of the currently running PHP   parser or extension.  </p>]]></desc>
	<params>
		<param type="string" name="extension"/>
	</params>
</keyword>
<keyword name="phpversion" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>phpversion</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$extension</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns a string containing the version of the currently running PHP   parser or extension.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="pi" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>pi</strong></span>     ( <span class="methodparam">void</span>    )</div>  <p class="simpara">   Returns an approximation of pi.  The returned <span class="type"><a href="language.types.float.php" class="type float">float</a></span>   has a precision based on the   <a href="ini.core.php#ini.precision" class="link">precision</a> directive in   <var class="filename">php.ini</var>, which defaults to <em>14</em>.   Also, you can use the <strong><code>M_PI</code></strong> constant which yields   identical results to <span class="function"><strong>pi()</strong></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$command</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Opens a pipe to a process executed by forking the command given   by <code class="parameter">command</code>.  </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="posix_access" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_access</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = POSIX_F_OK</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>posix_access()</strong></span> checks the user&#039;s permission of a file.  </p>]]></desc>
	<params>
		<param type="string" name="file"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="posix_access" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_access</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$file</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = POSIX_F_OK</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>posix_access()</strong></span> checks the user&#039;s permission of a file.  </p>]]></desc>
	<params>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="posix_ctermid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>posix_ctermid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Generates a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> which is the pathname for the current    controlling terminal for the process.  On error this will set errno,    which can be checked using <span class="function"><a href="function.posix-get-last-error.php" class="function">posix_get_last_error()</a></span>  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_get_last_error" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_get_last_error</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Retrieve the error number set by the last posix function that failed.   The system error message associated with the errno may be checked with   <span class="function"><a href="function.posix-strerror.php" class="function">posix_strerror()</a></span>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getcwd" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>posix_getcwd</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the absolute pathname of the script&#039;s current working directory.   On error, it sets errno which can be checked using   <span class="function"><a href="function.posix-get-last-error.php" class="function">posix_get_last_error()</a></span>  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getegid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getegid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the numeric effective group ID of the current process.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_geteuid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_geteuid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the numeric effective user ID of the current process. See   also <span class="function"><a href="function.posix-getpwuid.php" class="function">posix_getpwuid()</a></span> for information on how   to convert this into a useable username.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getgid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getgid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the numeric real group ID of the current process.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getgrgid" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getgrgid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$gid</code></span>   )</div>  <p class="para rdfs-comment">   Gets information about a group provided its id.  </p>]]></desc>
	<params>
		<param type="long" name="gid"/>
	</params>
</keyword>
<keyword name="posix_getgrnam" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getgrnam</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Gets information about a group provided its name.   </p>]]></desc>
	<params>
		<param type="string" name="groupname"/>
	</params>
</keyword>
<keyword name="posix_getgroups" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getgroups</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the group set of the current process.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getlogin" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>posix_getlogin</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the login name of the user owning the current process.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getpgid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getpgid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code></span>   )</div>  <p class="para rdfs-comment">   Returns the process group identifier of the process   <code class="parameter">pid</code> or <strong><code>FALSE</code></strong> on failure.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getpgrp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getpgrp</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the process group identifier of the current process.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getpid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getpid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the process identifier of the current process.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getppid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getppid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the process identifier of the parent process of the   current process.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getpwnam" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getpwnam</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   )</div>  <p class="para rdfs-comment">   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of information about the given user.  </p>]]></desc>
	<params>
		<param type="string" name="groupname"/>
	</params>
</keyword>
<keyword name="posix_getpwuid" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getpwuid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$uid</code></span>   )</div>  <p class="para rdfs-comment">   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of information about the user    referenced by the given user ID.  </p>]]></desc>
	<params>
		<param type="long" name="uid"/>
	</params>
</keyword>
<keyword name="posix_getrlimit" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_getrlimit</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>posix_getrlimit()</strong></span> returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span>   of information about the current resource&#039;s soft and hard limits.  </p>  <p class="para">    Each resource has an associated soft and hard limit.  The soft    limit is the value that the kernel enforces for the corresponding    resource.  The hard limit acts as a ceiling for the soft limit.    An unprivileged process may only set its soft limit to a value    from 0 to the hard limit, and irreversibly lower its hard limit.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getsid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getsid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code></span>   )</div>  <p class="para rdfs-comment">   Return the session id of the process <code class="parameter">pid</code>.   The session id of a process is the process group id of the session leader.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_getuid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_getuid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Return the numeric real user ID of the current process.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_initgroups" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_initgroups</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$base_group_id</code></span>   )</div>  <p class="para rdfs-comment">   Calculates the group access list for the user specified in name.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="int" name="base_group_id"/>
	</params>
</keyword>
<keyword name="posix_isatty" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_isatty</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$fd</code></span>   )</div>   <p class="para rdfs-comment">    Determines if the file descriptor <code class="parameter">fd</code> refers to a valid    terminal type device.  </p>]]></desc>
	<params>
		<param type="int" name="fd"/>
	</params>
</keyword>
<keyword name="posix_kill" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_kill</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$sig</code></span>   )</div>  <p class="para rdfs-comment">   Send the signal <code class="parameter">sig</code> to the process with   the process identifier <code class="parameter">pid</code>.  </p>]]></desc>
	<params>
		<param type="int" name="pid"/>
		<param type="int" name="sig"/>
	</params>
</keyword>
<keyword name="posix_mkfifo" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_mkfifo</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>posix_mkfifo()</strong></span> creates a special   <em>FIFO</em> file which exists in the file system and acts as   a bidirectional communication endpoint for processes.  </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="posix_mknod" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_mknod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$major</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Creates a special or ordinary file.  </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
		<param type="int" name="major"/>
		<param type="int" name="minor"/>
	</params>
</keyword>
<keyword name="posix_mknod" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_mknod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$major</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Creates a special or ordinary file.  </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
		<param type="int" name="major"/>
	</params>
</keyword>
<keyword name="posix_mknod" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_mknod</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pathname</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$major</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$minor</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Creates a special or ordinary file.  </p>]]></desc>
	<params>
		<param type="string" name="pathname"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="posix_setegid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_setegid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$gid</code></span>   )</div>  <p class="para rdfs-comment">   Set the effective group ID of the current process. This is a   privileged function and needs appropriate privileges (usually   root) on the system to be able to perform this function.  </p>]]></desc>
	<params>
		<param type="int" name="uid"/>
	</params>
</keyword>
<keyword name="posix_seteuid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_seteuid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$uid</code></span>   )</div>  <p class="para rdfs-comment">   Set the real user ID of the current process. This is a privileged   function and needs appropriate privileges (usually root) on   the system to be able to perform this function.  </p>]]></desc>
	<params>
		<param type="int" name="uid"/>
	</params>
</keyword>
<keyword name="posix_setgid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_setgid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$gid</code></span>   )</div>  <p class="para rdfs-comment">   Set the real group ID of the current process. This is a   privileged function and needs appropriate privileges (usually   root) on the system to be able to perform this function. The   appropriate order of function calls is   <span class="function"><strong>posix_setgid()</strong></span> first,   <span class="function"><a href="function.posix-setuid.php" class="function">posix_setuid()</a></span> last.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If the caller is a super user, this will also set the effective    group id.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="uid"/>
	</params>
</keyword>
<keyword name="posix_setpgid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_setpgid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$pid</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pgid</code></span>   )</div>  <p class="para rdfs-comment">   Let the process <code class="parameter">pid</code> join the process group   <code class="parameter">pgid</code>.   </p>]]></desc>
	<params>
		<param type="int" name="pid"/>
		<param type="int" name="pgid"/>
	</params>
</keyword>
<keyword name="posix_setsid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>posix_setsid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Make the current process a session leader.   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_setuid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>posix_setuid</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$uid</code></span>   )</div>  <p class="para rdfs-comment">   Set the real user ID of the current process. This is a privileged   function that needs appropriate privileges (usually root) on   the system to be able to perform this function.  </p>]]></desc>
	<params>
		<param type="int" name="uid"/>
	</params>
</keyword>
<keyword name="posix_strerror" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>posix_strerror</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$errno</code></span>   )</div>  <p class="para rdfs-comment">   Returns the POSIX system error message associated with the given   <code class="parameter">errno</code>.  You may get the   <code class="parameter">errno</code> parameter by calling   <span class="function"><a href="function.posix-get-last-error.php" class="function">posix_get_last_error()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="errno"/>
	</params>
</keyword>
<keyword name="posix_times" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_times</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets information about the current CPU usage.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="posix_ttyname" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>posix_ttyname</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$fd</code></span>   )</div>  <p class="para rdfs-comment">   Returns a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> for the absolute path to the current   terminal device that is open on the file descriptor   <code class="parameter">fd</code>.  </p>]]></desc>
	<params>
		<param type="int" name="fd"/>
	</params>
</keyword>
<keyword name="posix_uname" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>posix_uname</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets information about the system.  </p>  <p class="para">   Posix requires that assumptions must not be made about the   format of the values, e.g. the assumption that a release may contain   three digits or anything else returned by this function.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="pow" type="function" returnType="number">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <span class="methodname"><strong>pow</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <code class="parameter">$base</code></span>    , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <code class="parameter">$exp</code></span>    )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">base</code> raised to the power of   <code class="parameter">exp</code>.   </p>]]></desc>
	<params>
		<param type="number" name="base"/>
		<param type="number" name="exponent"/>
	</params>
</keyword>
<keyword name="preg_grep" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>preg_grep</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the array consisting of the elements of the    <code class="parameter">input</code> array that match the given   <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="regex"/>
		<param type="array" name="input"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="preg_grep" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>preg_grep</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the array consisting of the elements of the    <code class="parameter">input</code> array that match the given   <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="regex"/>
		<param type="array" name="input"/>
	</params>
</keyword>
<keyword name="preg_last_error" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_last_error</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the error code of the last PCRE regex execution.  </p>  <p class="para">   <div class="example" id="example-4875">    <p><strong>Example #1 <span class="function"><strong>preg_last_error()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /><br />preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?:\D+|&lt;\d+&gt;)*[!?]/'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'foobar&nbsp;foobar&nbsp;foobar'</span><span style="color: #007700">);<br /><br />if&nbsp;(</span><span style="color: #0000BB">preg_last_error</span><span style="color: #007700">()&nbsp;==&nbsp;</span><span style="color: #0000BB">PREG_BACKTRACK_LIMIT_ERROR</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;</span><span style="color: #DD0000">'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!'</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>    <div class="example-contents"><p>The above example will output:</p></div>    <div class="example-contents screen"><div class="cdata"><pre>Backtrack limit was exhausted!</pre></div>    </div>   </div>  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="preg_match" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for a match to the regular   expression given in <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
		<param type="int" name="flags"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="preg_match" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for a match to the regular   expression given in <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="preg_match" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for a match to the regular   expression given in <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
	</params>
</keyword>
<keyword name="preg_match" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for a match to the regular   expression given in <code class="parameter">pattern</code>.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
	</params>
</keyword>
<keyword name="preg_match_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match_all</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PREG_PATTERN_ORDER</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for all matches to the regular   expression given in <code class="parameter">pattern</code> and puts them in   <code class="parameter">matches</code> in the order specified by   <code class="parameter">flags</code>.  </p>  <p class="para">   After the first match is found, the subsequent searches  are continued   on from end of the last match.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
		<param type="int" name="flags"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="preg_match_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match_all</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PREG_PATTERN_ORDER</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for all matches to the regular   expression given in <code class="parameter">pattern</code> and puts them in   <code class="parameter">matches</code> in the order specified by   <code class="parameter">flags</code>.  </p>  <p class="para">   After the first match is found, the subsequent searches  are continued   on from end of the last match.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="preg_match_all" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>preg_match_all</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$matches</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = <strong><code>PREG_PATTERN_ORDER</code></strong></span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for all matches to the regular   expression given in <code class="parameter">pattern</code> and puts them in   <code class="parameter">matches</code> in the order specified by   <code class="parameter">flags</code>.  </p>  <p class="para">   After the first match is found, the subsequent searches  are continued   on from end of the last match.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="array" name="subpatterns"/>
	</params>
</keyword>
<keyword name="preg_quote" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>preg_quote</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>  [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>preg_quote()</strong></span> takes <code class="parameter">str</code>   and puts a backslash in front of every character that is part of   the regular expression syntax.  This is useful if you have a   run-time string that you need to match in some text and the   string may contain special regex characters.  </p>  <p class="para">   The special regular expression characters are:   <em>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</em>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="delim_char"/>
	</params>
</keyword>
<keyword name="preg_quote" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>preg_quote</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>  [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>preg_quote()</strong></span> takes <code class="parameter">str</code>   and puts a backslash in front of every character that is part of   the regular expression syntax.  This is useful if you have a   run-time string that you need to match in some text and the   string may contain special regex characters.  </p>  <p class="para">   The special regular expression characters are:   <em>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</em>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="preg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for matches to   <code class="parameter">pattern</code> and replaces them with   <code class="parameter">replacement</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="limit"/>
		<param type="" name="count"/>
	</params>
</keyword>
<keyword name="preg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for matches to   <code class="parameter">pattern</code> and replaces them with   <code class="parameter">replacement</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="preg_replace" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   Searches <code class="parameter">subject</code> for matches to   <code class="parameter">pattern</code> and replaces them with   <code class="parameter">replacement</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
	</params>
</keyword>
<keyword name="preg_replace_callback" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace_callback</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   The behavior of this function is almost identical to   <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span>, except for the fact that instead of   <code class="parameter">replacement</code> parameter, one should specify a   <code class="parameter">callback</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="callback"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="limit"/>
		<param type="" name="count"/>
	</params>
</keyword>
<keyword name="preg_replace_callback" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace_callback</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   The behavior of this function is almost identical to   <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span>, except for the fact that instead of   <code class="parameter">replacement</code> parameter, one should specify a   <code class="parameter">callback</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="callback"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="preg_replace_callback" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>preg_replace_callback</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ]] )</div>  <p class="para rdfs-comment">   The behavior of this function is almost identical to   <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span>, except for the fact that instead of   <code class="parameter">replacement</code> parameter, one should specify a   <code class="parameter">callback</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="regex"/>
		<param type="mixed" name="callback"/>
		<param type="mixed" name="subject"/>
	</params>
</keyword>
<keyword name="preg_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>preg_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Split the given string by a regular expression.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="int" name="limit"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="preg_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>preg_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Split the given string by a regular expression.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="preg_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>preg_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Split the given string by a regular expression.  </p>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="subject"/>
	</params>
</keyword>
<keyword name="prev" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>prev</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   Rewind the internal array pointer.  </p>  <p class="para">   <span class="function"><strong>prev()</strong></span> behaves just like <span class="function"><a href="function.next.php" class="function">next()</a></span>,   except it rewinds the internal array pointer one place instead of advancing it.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
	</params>
</keyword>
<keyword name="printf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>printf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Produces output according to <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="printf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>printf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Produces output according to <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="printf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>printf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Produces output according to <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="proc_close" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>proc_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>proc_close()</strong></span> is similar to <span class="function"><a href="function.pclose.php" class="function">pclose()</a></span>   except that it only works on processes opened by   <span class="function"><a href="function.proc-open.php" class="function">proc_open()</a></span>.   <span class="function"><strong>proc_close()</strong></span> waits for the process to terminate, and   returns its exit code.  If you have open pipes to that process, you   should <span class="function"><a href="function.fclose.php" class="function">fclose()</a></span> them prior to calling this function in   order to avoid a deadlock - the child process may not be able to exit   while the pipes are open.  </p>]]></desc>
	<params>
		<param type="resource" name="process"/>
	</params>
</keyword>
<keyword name="proc_get_status" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>proc_get_status</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>proc_get_status()</strong></span> fetches data about a   process opened using <span class="function"><a href="function.proc-open.php" class="function">proc_open()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="process"/>
	</params>
</keyword>
<keyword name="proc_nice" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>proc_nice</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$increment</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>proc_nice()</strong></span> changes the priority of the current   process by the amount specified in <code class="parameter">increment</code>. A   positive <code class="parameter">increment</code> will lower the priority of the   current process, whereas a negative <code class="parameter">increment</code>   will raise the priority.  </p>  <p class="para">   <span class="function"><strong>proc_nice()</strong></span> is not related to   <span class="function"><a href="function.proc-open.php" class="function">proc_open()</a></span> and its associated functions in any way.  </p>]]></desc>
	<params>
		<param type="int" name="priority"/>
	</params>
</keyword>
<keyword name="proc_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>proc_open</strong></span>       ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter">$descriptorspec</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$pipes</code></span>      [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cwd</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$env</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$other_options</code></span>     ]]] )</div>    <p class="para rdfs-comment">     <span class="function"><strong>proc_open()</strong></span> is similar to <span class="function"><a href="function.popen.php" class="function">popen()</a></span>     but provides a much greater degree of control over the program execution.    </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="array" name="descriptorspec"/>
		<param type="array" name="&amp;pipes"/>
		<param type="string" name="cwd"/>
		<param type="array" name="env"/>
		<param type="array" name="other_options"/>
	</params>
</keyword>
<keyword name="proc_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>proc_open</strong></span>       ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter">$descriptorspec</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$pipes</code></span>      [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cwd</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$env</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$other_options</code></span>     ]]] )</div>    <p class="para rdfs-comment">     <span class="function"><strong>proc_open()</strong></span> is similar to <span class="function"><a href="function.popen.php" class="function">popen()</a></span>     but provides a much greater degree of control over the program execution.    </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="array" name="descriptorspec"/>
		<param type="array" name="&amp;pipes"/>
		<param type="string" name="cwd"/>
		<param type="array" name="env"/>
	</params>
</keyword>
<keyword name="proc_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>proc_open</strong></span>       ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter">$descriptorspec</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$pipes</code></span>      [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cwd</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$env</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$other_options</code></span>     ]]] )</div>    <p class="para rdfs-comment">     <span class="function"><strong>proc_open()</strong></span> is similar to <span class="function"><a href="function.popen.php" class="function">popen()</a></span>     but provides a much greater degree of control over the program execution.    </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="array" name="descriptorspec"/>
		<param type="array" name="&amp;pipes"/>
		<param type="string" name="cwd"/>
	</params>
</keyword>
<keyword name="proc_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">      <span class="type">resource</span> <span class="methodname"><strong>proc_open</strong></span>       ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter">$descriptorspec</code></span>      , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$pipes</code></span>      [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$cwd</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$env</code></span>      [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$other_options</code></span>     ]]] )</div>    <p class="para rdfs-comment">     <span class="function"><strong>proc_open()</strong></span> is similar to <span class="function"><a href="function.popen.php" class="function">popen()</a></span>     but provides a much greater degree of control over the program execution.    </p>]]></desc>
	<params>
		<param type="string" name="command"/>
		<param type="array" name="descriptorspec"/>
		<param type="array" name="&amp;pipes"/>
	</params>
</keyword>
<keyword name="proc_terminate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>proc_terminate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$signal</code><span class="initializer"> = 15</span></span>  ] )</div>  <p class="para rdfs-comment">   Signals a <code class="parameter">process</code> (created using   <span class="function"><a href="function.proc-open.php" class="function">proc_open()</a></span>) that it should terminate.   <span class="function"><strong>proc_terminate()</strong></span> returns immediately and does not wait   for the process to terminate.  </p>  <p class="para">   <span class="function"><strong>proc_terminate()</strong></span> allows you terminate the process and   continue with other tasks.  You may poll the process (to see if it has   stopped yet) by using the <span class="function"><a href="function.proc-get-status.php" class="function">proc_get_status()</a></span> function.  </p>]]></desc>
	<params>
		<param type="resource" name="process"/>
		<param type="long" name="signal"/>
	</params>
</keyword>
<keyword name="proc_terminate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>proc_terminate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$process</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$signal</code><span class="initializer"> = 15</span></span>  ] )</div>  <p class="para rdfs-comment">   Signals a <code class="parameter">process</code> (created using   <span class="function"><a href="function.proc-open.php" class="function">proc_open()</a></span>) that it should terminate.   <span class="function"><strong>proc_terminate()</strong></span> returns immediately and does not wait   for the process to terminate.  </p>  <p class="para">   <span class="function"><strong>proc_terminate()</strong></span> allows you terminate the process and   continue with other tasks.  You may poll the process (to see if it has   stopped yet) by using the <span class="function"><a href="function.proc-get-status.php" class="function">proc_get_status()</a></span> function.  </p>]]></desc>
	<params>
		<param type="resource" name="process"/>
	</params>
</keyword>
<keyword name="property_exists" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>property_exists</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$class</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$property</code></span>   )</div>  <p class="para rdfs-comment">   This function checks if the given <code class="parameter">property</code> exists in   the specified class.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    As opposed with <span class="function"><a href="function.isset.php" class="function">isset()</a></span>,    <span class="function"><strong>property_exists()</strong></span> returns <strong><code>TRUE</code></strong> even if the property    has the value <strong><code>NULL</code></strong>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="mixed" name="object_or_class"/>
		<param type="string" name="property_name"/>
	</params>
</keyword>
<keyword name="pspell_add_to_personal" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_add_to_personal</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$word</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_add_to_personal()</strong></span> adds a word to the personal   wordlist. If you used <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span> to open the dictionary,   you can save the wordlist later with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>.   </p>]]></desc>
	<params>
		<param type="int" name="pspell"/>
		<param type="string" name="word"/>
	</params>
</keyword>
<keyword name="pspell_add_to_session" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_add_to_session</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$word</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_add_to_session()</strong></span> adds a word to the wordlist   associated with the current session. It is very similar to   <span class="function"><a href="function.pspell-add-to-personal.php" class="function">pspell_add_to_personal()</a></span>  </p>]]></desc>
	<params>
		<param type="int" name="pspell"/>
		<param type="string" name="word"/>
	</params>
</keyword>
<keyword name="pspell_check" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_check</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$word</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_check()</strong></span> checks the spelling of a word.  </p>]]></desc>
	<params>
		<param type="int" name="pspell"/>
		<param type="string" name="word"/>
	</params>
</keyword>
<keyword name="pspell_clear_session" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_clear_session</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_clear_session()</strong></span> clears the current session.   The current wordlist becomes blank, and, for example, if you try to save   it with <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, nothing happens.  </p>]]></desc>
	<params>
		<param type="int" name="pspell"/>
	</params>
</keyword>
<keyword name="pspell_config_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_config_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Create a config used to open a dictionary.  </p>  <p class="para">   <span class="function"><strong>pspell_config_create()</strong></span> has a very similar syntax to   <span class="function"><a href="function.pspell-new.php" class="function">pspell_new()</a></span>. In fact, using   <span class="function"><strong>pspell_config_create()</strong></span> immediately followed by   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> will produce the exact same result.   However, after creating a new config, you can also use   <span class="function"><strong>pspell_config_*()</strong></span> functions before calling   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> to take advantage of some   advanced functionality.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="pspell_config_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_config_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Create a config used to open a dictionary.  </p>  <p class="para">   <span class="function"><strong>pspell_config_create()</strong></span> has a very similar syntax to   <span class="function"><a href="function.pspell-new.php" class="function">pspell_new()</a></span>. In fact, using   <span class="function"><strong>pspell_config_create()</strong></span> immediately followed by   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> will produce the exact same result.   However, after creating a new config, you can also use   <span class="function"><strong>pspell_config_*()</strong></span> functions before calling   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> to take advantage of some   advanced functionality.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
	</params>
</keyword>
<keyword name="pspell_config_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_config_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Create a config used to open a dictionary.  </p>  <p class="para">   <span class="function"><strong>pspell_config_create()</strong></span> has a very similar syntax to   <span class="function"><a href="function.pspell-new.php" class="function">pspell_new()</a></span>. In fact, using   <span class="function"><strong>pspell_config_create()</strong></span> immediately followed by   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> will produce the exact same result.   However, after creating a new config, you can also use   <span class="function"><strong>pspell_config_*()</strong></span> functions before calling   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> to take advantage of some   advanced functionality.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
	</params>
</keyword>
<keyword name="pspell_config_create" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_config_create</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Create a config used to open a dictionary.  </p>  <p class="para">   <span class="function"><strong>pspell_config_create()</strong></span> has a very similar syntax to   <span class="function"><a href="function.pspell-new.php" class="function">pspell_new()</a></span>. In fact, using   <span class="function"><strong>pspell_config_create()</strong></span> immediately followed by   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> will produce the exact same result.   However, after creating a new config, you can also use   <span class="function"><strong>pspell_config_*()</strong></span> functions before calling   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span> to take advantage of some   advanced functionality.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
	</params>
</keyword>
<keyword name="pspell_config_data_dir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_data_dir</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$conf</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="pspell_config_dict_dir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_dict_dir</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$conf</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   )</div>  <p class="para rdfs-comment">   <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>  </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="string" name="directory"/>
	</params>
</keyword>
<keyword name="pspell_config_ignore" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_ignore</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$n</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_config_ignore()</strong></span> should be used on a config   before calling <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>. This function   allows short words to be skipped by the spell checker.   </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="int" name="ignore"/>
	</params>
</keyword>
<keyword name="pspell_config_personal" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_personal</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$file</code></span>   )</div>  <p class="para rdfs-comment">   Set a file that contains personal wordlist. The personal wordlist will be   loaded and used in addition to the standard one after you call   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>. The file is also the file where   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span> will save personal wordlist to.  </p>  <p class="para">   <span class="function"><strong>pspell_config_personal()</strong></span> should be used on a config   before calling <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.   </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="string" name="personal"/>
	</params>
</keyword>
<keyword name="pspell_config_repl" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_repl</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$file</code></span>   )</div>  <p class="para rdfs-comment">   Set a file that contains replacement pairs.  </p>  <p class="para">   The replacement pairs improve the quality of the spellchecker. When a word   is misspelled, and a proper suggestion was not found in the list,   <span class="function"><a href="function.pspell-store-replacement.php" class="function">pspell_store_replacement()</a></span> can be used to store a   replacement pair and then <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span> to   save the wordlist along with the replacement pairs.   </p>  <p class="para">   <span class="function"><strong>pspell_config_repl()</strong></span> should be used on a config   before calling <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="string" name="repl"/>
	</params>
</keyword>
<keyword name="pspell_config_runtogether" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_runtogether</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flag</code></span>   )</div>  <p class="para rdfs-comment">   This function determines whether run-together words will be treated as   legal compounds.  That is, &quot;thecat&quot; will be a legal compound, although   there should be a space between the two words. Changing this setting only   affects the results returned by <span class="function"><a href="function.pspell-check.php" class="function">pspell_check()</a></span>;   <span class="function"><a href="function.pspell-suggest.php" class="function">pspell_suggest()</a></span> will still return suggestions.  </p>  <p class="para">   <span class="function"><strong>pspell_config_runtogether()</strong></span> should be used on a config   before calling <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="bool" name="runtogether"/>
	</params>
</keyword>
<keyword name="pspell_config_save_repl" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>pspell_config_save_repl</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$dictionary_link</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flag</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_config_save_repl()</strong></span> determines whether   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span> will save the replacement pairs   along with the wordlist. Usually there is no need to use this function   because if <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span> is used, the   replacement pairs will be saved by   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span> anyway, and if it is not,   the replacement pairs will not be saved.   </p>  <p class="para">   <span class="function"><strong>pspell_config_save_repl()</strong></span> should be used on a config   before calling <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.   </p>]]></desc>
	<params>
		<param type="int" name="conf"/>
		<param type="bool" name="save"/>
	</params>
</keyword>
<keyword name="pspell_new" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_new()</strong></span> opens up a new dictionary and   returns the dictionary link identifier for use in other pspell   functions.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
		<param type="string" name="encoding"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="pspell_new" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_new()</strong></span> opens up a new dictionary and   returns the dictionary link identifier for use in other pspell   functions.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="pspell_new" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_new()</strong></span> opens up a new dictionary and   returns the dictionary link identifier for use in other pspell   functions.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
	</params>
</keyword>
<keyword name="pspell_new" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_new()</strong></span> opens up a new dictionary and   returns the dictionary link identifier for use in other pspell   functions.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
	</params>
</keyword>
<keyword name="pspell_new" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>pspell_new()</strong></span> opens up a new dictionary and   returns the dictionary link identifier for use in other pspell   functions.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="language"/>
	</params>
</keyword>
<keyword name="pspell_new_config" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_config</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$config</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_config()</strong></span> opens up a new dictionary with   settings specified in a config, created with   <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span> and modified with   <span class="function"><strong>pspell_config_*()</strong></span> functions. This method provides you   with the most flexibility and has all the functionality provided by   <span class="function"><a href="function.pspell-new.php" class="function">pspell_new()</a></span> and   <span class="function"><a href="function.pspell-new-personal.php" class="function">pspell_new_personal()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="config"/>
	</params>
</keyword>
<keyword name="pspell_new_personal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_personal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$personal</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_personal()</strong></span> opens up a new dictionary with   a personal wordlist. The wordlist can be modified and saved with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, if desired. However, the   replacement pairs are not saved. In order to save replacement pairs, you   should create a config using <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span>,   set the personal wordlist file with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span>,   set the file for replacement pairs with   <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span>, and open a new dictionary with   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="personal"/>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
		<param type="string" name="encoding"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="pspell_new_personal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_personal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$personal</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_personal()</strong></span> opens up a new dictionary with   a personal wordlist. The wordlist can be modified and saved with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, if desired. However, the   replacement pairs are not saved. In order to save replacement pairs, you   should create a config using <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span>,   set the personal wordlist file with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span>,   set the file for replacement pairs with   <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span>, and open a new dictionary with   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="personal"/>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="pspell_new_personal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_personal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$personal</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_personal()</strong></span> opens up a new dictionary with   a personal wordlist. The wordlist can be modified and saved with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, if desired. However, the   replacement pairs are not saved. In order to save replacement pairs, you   should create a config using <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span>,   set the personal wordlist file with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span>,   set the file for replacement pairs with   <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span>, and open a new dictionary with   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="personal"/>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
		<param type="string" name="jargon"/>
	</params>
</keyword>
<keyword name="pspell_new_personal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_personal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$personal</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_personal()</strong></span> opens up a new dictionary with   a personal wordlist. The wordlist can be modified and saved with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, if desired. However, the   replacement pairs are not saved. In order to save replacement pairs, you   should create a config using <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span>,   set the personal wordlist file with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span>,   set the file for replacement pairs with   <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span>, and open a new dictionary with   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="personal"/>
		<param type="string" name="language"/>
		<param type="string" name="spelling"/>
	</params>
</keyword>
<keyword name="pspell_new_personal" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>pspell_new_personal</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$personal</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$language</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$spelling</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$jargon</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0</span></span>  ]]]] )</div>  <p class="simpara">   <span class="function"><strong>pspell_new_personal()</strong></span> opens up a new dictionary with   a personal wordlist. The wordlist can be modified and saved with   <span class="function"><a href="function.pspell-save-wordlist.php" class="function">pspell_save_wordlist()</a></span>, if desired. However, the   replacement pairs are not saved. In order to save replacement pairs, you   should create a config using <span class="function"><a href="function.pspell-config-create.php" class="function">pspell_config_create()</a></span>,   set the personal wordlist file with   <span class="function"><a href="function.pspell-config-personal.php" class="function">pspell_config_personal()</a></span>,   set the file for replacement pairs with   <span class="function"><a href="function.pspell-config-repl.php" class="function">pspell_config_repl()</a></span>, and open a new dictionary with   <span class="function"><a href="function.pspell-new-config.php" class="function">pspell_new_config()</a></span>.  </p>  <p class="para">   For more information and examples, check out inline manual pspell   website:<a href="http://aspell.net/" class="link external">&raquo;&nbsp;http://aspell.net/</a>.  </p>]]></desc>
	<params>
		<param type="string" name="personal"/>
		<param type="string" name="language"/>
	</params>
</keyword>
<keyword name="quoted_printable_decode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>quoted_printable_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   This function returns an 8-bit binary string corresponding to the decoded   quoted printable string (according to <a href="http://www.faqs.org/rfcs/rfc2045" class="link external">&raquo;&nbsp;RFC2045</a>, section 6.7, not <a href="http://www.faqs.org/rfcs/rfc2821" class="link external">&raquo;&nbsp;RFC2821</a>, section 4.5.2, so additional periods   are not stripped from the beginning of line).  </p>  <p class="para">   This function is similar to <span class="function"><a href="function.imap-qprint.php" class="function">imap_qprint()</a></span>, except this   one does not require the IMAP module to work.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="quotemeta" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>quotemeta</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a version of str with a backslash character (<em>\</em>)   before every character that is among these:    <div class="example-contents screen">. \ + * ? [ ^ ] ( $ )</div>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="rand" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>   )</div>  <p class="simpara">   If called without the optional <code class="parameter">min</code>,   <code class="parameter">max</code> arguments <span class="function"><strong>rand()</strong></span>   returns a pseudo-random integer between 0 and   <span class="function"><a href="function.getrandmax.php" class="function">getrandmax()</a></span>.  If you want a random number   between 5 and 15 (inclusive), for example, use <em>rand(5,   15)</em>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    On some platforms (such as Windows), <span class="function"><a href="function.getrandmax.php" class="function">getrandmax()</a></span>    is only 32767.  If you require a range larger than 32767, specifying    <code class="parameter">min</code> and <code class="parameter">max</code> will allow    you to create a range larger than this, or consider using    <span class="function"><a href="function.mt-rand.php" class="function">mt_rand()</a></span> instead.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="min"/>
		<param type="int" name="max"/>
	</params>
</keyword>
<keyword name="rand" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>rand</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$min</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$max</code></span>   )</div>  <p class="simpara">   If called without the optional <code class="parameter">min</code>,   <code class="parameter">max</code> arguments <span class="function"><strong>rand()</strong></span>   returns a pseudo-random integer between 0 and   <span class="function"><a href="function.getrandmax.php" class="function">getrandmax()</a></span>.  If you want a random number   between 5 and 15 (inclusive), for example, use <em>rand(5,   15)</em>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    On some platforms (such as Windows), <span class="function"><a href="function.getrandmax.php" class="function">getrandmax()</a></span>    is only 32767.  If you require a range larger than 32767, specifying    <code class="parameter">min</code> and <code class="parameter">max</code> will allow    you to create a range larger than this, or consider using    <span class="function"><a href="function.mt-rand.php" class="function">mt_rand()</a></span> instead.   </span>  </p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="range" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>range</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$end</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <code class="parameter">$step</code><span class="initializer"> = 1</span></span>  ] )</div>  <p class="para rdfs-comment">   Create an array containing a range of elements.  </p>]]></desc>
	<params>
		<param type="mixed" name="low"/>
		<param type="mixed" name="high"/>
		<param type="int" name="step"/>
	</params>
</keyword>
<keyword name="range" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>range</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$start</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$end</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.number" class="type number">number</a></span> <code class="parameter">$step</code><span class="initializer"> = 1</span></span>  ] )</div>  <p class="para rdfs-comment">   Create an array containing a range of elements.  </p>]]></desc>
	<params>
		<param type="mixed" name="low"/>
		<param type="mixed" name="high"/>
	</params>
</keyword>
<keyword name="rawurldecode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>rawurldecode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string in which the sequences with percent   (<em>%</em>) signs followed by two hex digits have been replaced   with literal characters.  </p>]]></desc>
	<params>
		<param type="binary" name="str"/>
	</params>
</keyword>
<keyword name="readgzfile" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>readgzfile</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">    Reads a file, decompresses it and writes it to standard output.  </p>  <p class="para">   <span class="function"><strong>readgzfile()</strong></span> can be used to read a file which is not in   gzip format; in this case <span class="function"><strong>readgzfile()</strong></span> will directly    read from the file without decompression.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="use_include_path"/>
	</params>
</keyword>
<keyword name="readgzfile" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>readgzfile</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$use_include_path</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">    Reads a file, decompresses it and writes it to standard output.  </p>  <p class="para">   <span class="function"><strong>readgzfile()</strong></span> can be used to read a file which is not in   gzip format; in this case <span class="function"><strong>readgzfile()</strong></span> will directly    read from the file without decompression.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="readline" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>readline</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$prompt</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads a single line from the user. You must add this line to the history   yourself using <span class="function"><a href="function.readline-add-history.php" class="function">readline_add_history()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="prompt"/>
	</params>
</keyword>
<keyword name="readline" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>readline</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$prompt</code></span>  ] )</div>  <p class="para rdfs-comment">   Reads a single line from the user. You must add this line to the history   yourself using <span class="function"><a href="function.readline-add-history.php" class="function">readline_add_history()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="readline_callback_handler_install" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_callback_handler_install</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prompt</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   )</div>  <p class="para rdfs-comment">   Sets up a readline callback interface then prints   <code class="parameter">prompt</code> and immediately returns.     Calling this function twice without removing the previous   callback interface will automatically and conveniently overwrite the old   interface.  </p>  <p class="para">   The callback feature is useful when combined with   <span class="function"><a href="function.stream-select.php" class="function">stream_select()</a></span> as it allows interleaving of IO and   user input, unlike <span class="function"><a href="function.readline.php" class="function">readline()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="prompt"/>
		<param type="mixed" name="callback"/>
	</params>
</keyword>
<keyword name="readline_callback_handler_remove" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_callback_handler_remove</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Removes a previously installed callback handler and restores terminal   settings.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_callback_read_char" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>readline_callback_read_char</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Reads a character of user input. When a line is received, this function   informs the readline callback interface installed using   <span class="function"><a href="function.readline-callback-handler-install.php" class="function">readline_callback_handler_install()</a></span> that a line   is ready for input.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_clear_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_clear_history</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function clears the entire command line history.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_completion_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_completion_function</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   )</div>  <p class="para rdfs-comment">   This function registers a completion function. This is the same kind of   functionality you&#039;d get if you hit your tab key while using Bash.  </p>]]></desc>
	<params>
		<param type="string" name="funcname"/>
	</params>
</keyword>
<keyword name="readline_list_history" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>readline_list_history</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the entire command line history.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_on_new_line" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>readline_on_new_line</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Tells readline that the cursor has moved to a new line.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_read_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_read_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function reads a command history from a file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="from"/>
		<param type="int" name="to"/>
	</params>
</keyword>
<keyword name="readline_read_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_read_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function reads a command history from a file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="from"/>
	</params>
</keyword>
<keyword name="readline_read_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_read_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function reads a command history from a file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="readline_read_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_read_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function reads a command history from a file.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="readline_redisplay" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>readline_redisplay</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Redraws readline to redraw the display.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="readline_write_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_write_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function writes the command history to a file.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="readline_write_history" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>readline_write_history</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>  ] )</div>  <p class="para rdfs-comment">   This function writes the command history to a file.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="recode_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>recode_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$request</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Recode the string <code class="parameter">string</code> according to   the recode request <code class="parameter">request</code>.   </p>]]></desc>
	<params>
		<param type="string" name="request"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="RecursiveArrayIterator::getChildren" type="function" returnType="object">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveArrayIterator::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveCachingIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
		<param type="" name="flags"/>
	</params>
</keyword>
<keyword name="RecursiveCachingIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
	</params>
</keyword>
<keyword name="RecursiveCachingIterator::getChildren" type="function" returnType="RecursiveCachingIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveCachingIterator::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="path"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::current" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::getSubPath" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::getSubPathname" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::hasChildren" type="function" returnType="bool">
	<params>
		<param type="bool" name="$allow_links"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::hasChildren" type="function" returnType="bool">
	<params>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::key" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveDirectoryIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveFilterIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
	</params>
</keyword>
<keyword name="RecursiveFilterIterator::getChildren" type="function" returnType="RecursiveFilterIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveFilterIterator::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator|IteratorAggregate" name="it"/>
		<param type="int" name="mode"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator|IteratorAggregate" name="it"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator|IteratorAggregate" name="it"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::beginChildren" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::beginIteration" type="function" returnType="RecursiveIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::callGetChildren" type="function" returnType="RecursiveIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::callHasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::current" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::endChildren" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::endIteration" type="function" returnType="RecursiveIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::getDepth" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::getInnerIterator" type="function" returnType="RecursiveIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::getSubIterator" type="function" returnType="RecursiveIterator">
	<params>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::getSubIterator" type="function" returnType="RecursiveIterator">
	<params>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::key" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::nextElement" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::setMaxDepth" type="function" returnType="void">
	<params>
		<param type="string" name="$max_depth"/>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::setMaxDepth" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="RecursiveIteratorIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RecursiveRegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
		<param type="int" name="flags"/>
		<param type="int" name="preg_flags"/>
	</params>
</keyword>
<keyword name="RecursiveRegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="RecursiveRegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="RecursiveRegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="RecursiveIterator" name="it"/>
		<param type="string" name="regex"/>
	</params>
</keyword>
<keyword name="RecursiveRegexIterator::getChildren" type="function" returnType="RecursiveRegexIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
		<param type="int" name="flags"/>
		<param type="int" name="preg_flags"/>
	</params>
</keyword>
<keyword name="RegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="RegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
		<param type="string" name="regex"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="RegexIterator::__construct" type="function" returnType="void">
	<params>
		<param type="Iterator" name="it"/>
		<param type="string" name="regex"/>
	</params>
</keyword>
<keyword name="RegexIterator::accept" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RegexIterator::getFlags" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RegexIterator::getMode" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="RegexIterator::setFlags" type="function" returnType="bool">
	<params>
		<param type="int" name="new_flags"/>
	</params>
</keyword>
<keyword name="RegexIterator::setMode" type="function" returnType="bool">
	<params>
		<param type="int" name="new_mode"/>
	</params>
</keyword>
<keyword name="RegexIterator::setPregFlags" type="function" returnType="bool">
	<params>
		<param type="int" name="new_flags"/>
	</params>
</keyword>
<keyword name="register_shutdown_function" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>register_shutdown_function</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$parameter</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Registers a <code class="parameter">callback</code> to be executed after script   execution finishes or <span class="function"><a href="function.exit.php" class="function">exit()</a></span> is called.  </p>  <p class="para">   Multiple calls to <span class="function"><strong>register_shutdown_function()</strong></span> can be   made, and each will be called in the same order as they were registered.   If you call <span class="function"><a href="function.exit.php" class="function">exit()</a></span> within one registered shutdown   function, processing will stop completely and no other registered   shutdown functions will be called.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
	</params>
</keyword>
<keyword name="register_tick_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>register_tick_function</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Registers the given <code class="parameter">function</code> to be executed when a   <a href="control-structures.declare.php#control-structures.declare.ticks" class="link">tick</a> is called.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
		<param type="mixed" name="arg"/>
		<param type="mixed" name="... "/>
	</params>
</keyword>
<keyword name="register_tick_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>register_tick_function</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Registers the given <code class="parameter">function</code> to be executed when a   <a href="control-structures.declare.php#control-structures.declare.ticks" class="link">tick</a> is called.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
		<param type="mixed" name="arg"/>
	</params>
</keyword>
<keyword name="register_tick_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>register_tick_function</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$function</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$arg</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="simpara">   Registers the given <code class="parameter">function</code> to be executed when a   <a href="control-structures.declare.php#control-structures.declare.ticks" class="link">tick</a> is called.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
	</params>
</keyword>
<keyword name="rename" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rename</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$oldname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$newname</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Attempts to rename <code class="parameter">oldname</code> to   <code class="parameter">newname</code>, moving it between directories if necessary.   If <code class="parameter">newname</code> exists, it will be overwritten.  </p>]]></desc>
	<params>
		<param type="string" name="old_name"/>
		<param type="string" name="new_name"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="rename" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rename</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$oldname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$newname</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Attempts to rename <code class="parameter">oldname</code> to   <code class="parameter">newname</code>, moving it between directories if necessary.   If <code class="parameter">newname</code> exists, it will be overwritten.  </p>]]></desc>
	<params>
		<param type="string" name="old_name"/>
		<param type="string" name="new_name"/>
	</params>
</keyword>
<keyword name="renameIndex" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
		<param type="string" name="new_name"/>
	</params>
</keyword>
<keyword name="renameName" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="new_name"/>
	</params>
</keyword>
<keyword name="reset" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>reset</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>reset()</strong></span> rewinds <code class="parameter">array</code>&#039;s internal   pointer to the first element and returns the value of the first array   element.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
	</params>
</keyword>
<keyword name="restore_error_handler" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>restore_error_handler</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Used after changing the error handler function using   <span class="function"><a href="function.set-error-handler.php" class="function">set_error_handler()</a></span>, to revert to the previous error   handler (which could be the built-in or a user defined function).   </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="restore_exception_handler" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>restore_exception_handler</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Used after changing the exception handler function using   <span class="function"><a href="function.set-exception-handler.php" class="function">set_exception_handler()</a></span>, to revert to the previous   exception handler (which could be the built-in or a user defined   function).  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="restore_include_path" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>restore_include_path</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Restores the <a href="ini.core.php#ini.include-path" class="link">include_path</a>   configuration option back to its original master value as set in   <var class="filename">php.ini</var>  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="rewind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rewind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   )</div>  <p class="para rdfs-comment">   Sets the file position indicator for <code class="parameter">handle</code>   to the beginning of the file stream.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you have opened the file in append (&quot;a&quot; or &quot;a+&quot;) mode, any data you    write to the file will always be appended, regardless of the file    position.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="rewinddir" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>rewinddir</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dir_handle</code></span>  ] )</div>  <p class="para rdfs-comment">   Resets the directory stream indicated by   <code class="parameter">dir_handle</code> to the beginning of the   directory.  </p>]]></desc>
	<params>
		<param type="resource" name="dir_handle"/>
	</params>
</keyword>
<keyword name="rewinddir" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>rewinddir</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dir_handle</code></span>  ] )</div>  <p class="para rdfs-comment">   Resets the directory stream indicated by   <code class="parameter">dir_handle</code> to the beginning of the   directory.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="rmdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rmdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dirname</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Attempts to remove the directory named by <code class="parameter">dirname</code>.   The directory must be empty, and the relevant permissions must permit this.   A <strong><code>E_WARNING</code></strong> level error will be generated on failure.  </p>]]></desc>
	<params>
		<param type="string" name="dirname"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="rmdir" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rmdir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dirname</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Attempts to remove the directory named by <code class="parameter">dirname</code>.   The directory must be empty, and the relevant permissions must permit this.   A <strong><code>E_WARNING</code></strong> level error will be generated on failure.  </p>]]></desc>
	<params>
		<param type="string" name="dirname"/>
	</params>
</keyword>
<keyword name="round" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>round</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$val</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$precision</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = PHP_ROUND_HALF_UP</span></span>   ]] )</div>  <p class="para rdfs-comment">   Returns the rounded value of <code class="parameter">val</code> to   specified <code class="parameter">precision</code>   (number of digits after the decimal point).   <code class="parameter">precision</code> can also be negative or zero (default).  </p>    <p class="para">   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     PHP doesn&#039;t handle strings like <em>&quot;12,300.2&quot;</em> correctly     by default. See <a href="language.types.string.php#language.types.string.conversion" class="link">converting from strings</a>.    </span>   </p></blockquote>  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
		<param type="int" name="precision"/>
	</params>
</keyword>
<keyword name="round" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>round</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$val</code></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$precision</code><span class="initializer"> = 0</span></span>    [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = PHP_ROUND_HALF_UP</span></span>   ]] )</div>  <p class="para rdfs-comment">   Returns the rounded value of <code class="parameter">val</code> to   specified <code class="parameter">precision</code>   (number of digits after the decimal point).   <code class="parameter">precision</code> can also be negative or zero (default).  </p>    <p class="para">   <blockquote class="note"><p><strong class="note">Note</strong>:     <span class="simpara">     PHP doesn&#039;t handle strings like <em>&quot;12,300.2&quot;</em> correctly     by default. See <a href="language.types.string.php#language.types.string.conversion" class="link">converting from strings</a>.    </span>   </p></blockquote>  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="rsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array in reverse order (highest to lowest).  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="rsort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>rsort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array in reverse order (highest to lowest).  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="scandir" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>scandir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sorting_order</code><span class="initializer"> = SCANDIR_SORT_ASCENDING</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of files and directories from the   <code class="parameter">directory</code>.  </p>]]></desc>
	<params>
		<param type="string" name="dir"/>
		<param type="int" name="sorting_order"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="scandir" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>scandir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sorting_order</code><span class="initializer"> = SCANDIR_SORT_ASCENDING</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of files and directories from the   <code class="parameter">directory</code>.  </p>]]></desc>
	<params>
		<param type="string" name="dir"/>
		<param type="int" name="sorting_order"/>
	</params>
</keyword>
<keyword name="scandir" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>scandir</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$directory</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sorting_order</code><span class="initializer"> = SCANDIR_SORT_ASCENDING</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> of files and directories from the   <code class="parameter">directory</code>.  </p>]]></desc>
	<params>
		<param type="string" name="dir"/>
	</params>
</keyword>
<keyword name="sem_acquire" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sem_acquire</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$sem_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_acquire()</strong></span> blocks (if necessary) until the semaphore   can be acquired.  A process attempting to acquire a semaphore which it has   already acquired will block forever if acquiring the semaphore would cause   its maximum number of semaphore to be exceeded.  </p>  <p class="para">   After processing a request, any semaphores acquired by the process but not   explicitly released will be released automatically and a warning will be   generated.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
	</params>
</keyword>
<keyword name="sem_get" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sem_get</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_acquire</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$auto_release</code><span class="initializer"> = 1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_get()</strong></span> returns an id that can be used to   access the System V semaphore with the given <code class="parameter">key</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>sem_get()</strong></span> for the same key   will return a different semaphore identifier, but both   identifiers access the same underlying semaphore.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="max_acquire"/>
		<param type="int" name="perm"/>
		<param type="int" name="auto_release"/>
	</params>
</keyword>
<keyword name="sem_get" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sem_get</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_acquire</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$auto_release</code><span class="initializer"> = 1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_get()</strong></span> returns an id that can be used to   access the System V semaphore with the given <code class="parameter">key</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>sem_get()</strong></span> for the same key   will return a different semaphore identifier, but both   identifiers access the same underlying semaphore.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="max_acquire"/>
		<param type="int" name="perm"/>
	</params>
</keyword>
<keyword name="sem_get" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sem_get</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_acquire</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$auto_release</code><span class="initializer"> = 1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_get()</strong></span> returns an id that can be used to   access the System V semaphore with the given <code class="parameter">key</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>sem_get()</strong></span> for the same key   will return a different semaphore identifier, but both   identifiers access the same underlying semaphore.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="max_acquire"/>
	</params>
</keyword>
<keyword name="sem_get" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sem_get</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$max_acquire</code><span class="initializer"> = 1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$auto_release</code><span class="initializer"> = 1</span></span>  ]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_get()</strong></span> returns an id that can be used to   access the System V semaphore with the given <code class="parameter">key</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>sem_get()</strong></span> for the same key   will return a different semaphore identifier, but both   identifiers access the same underlying semaphore.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
	</params>
</keyword>
<keyword name="sem_release" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sem_release</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$sem_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_release()</strong></span> releases the semaphore if it   is currently acquired by the calling process, otherwise   a warning is generated.  </p>  <p class="para">   After releasing the semaphore, <span class="function"><a href="function.sem-acquire.php" class="function">sem_acquire()</a></span>   may be called to re-acquire it.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
	</params>
</keyword>
<keyword name="sem_remove" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sem_remove</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$sem_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sem_remove()</strong></span> removes the given semaphore.  </p>  <p class="para">   After removing the semaphore, it is no longer accessible.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
	</params>
</keyword>
<keyword name="serialize" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">string</span> <span class="methodname"><strong>serialize</strong></span>     ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>    )</div>  <p class="para rdfs-comment">   Generates a storable representation of a value.  </p>  <p class="para">   This is useful for storing or passing PHP values around without   losing their type and structure.  </p>  <p class="para">   To make the serialized string into a PHP value again, use   <span class="function"><a href="function.unserialize.php" class="function">unserialize()</a></span>.    </p>]]></desc>
	<params>
		<param type="mixed" name="variable"/>
	</params>
</keyword>
<keyword name="session_cache_expire" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>session_cache_expire</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_cache_expire</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_cache_expire()</strong></span> returns the current setting of   <em>session.cache_expire</em>.   </p>  <p class="para">   The cache expire is reset to the default value of 180 stored in   <a href="session.configuration.php#ini.session.cache-expire" class="link">session.cache_expire</a>   at request startup time. Thus,   you need to call <span class="function"><strong>session_cache_expire()</strong></span> for every   request (and before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called).  </p>]]></desc>
	<params>
		<param type="int" name="new_cache_expire"/>
	</params>
</keyword>
<keyword name="session_cache_expire" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>session_cache_expire</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_cache_expire</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_cache_expire()</strong></span> returns the current setting of   <em>session.cache_expire</em>.   </p>  <p class="para">   The cache expire is reset to the default value of 180 stored in   <a href="session.configuration.php#ini.session.cache-expire" class="link">session.cache_expire</a>   at request startup time. Thus,   you need to call <span class="function"><strong>session_cache_expire()</strong></span> for every   request (and before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called).  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_cache_limiter" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_cache_limiter</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$cache_limiter</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_cache_limiter()</strong></span> returns the name of the   current cache limiter.  </p>  <p class="para">   The cache limiter defines which cache control HTTP headers are sent to   the client.  These headers determine the rules by which the page content   may be cached by the client and intermediate proxies.  Setting the cache   limiter to <em>nocache</em> disallows any client/proxy caching.   A value of <em>public</em> permits caching by proxies and the   client, whereas <em>private</em> disallows caching by proxies   and permits the client to cache the contents.  </p>  <p class="para">   In <em>private</em> mode, the Expire header sent to the client   may cause confusion for some browsers, including <span class="productname">Mozilla</span>.   You can avoid this problem by using <em>private_no_expire</em> mode. The   <em>Expire</em> header is never sent to the client in this mode.  </p>  <p class="para">   Setting the cache limiter to <em>&#039;&#039;</em> will turn off automatic sending   of cache headers entirely.  </p>  <p class="para">   The cache limiter is reset to the default value stored in   <a href="session.configuration.php#ini.session.cache-limiter" class="link">session.cache_limiter</a>   at request startup time. Thus, you need to call   <span class="function"><strong>session_cache_limiter()</strong></span> for every   request (and before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called).  </p>]]></desc>
	<params>
		<param type="string" name="new_cache_limiter"/>
	</params>
</keyword>
<keyword name="session_cache_limiter" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_cache_limiter</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$cache_limiter</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_cache_limiter()</strong></span> returns the name of the   current cache limiter.  </p>  <p class="para">   The cache limiter defines which cache control HTTP headers are sent to   the client.  These headers determine the rules by which the page content   may be cached by the client and intermediate proxies.  Setting the cache   limiter to <em>nocache</em> disallows any client/proxy caching.   A value of <em>public</em> permits caching by proxies and the   client, whereas <em>private</em> disallows caching by proxies   and permits the client to cache the contents.  </p>  <p class="para">   In <em>private</em> mode, the Expire header sent to the client   may cause confusion for some browsers, including <span class="productname">Mozilla</span>.   You can avoid this problem by using <em>private_no_expire</em> mode. The   <em>Expire</em> header is never sent to the client in this mode.  </p>  <p class="para">   Setting the cache limiter to <em>&#039;&#039;</em> will turn off automatic sending   of cache headers entirely.  </p>  <p class="para">   The cache limiter is reset to the default value stored in   <a href="session.configuration.php#ini.session.cache-limiter" class="link">session.cache_limiter</a>   at request startup time. Thus, you need to call   <span class="function"><strong>session_cache_limiter()</strong></span> for every   request (and before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called).  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_decode" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_decode()</strong></span> decodes the serialized session data provided in   <code class="parameter">$data</code>, and populates the $_SESSION superglobal   with the result.  </p>  <p class="para">   Please note the unserialization method is not the same as <span class="function"><a href="function.unserialize.php" class="function">unserialize()</a></span>.   The serialization method is internal to PHP and can be set using    <a href="session.configuration.php#ini.session.serialize-handler" class="link">session.serialize_handler</a>.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="session_destroy" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_destroy</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   <span class="function"><strong>session_destroy()</strong></span> destroys all of the data associated   with the current session. It does not unset any of the global variables   associated with the session, or unset the session cookie.   To use the session variables again, <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> has   to be called.  </p>  <p class="para">   In order to kill the session altogether, like to log the user out, the   session id must also be unset. If a cookie is used to propagate the   session id (default behavior), then the session cookie must be deleted.   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> may be used for that.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="session_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_encode</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_encode()</strong></span> returns a serialized string of the   contents of the current session data stored in the $_SESSION superglobal.  </p>  <p class="para">   Please note, the serialization method is not the same as <span class="function"><a href="function.serialize.php" class="function">serialize()</a></span>.   The serialization method is internal to PHP and can be set using <a href="session.configuration.php#ini.session.serialize-handler" class="link">session.serialize_handler</a>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="session_get_cookie_params" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>session_get_cookie_params</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Gets the session cookie parameters.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="session_id" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_id</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$id</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_id()</strong></span> is used to get or set the session id for   the current session.  </p>  <p class="para">   The constant <strong><code>SID</code></strong> can also be used to   retrieve the current name and session id as a string suitable for   adding to URLs. See also <a href="ref.session.php" class="link">Session   handling</a>.  </p>]]></desc>
	<params>
		<param type="string" name="newid"/>
	</params>
</keyword>
<keyword name="session_id" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_id</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$id</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_id()</strong></span> is used to get or set the session id for   the current session.  </p>  <p class="para">   The constant <strong><code>SID</code></strong> can also be used to   retrieve the current name and session id as a string suitable for   adding to URLs. See also <a href="ref.session.php" class="link">Session   handling</a>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_module_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_module_name</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$module</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_module_name()</strong></span> gets the name of the current   session module.   </p>]]></desc>
	<params>
		<param type="string" name="newname"/>
	</params>
</keyword>
<keyword name="session_module_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_module_name</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$module</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_module_name()</strong></span> gets the name of the current   session module.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_name</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_name()</strong></span> returns the name of the current   session. If <code class="parameter">name</code> is given,   <span class="function"><strong>session_name()</strong></span> will update the session name and return   the <em>old</em> session name.  </p>  <p class="para">   The session name is reset to the default value stored in   <em>session.name</em> at request startup time. Thus, you need to   call <span class="function"><strong>session_name()</strong></span> for every request (and before   <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> or <span class="function"><a href="function.session-register.php" class="function">session_register()</a></span>   are called).  </p>]]></desc>
	<params>
		<param type="string" name="newname"/>
	</params>
</keyword>
<keyword name="session_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_name</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_name()</strong></span> returns the name of the current   session. If <code class="parameter">name</code> is given,   <span class="function"><strong>session_name()</strong></span> will update the session name and return   the <em>old</em> session name.  </p>  <p class="para">   The session name is reset to the default value stored in   <em>session.name</em> at request startup time. Thus, you need to   call <span class="function"><strong>session_name()</strong></span> for every request (and before   <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> or <span class="function"><a href="function.session-register.php" class="function">session_register()</a></span>   are called).  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_regenerate_id" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_regenerate_id</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$delete_old_session</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_regenerate_id()</strong></span> will replace the current   session id with a new one, and keep the current session information.  </p>  <p class="para">   When <a href="session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>   is enabled, output must be started after <span class="function"><strong>session_regenerate_id()</strong></span>   call. Otherwise, old session ID is used.  </p>]]></desc>
	<params>
		<param type="bool" name="delete_old_session"/>
	</params>
</keyword>
<keyword name="session_regenerate_id" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_regenerate_id</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$delete_old_session</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_regenerate_id()</strong></span> will replace the current   session id with a new one, and keep the current session information.  </p>  <p class="para">   When <a href="session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>   is enabled, output must be started after <span class="function"><strong>session_regenerate_id()</strong></span>   call. Otherwise, old session ID is used.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_save_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_save_path</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_save_path()</strong></span> returns the path of the current   directory used to save session data.   </p>]]></desc>
	<params>
		<param type="string" name="newname"/>
	</params>
</keyword>
<keyword name="session_save_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>session_save_path</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_save_path()</strong></span> returns the path of the current   directory used to save session data.   </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="session_set_cookie_params" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_set_cookie_params</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$lifetime</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Set cookie parameters defined in the <var class="filename">php.ini</var> file. The effect of this   function only lasts for the duration of the script. Thus, you need to   call <span class="function"><strong>session_set_cookie_params()</strong></span> for every request and   before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called.  </p>  <p class="para">   This function updates the runtime ini values of the corresponding PHP ini configuration   keys which can be retrieved with the <span class="function"><a href="function.ini-get.php" class="function">ini_get()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="lifetime"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
		<param type="bool" name="httponly"/>
	</params>
</keyword>
<keyword name="session_set_cookie_params" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_set_cookie_params</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$lifetime</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Set cookie parameters defined in the <var class="filename">php.ini</var> file. The effect of this   function only lasts for the duration of the script. Thus, you need to   call <span class="function"><strong>session_set_cookie_params()</strong></span> for every request and   before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called.  </p>  <p class="para">   This function updates the runtime ini values of the corresponding PHP ini configuration   keys which can be retrieved with the <span class="function"><a href="function.ini-get.php" class="function">ini_get()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="lifetime"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
	</params>
</keyword>
<keyword name="session_set_cookie_params" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_set_cookie_params</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$lifetime</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Set cookie parameters defined in the <var class="filename">php.ini</var> file. The effect of this   function only lasts for the duration of the script. Thus, you need to   call <span class="function"><strong>session_set_cookie_params()</strong></span> for every request and   before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called.  </p>  <p class="para">   This function updates the runtime ini values of the corresponding PHP ini configuration   keys which can be retrieved with the <span class="function"><a href="function.ini-get.php" class="function">ini_get()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="lifetime"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
	</params>
</keyword>
<keyword name="session_set_cookie_params" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_set_cookie_params</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$lifetime</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Set cookie parameters defined in the <var class="filename">php.ini</var> file. The effect of this   function only lasts for the duration of the script. Thus, you need to   call <span class="function"><strong>session_set_cookie_params()</strong></span> for every request and   before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called.  </p>  <p class="para">   This function updates the runtime ini values of the corresponding PHP ini configuration   keys which can be retrieved with the <span class="function"><a href="function.ini-get.php" class="function">ini_get()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="lifetime"/>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="session_set_cookie_params" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_set_cookie_params</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$lifetime</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]] )</div>  <p class="para rdfs-comment">   Set cookie parameters defined in the <var class="filename">php.ini</var> file. The effect of this   function only lasts for the duration of the script. Thus, you need to   call <span class="function"><strong>session_set_cookie_params()</strong></span> for every request and   before <span class="function"><a href="function.session-start.php" class="function">session_start()</a></span> is called.  </p>  <p class="para">   This function updates the runtime ini values of the corresponding PHP ini configuration   keys which can be retrieved with the <span class="function"><a href="function.ini-get.php" class="function">ini_get()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="lifetime"/>
	</params>
</keyword>
<keyword name="session_set_save_handler" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_set_save_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$open</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$close</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$read</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$write</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$destroy</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$gc</code></span>   )</div>  <p class="para rdfs-comment">   Since PHP 5.4 it is possible to register the following prototype:  </p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_set_save_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.sessionhandlerinterface.php" class="type SessionHandlerInterface">SessionHandlerInterface</a></span> <code class="parameter">$sessionhandler</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$register_shutdown</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_set_save_handler()</strong></span> sets the user-level   session storage functions which are used for storing and   retrieving data associated with a session.  This is most useful   when a storage method other than those supplied by PHP sessions   is preferred.  i.e. Storing the session data in a local database.  </p>]]></desc>
	<params>
		<param type="string" name="open"/>
		<param type="string" name="close"/>
		<param type="string" name="read"/>
		<param type="string" name="write"/>
		<param type="string" name="destroy"/>
		<param type="string" name="gc"/>
	</params>
</keyword>
<keyword name="session_start" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>session_start</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>session_start()</strong></span> creates a session or resumes the   current one based on a session identifier passed via a GET or POST   request, or passed via a cookie.  </p>  <p class="para">   When <span class="function"><strong>session_start()</strong></span> is called or when a session auto starts,   PHP will call the open and read session save handlers.  These will either be a built-in   save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be   custom handler as defined by <span class="function"><a href="function.session-set-save-handler.php" class="function">session_set_save_handler()</a></span>.   The read callback will retrieve any existing session data (stored in a special serialized format)   and will be unserialized and used to automatically populate the $_SESSION superglobal when the   read callback returns the saved session data back to PHP session handling.  </p>  <p class="para">   To use a named session, call   <span class="function"><a href="function.session-name.php" class="function">session_name()</a></span> before calling   <span class="function"><strong>session_start()</strong></span>.  </p>  <p class="para">   When <a href="session.configuration.php#ini.session.use-trans-sid" class="link">session.use_trans_sid</a>   is enabled, the <span class="function"><strong>session_start()</strong></span> function will   register an internal output handler for URL rewriting.  </p>  <p class="para">   If a user uses <em>ob_gzhandler</em> or similar with   <span class="function"><a href="function.ob-start.php" class="function">ob_start()</a></span>, the function order is important for   proper output.  For example,   <em>ob_gzhandler</em> must be registered before starting the session.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="session_unset" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_unset</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>session_unset()</strong></span> function frees all session variables   currently registered.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="session_write_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>session_write_close</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   End the current session and store session data.  </p>  <p class="para">   Session data is usually stored after your script terminated without the   need to call <span class="function"><strong>session_write_close()</strong></span>, but as session data   is locked to prevent concurrent writes only one script may operate on a   session at any time. When using framesets together with sessions you will   experience the frames loading one by one due to this locking. You can   reduce the time needed to load all the frames by ending the session as   soon as all changes to session variables are done.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="set_error_handler" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>set_error_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$error_handler</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_types</code><span class="initializer"> = E_ALL | E_STRICT</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets a user function (<code class="parameter">error_handler</code>) to handle   errors in a script.  </p>  <p class="para">   This function can be used for defining your own way of handling errors   during runtime, for example in applications in which you need to do   cleanup of data/files when a critical error happens, or when you need   to trigger an error under certain conditions (using   <span class="function"><a href="function.trigger-error.php" class="function">trigger_error()</a></span>).  </p>  <p class="para">   It is important to remember that the standard PHP error handler is completely   bypassed for the error types specified by <code class="parameter">error_types</code>    unless the callback function returns <strong><code>FALSE</code></strong>.   <span class="function"><a href="function.error-reporting.php" class="function">error_reporting()</a></span> settings will have no effect and your   error handler will be called regardless - however you are still able to read    the current value of    <a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> and act   appropriately. Of particular note is that this value will be 0 if the   statement that caused the error was prepended by the   <a href="language.operators.errorcontrol.php" class="link">@ error-control   operator</a>.  </p>  <p class="para">   Also note that it is your responsibility to <span class="function"><a href="function.die.php" class="function">die()</a></span> if   necessary. If the error-handler function returns, script execution   will continue with the next statement after the one that caused an error.  </p>  <p class="para">   The following error types cannot be handled with a user defined   function: <strong><code>E_ERROR</code></strong>, <strong><code>E_PARSE</code></strong>,   <strong><code>E_CORE_ERROR</code></strong>, <strong><code>E_CORE_WARNING</code></strong>,   <strong><code>E_COMPILE_ERROR</code></strong>,   <strong><code>E_COMPILE_WARNING</code></strong>, and   most of <strong><code>E_STRICT</code></strong> raised in the file where   <span class="function"><strong>set_error_handler()</strong></span> is called.  </p>  <p class="para">   If errors occur before the script is executed (e.g. on file uploads) the    custom error handler cannot be called since it is not registered at that    time.  </p>]]></desc>
	<params>
		<param type="string" name="error_handler"/>
		<param type="int" name="error_types"/>
	</params>
</keyword>
<keyword name="set_error_handler" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>set_error_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$error_handler</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_types</code><span class="initializer"> = E_ALL | E_STRICT</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets a user function (<code class="parameter">error_handler</code>) to handle   errors in a script.  </p>  <p class="para">   This function can be used for defining your own way of handling errors   during runtime, for example in applications in which you need to do   cleanup of data/files when a critical error happens, or when you need   to trigger an error under certain conditions (using   <span class="function"><a href="function.trigger-error.php" class="function">trigger_error()</a></span>).  </p>  <p class="para">   It is important to remember that the standard PHP error handler is completely   bypassed for the error types specified by <code class="parameter">error_types</code>    unless the callback function returns <strong><code>FALSE</code></strong>.   <span class="function"><a href="function.error-reporting.php" class="function">error_reporting()</a></span> settings will have no effect and your   error handler will be called regardless - however you are still able to read    the current value of    <a href="errorfunc.configuration.php#ini.error-reporting" class="link">error_reporting</a> and act   appropriately. Of particular note is that this value will be 0 if the   statement that caused the error was prepended by the   <a href="language.operators.errorcontrol.php" class="link">@ error-control   operator</a>.  </p>  <p class="para">   Also note that it is your responsibility to <span class="function"><a href="function.die.php" class="function">die()</a></span> if   necessary. If the error-handler function returns, script execution   will continue with the next statement after the one that caused an error.  </p>  <p class="para">   The following error types cannot be handled with a user defined   function: <strong><code>E_ERROR</code></strong>, <strong><code>E_PARSE</code></strong>,   <strong><code>E_CORE_ERROR</code></strong>, <strong><code>E_CORE_WARNING</code></strong>,   <strong><code>E_COMPILE_ERROR</code></strong>,   <strong><code>E_COMPILE_WARNING</code></strong>, and   most of <strong><code>E_STRICT</code></strong> raised in the file where   <span class="function"><strong>set_error_handler()</strong></span> is called.  </p>  <p class="para">   If errors occur before the script is executed (e.g. on file uploads) the    custom error handler cannot be called since it is not registered at that    time.  </p>]]></desc>
	<params>
		<param type="string" name="error_handler"/>
	</params>
</keyword>
<keyword name="set_exception_handler" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <span class="methodname"><strong>set_exception_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$exception_handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the default exception handler if an exception is not caught within a   try/catch block. Execution will stop after the   <code class="parameter">exception_handler</code> is called.  </p>]]></desc>
	<params>
		<param type="callable" name="exception_handler"/>
	</params>
</keyword>
<keyword name="set_include_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>set_include_path</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$new_include_path</code></span>   )</div>  <p class="para rdfs-comment">   Sets the <a href="ini.core.php#ini.include-path" class="link">include_path</a>   configuration option for the duration of the script.    </p>]]></desc>
	<params>
		<param type="string" name="new_include_path"/>
	</params>
</keyword>
<keyword name="set_time_limit" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>set_time_limit</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$seconds</code></span>   )</div>  <p class="para rdfs-comment">   Set the number of seconds a script is allowed to run. If this is reached,   the script returns a fatal error. The default limit is 30 seconds or, if   it exists, the <em>max_execution_time</em> value defined in the   <var class="filename">php.ini</var>.  </p>  <p class="para">   When called, <span class="function"><strong>set_time_limit()</strong></span> restarts the timeout   counter from zero. In other words, if the timeout is the default 30   seconds, and 25 seconds into script execution a call such as   <em>set_time_limit(20)</em> is made, the script will run for a   total of 45 seconds before timing out.  </p>]]></desc>
	<params>
		<param type="int" name="seconds"/>
	</params>
</keyword>
<keyword name="setArchiveComment" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="comment"/>
	</params>
</keyword>
<keyword name="setCommentIndex" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
		<param type="string" name="comment"/>
	</params>
</keyword>
<keyword name="setCommentName" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="comment"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
		<param type="bool" name="httponly"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="setcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setcookie()</strong></span> defines a cookie to be sent along with the   rest of the HTTP headers. Like other headers, cookies must be sent   <em class="emphasis">before</em> any output from your script (this is a   protocol restriction). This requires that you place calls to this function   prior to any output, including <em>&lt;html&gt;</em> and   <em>&lt;head&gt;</em> tags as well as any whitespace.  </p>  <p class="para">   Once the cookies have been set, they can be accessed on the next page load   with the <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> or   <var class="varname"><var class="varname">$HTTP_COOKIE_VARS</var></var> arrays.  Note,   <a href="language.variables.superglobals.php" class="link">superglobals</a>   such as <var class="varname"><var class="varname"><a href="reserved.variables.cookies.php" class="classname">$_COOKIE</a></var></var> became available in PHP 4.1.0.   Cookie   values also exist in <var class="varname"><var class="varname"><a href="reserved.variables.request.php" class="classname">$_REQUEST</a></var></var>.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="setlocale" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$locale</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$locale</code></span>   )</div>  <p class="para rdfs-comment">   Sets locale information.  </p>]]></desc>
	<params>
		<param type="mixed" name="category"/>
		<param type="string" name="locale"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="setlocale" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$locale</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$...</code></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>setlocale</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$category</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$locale</code></span>   )</div>  <p class="para rdfs-comment">   Sets locale information.  </p>]]></desc>
	<params>
		<param type="mixed" name="category"/>
		<param type="string" name="locale"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
		<param type="bool" name="httponly"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
		<param type="bool" name="secure"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
		<param type="string" name="domain"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
		<param type="int" name="expires"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="setrawcookie" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>setrawcookie</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$expire</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$path</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$domain</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$secure</code><span class="initializer"> = false</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$httponly</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>setrawcookie()</strong></span> is exactly the same as   <span class="function"><a href="function.setcookie.php" class="function">setcookie()</a></span> except that the cookie value will not be   automatically urlencoded when sent to the browser.  </p>]]></desc>
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="settype" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>settype</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$var</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code></span>   )</div>  <p class="para rdfs-comment">   Set the type of variable <code class="parameter">var</code> to   <code class="parameter">type</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="shell_exec" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>shell_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$cmd</code></span>   )</div>  <p class="para rdfs-comment">   This function is identical to the <a href="language.operators.execution.php" class="link">backtick operator</a>.  </p>]]></desc>
	<params>
		<param type="string" name="cmd"/>
	</params>
</keyword>
<keyword name="shm_attach" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>shm_attach</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$memsize</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_attach()</strong></span> returns an id that can be used to access   the System V shared memory with the given <code class="parameter">key</code>, the   first call creates the shared memory segment with    <code class="parameter">memsize</code> and the optional perm-bits    <code class="parameter">perm</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>shm_attach()</strong></span> for the same   <code class="parameter">key</code> will return a different shared memory   identifier, but both identifiers access the same underlying   shared memory. <code class="parameter">memsize</code> and   <code class="parameter">perm</code> will be ignored.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="memsize"/>
		<param type="int" name="perm"/>
	</params>
</keyword>
<keyword name="shm_attach" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>shm_attach</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$memsize</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_attach()</strong></span> returns an id that can be used to access   the System V shared memory with the given <code class="parameter">key</code>, the   first call creates the shared memory segment with    <code class="parameter">memsize</code> and the optional perm-bits    <code class="parameter">perm</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>shm_attach()</strong></span> for the same   <code class="parameter">key</code> will return a different shared memory   identifier, but both identifiers access the same underlying   shared memory. <code class="parameter">memsize</code> and   <code class="parameter">perm</code> will be ignored.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
		<param type="int" name="memsize"/>
	</params>
</keyword>
<keyword name="shm_attach" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>shm_attach</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$key</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$memsize</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$perm</code><span class="initializer"> = 0666</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_attach()</strong></span> returns an id that can be used to access   the System V shared memory with the given <code class="parameter">key</code>, the   first call creates the shared memory segment with    <code class="parameter">memsize</code> and the optional perm-bits    <code class="parameter">perm</code>.  </p>  <p class="para">   A second call to <span class="function"><strong>shm_attach()</strong></span> for the same   <code class="parameter">key</code> will return a different shared memory   identifier, but both identifiers access the same underlying   shared memory. <code class="parameter">memsize</code> and   <code class="parameter">perm</code> will be ignored.  </p>]]></desc>
	<params>
		<param type="int" name="key"/>
	</params>
</keyword>
<keyword name="shm_detach" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shm_detach</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_detach()</strong></span> disconnects from the shared memory given   by the <code class="parameter">shm_identifier</code> created by   <span class="function"><a href="function.shm-attach.php" class="function">shm_attach()</a></span>. Remember, that shared memory still exist   in the Unix system and the data is still present.  </p>]]></desc>
	<params>
		<param type="resource" name="shm_identifier"/>
	</params>
</keyword>
<keyword name="shm_get_var" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>shm_get_var</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$variable_key</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_get_var()</strong></span> returns the variable with a given   <code class="parameter">variable_key</code>, in the given shared memory segment.   The variable is still present in the shared memory.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
		<param type="int" name="variable_key"/>
	</params>
</keyword>
<keyword name="shm_has_var" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shm_has_var</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$variable_key</code></span>   )</div>  <p class="para rdfs-comment">   Checks whether a specific key exists inside a shared memory segment.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
		<param type="int" name="variable_key"/>
	</params>
</keyword>
<keyword name="shm_put_var" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shm_put_var</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$variable_key</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variable</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_put_var()</strong></span> inserts or updates the   <code class="parameter">variable</code> with the given   <code class="parameter">variable_key</code>.  </p>  <p class="para">   Warnings (<strong><code>E_WARNING</code></strong> level) will be issued if   <code class="parameter">shm_identifier</code> is not a valid SysV shared memory   index or if there was not enough shared memory remaining to complete your   request.  </p>]]></desc>
	<params>
		<param type="resource" name="shm_identifier"/>
		<param type="int" name="variable_key"/>
		<param type="mixed" name="variable"/>
	</params>
</keyword>
<keyword name="shm_remove" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shm_remove</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>shm_remove()</strong></span> removes the shared memory   <code class="parameter">shm_identifier</code>. All data will be destroyed.  </p>]]></desc>
	<params>
		<param type="resource" name="shm_identifier"/>
	</params>
</keyword>
<keyword name="shm_remove_var" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shm_remove_var</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$shm_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$variable_key</code></span>   )</div>  <p class="para rdfs-comment">   Removes a variable with a given <code class="parameter">variable_key</code>   and frees the occupied memory.  </p>]]></desc>
	<params>
		<param type="resource" name="id"/>
		<param type="int" name="variable_key"/>
	</params>
</keyword>
<keyword name="shuffle" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>shuffle</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   )</div>  <p class="para rdfs-comment">   This function shuffles (randomizes the order of the elements in) an array.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
	</params>
</keyword>
<keyword name="similar_text" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>similar_text</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$first</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$second</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter reference">&$percent</code></span>  ] )</div>  <p class="para rdfs-comment">   This calculates the similarity between two strings as described in   Programming Classics: Implementing the World&#039;s Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a   stack as in Oliver&#039;s pseudo code, but recursive calls which may or may not   speed up the whole process. Note also that the complexity of this algorithm   is O(N**3) where N is the length of the longest string.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
		<param type="float" name="percent"/>
	</params>
</keyword>
<keyword name="similar_text" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>similar_text</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$first</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$second</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter reference">&$percent</code></span>  ] )</div>  <p class="para rdfs-comment">   This calculates the similarity between two strings as described in   Programming Classics: Implementing the World&#039;s Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a   stack as in Oliver&#039;s pseudo code, but recursive calls which may or may not   speed up the whole process. Note also that the complexity of this algorithm   is O(N**3) where N is the length of the longest string.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::addAttribute" type="function" returnType="void">
	<params>
		<param type="string" name="qName"/>
		<param type="string" name="value"/>
		<param type="string" name="ns"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::addAttribute" type="function" returnType="void">
	<params>
		<param type="string" name="qName"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::addChild" type="function" returnType="void">
	<params>
		<param type="string" name="qName"/>
		<param type="string" name="value"/>
		<param type="string" name="ns"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::addChild" type="function" returnType="void">
	<params>
		<param type="string" name="qName"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::addChild" type="function" returnType="void">
	<params>
		<param type="string" name="qName"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::asXML" type="function" returnType="string">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::asXML" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SimpleXMLElement::attributes" type="function" returnType="array">
	<params>
		<param type="string" name="ns"/>
		<param type="bool" name="is_prefix"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::attributes" type="function" returnType="array">
	<params>
		<param type="string" name="ns"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::attributes" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="SimpleXMLElement::children" type="function" returnType="object">
	<params>
		<param type="string" name="ns"/>
		<param type="bool" name="is_prefix"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::children" type="function" returnType="object">
	<params>
		<param type="string" name="ns"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::children" type="function" returnType="object">
	<params>
	</params>
</keyword>
<keyword name="SimpleXMLElement::getDocNamespaces" type="function" returnType="string">
	<params>
		<param type="bool" name="recursive"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::getDocNamespaces" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SimpleXMLElement::getName" type="function" returnType="object">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::getNamespaces" type="function" returnType="string">
	<params>
		<param type="bool" name="recursve"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::getNamespaces" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SimpleXMLElement::registerXPathNamespace" type="function" returnType="bool">
	<params>
		<param type="string" name="prefix"/>
		<param type="string" name="ns"/>
	</params>
</keyword>
<keyword name="SimpleXMLElement::xpath" type="function" returnType="array">
	<params>
		<param type="string" name="path"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::count" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::current" type="function" returnType="SimpleXMLIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::getChildren" type="function" returnType="SimpleXMLIterator">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::key" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SimpleXMLIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="smfi_addheader" type="function" returnType="bool">
	<params>
		<param type="string" name="headerf"/>
		<param type="string" name="headerv"/>
	</params>
</keyword>
<keyword name="smfi_addrcpt" type="function" returnType="bool">
	<params>
		<param type="string" name="rcpt"/>
	</params>
</keyword>
<keyword name="smfi_chgheader" type="function" returnType="bool">
	<params>
		<param type="string" name="headerf"/>
		<param type="string" name="headerv"/>
	</params>
</keyword>
<keyword name="smfi_delrcpt" type="function" returnType="bool">
	<params>
		<param type="string" name="rcpt"/>
	</params>
</keyword>
<keyword name="smfi_getsymval" type="function" returnType="string">
	<params>
		<param type="string" name="macro"/>
	</params>
</keyword>
<keyword name="smfi_replacebody" type="function" returnType="bool">
	<params>
		<param type="string" name="body"/>
	</params>
</keyword>
<keyword name="smfi_setflags" type="function" returnType="void">
	<params>
		<param type="long" name="flags"/>
	</params>
</keyword>
<keyword name="smfi_setreply" type="function" returnType="bool">
	<params>
		<param type="string" name="rcode"/>
		<param type="string" name="xcode"/>
		<param type="string" name="message"/>
	</params>
</keyword>
<keyword name="smfi_settimeout" type="function" returnType="void">
	<params>
		<param type="long" name="timeout"/>
	</params>
</keyword>
<keyword name="snmp_get_quick_print" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>snmp_get_quick_print</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the current value stored in the UCD Library for quick_print.     quick_print is off by default.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="snmp_get_valueretrieval" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span>    <span class="methodname"><strong>snmp_get_valueretrieval</strong></span>    ( <span class="methodparam">void</span>   )</div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="snmp_read_mib" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>snmp_read_mib</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>    <p class="para rdfs-comment">   This function is used to load additional, e.g. vendor specific, MIBs so that   human readable OIDs like VENDOR-MIB::foo.1 instead of error prone numeric OIDs   can be used.  </p>  <p class="para">   The order in which the MIBs are loaded does matter as the underlying Net-SNMP   libary will print warnings if referenced objects cannot be resolved.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="snmp_set_enum_print" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>snmp_set_enum_print</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$enum_print</code></span>   )</div>  <p class="para rdfs-comment">   This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values   in the MIB and return them together with their human readable string.   </p>]]></desc>
	<params>
		<param type="int" name="enum_print"/>
	</params>
</keyword>
<keyword name="snmp_set_oid_output_format" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>snmp_set_oid_output_format</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$oid_format</code><span class="initializer"> = SNMP_OID_OUTPUT_MODULE</span></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>snmp_set_oid_output_format()</strong></span> sets the output format   to be full or numeric.  </p>]]></desc>
	<params>
		<param type="int" name="oid_format"/>
	</params>
</keyword>
<keyword name="snmp_set_quick_print" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>snmp_set_quick_print</strong></span>    ( <span class="methodparam"><span class="type">bool</span> <code class="parameter">$quick_print</code></span>   )</div>  <p class="para rdfs-comment">   Sets the value of <code class="parameter">quick_print</code> within the UCD <acronym title="Simple Network Management Protocol">SNMP</acronym> library.  When this   is set (1), the <acronym title="Simple Network Management Protocol">SNMP</acronym> library will return &#039;quick printed&#039; values.  This   means that just the value will be printed.  When <code class="parameter">quick_print</code> is not   enabled (default) the UCD <acronym title="Simple Network Management Protocol">SNMP</acronym> library prints extra information   including the type of the value (i.e. IpAddress or OID).  Additionally,    if quick_print is not enabled, the library prints additional hex values    for all strings of three characters or less.  </p>  <p class="para">   By default the UCD <acronym title="Simple Network Management Protocol">SNMP</acronym> library returns verbose values, quick_print is   used to return only the value.  </p>  <p class="para">   Currently strings are still returned with extra quotes, this will be   corrected in a later release.  </p>]]></desc>
	<params>
		<param type="int" name="quick_print"/>
	</params>
</keyword>
<keyword name="snmp_set_valueretrieval" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span>    <span class="methodname"><strong>snmp_set_valueretrieval</strong></span>    ( <span class="methodparam">    <span class="type">int</span>     <code class="parameter">$method</code>    <span class="initializer"> = SNMP_VALUE_LIBRARY</span>   </span>   )</div>]]></desc>
	<params>
		<param type="int" name="method"/>
	</params>
</keyword>
<keyword name="snmpget" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpget</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmpget()</strong></span> function is used to read the   value of an <acronym title="Simple Network Management Protocol">SNMP</acronym> object specified by the   <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
		<param type="int" name="retries"/>
	</params>
</keyword>
<keyword name="snmpget" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpget</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmpget()</strong></span> function is used to read the   value of an <acronym title="Simple Network Management Protocol">SNMP</acronym> object specified by the   <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="snmpget" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpget</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmpget()</strong></span> function is used to read the   value of an <acronym title="Simple Network Management Protocol">SNMP</acronym> object specified by the   <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
	</params>
</keyword>
<keyword name="snmpgetnext" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpgetnext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>    <p class="para rdfs-comment">   The <span class="function"><strong>snmpgetnext()</strong></span> function is used to read the   value of the <acronym title="Simple Network Management Protocol">SNMP</acronym> object that follows the specified    <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
		<param type="int" name="retries"/>
	</params>
</keyword>
<keyword name="snmpgetnext" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpgetnext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>    <p class="para rdfs-comment">   The <span class="function"><strong>snmpgetnext()</strong></span> function is used to read the   value of the <acronym title="Simple Network Management Protocol">SNMP</acronym> object that follows the specified    <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="snmpgetnext" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>snmpgetnext</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>    <p class="para rdfs-comment">   The <span class="function"><strong>snmpgetnext()</strong></span> function is used to read the   value of the <acronym title="Simple Network Management Protocol">SNMP</acronym> object that follows the specified    <code class="parameter">object_id</code>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
	</params>
</keyword>
<keyword name="snmprealwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmprealwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmprealwalk()</strong></span> function is used to traverse over a number   of <acronym title="Simple Network Management Protocol">SNMP</acronym> objects starting from <code class="parameter">object_id</code>   and return not only their values but also their object ids.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
		<param type="int" name="retries"/>
	</params>
</keyword>
<keyword name="snmprealwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmprealwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmprealwalk()</strong></span> function is used to traverse over a number   of <acronym title="Simple Network Management Protocol">SNMP</acronym> objects starting from <code class="parameter">object_id</code>   and return not only their values but also their object ids.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="snmprealwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmprealwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$host</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>snmprealwalk()</strong></span> function is used to traverse over a number   of <acronym title="Simple Network Management Protocol">SNMP</acronym> objects starting from <code class="parameter">object_id</code>   and return not only their values but also their object ids.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
	</params>
</keyword>
<keyword name="snmpwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmpwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>snmpwalk()</strong></span> function is used to read all the values from   an <acronym title="Simple Network Management Protocol">SNMP</acronym> agent specified by the <code class="parameter">hostname</code>.   </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
		<param type="int" name="retries"/>
	</params>
</keyword>
<keyword name="snmpwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmpwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>snmpwalk()</strong></span> function is used to read all the values from   an <acronym title="Simple Network Management Protocol">SNMP</acronym> agent specified by the <code class="parameter">hostname</code>.   </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
		<param type="int" name="timeout"/>
	</params>
</keyword>
<keyword name="snmpwalk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>snmpwalk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$hostname</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$community</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$object_id</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timeout</code><span class="initializer"> = 1000000</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$retries</code><span class="initializer"> = 5</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>snmpwalk()</strong></span> function is used to read all the values from   an <acronym title="Simple Network Management Protocol">SNMP</acronym> agent specified by the <code class="parameter">hostname</code>.   </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="community"/>
		<param type="string" name="object_id"/>
	</params>
</keyword>
<keyword name="SoapClient::__doRequest" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SoapClient::__getCookies" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SoapClient::__getLastRequestHeaders" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SoapClient::__getLastResponseHeaders" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SoapClient::__setCookie" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
		<param type="strung" name="value"/>
	</params>
</keyword>
<keyword name="SoapClient::__setCookie" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="SoapClient::__setLocation" type="function" returnType="string">
	<params>
		<param type="string" name="new_location"/>
	</params>
</keyword>
<keyword name="SoapClient::__setLocation" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SoapClient::__setSoapHeaders" type="function" returnType="void">
	<params>
		<param type="array" name="SoapHeaders"/>
	</params>
</keyword>
<keyword name="SoapServer::addFunction" type="function" returnType="void">
	<params>
		<param type="mixed" name="functions"/>
	</params>
</keyword>
<keyword name="SoapServer::getFunctions" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SoapServer::setClass" type="function" returnType="void">
	<params>
		<param type="string" name="class_name"/>
		<param type="mixed" name="args"/>
	</params>
</keyword>
<keyword name="SoapServer::setClass" type="function" returnType="void">
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="SoapServer::setObject" type="function" returnType="void">
	<params>
		<param type="t"/>
	</params>
</keyword>
<keyword name="socket_accept" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>socket_accept</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   )</div>  <p class="para rdfs-comment">   After the socket <code class="parameter">socket</code> has been created   using <span class="function"><a href="function.socket-create.php" class="function">socket_create()</a></span>, bound to a name with   <span class="function"><a href="function.socket-bind.php" class="function">socket_bind()</a></span>, and told to listen for connections   with <span class="function"><a href="function.socket-listen.php" class="function">socket_listen()</a></span>, this function will accept   incoming connections on that socket. Once a successful connection   is made, a new socket resource is returned, which may be used   for communication. If there are multiple connections queued on   the socket, the first will be used. If there are no pending   connections, <span class="function"><strong>socket_accept()</strong></span> will block until   a connection becomes present. If <code class="parameter">socket</code>   has been made non-blocking using   <span class="function"><a href="function.socket-set-blocking.php" class="function">socket_set_blocking()</a></span> or   <span class="function"><a href="function.socket-set-nonblock.php" class="function">socket_set_nonblock()</a></span>, <strong><code>FALSE</code></strong> will be returned.  </p>  <p class="para">   The socket resource returned by   <span class="function"><strong>socket_accept()</strong></span> may not be used to accept new   connections. The original listening socket   <code class="parameter">socket</code>, however, remains open and may be   reused.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Binds the name given in <code class="parameter">address</code> to the socket   described by <code class="parameter">socket</code>. This has to be done before   a connection is be established using <span class="function"><a href="function.socket-connect.php" class="function">socket_connect()</a></span>   or <span class="function"><a href="function.socket-listen.php" class="function">socket_listen()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="addr"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="socket_bind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_bind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Binds the name given in <code class="parameter">address</code> to the socket   described by <code class="parameter">socket</code>. This has to be done before   a connection is be established using <span class="function"><a href="function.socket-connect.php" class="function">socket_connect()</a></span>   or <span class="function"><a href="function.socket-listen.php" class="function">socket_listen()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="addr"/>
	</params>
</keyword>
<keyword name="socket_clear_error" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>socket_clear_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>  ] )</div>  <p class="para rdfs-comment">   This function clears the error code on the given socket or the global   last socket error if no socket is specified.  </p>  <p class="para">   This function allows explicitly resetting the error code value either of   a socket or of the extension global last error code. This may be useful   to detect within a part of the application if an error occurred or not.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_clear_error" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>socket_clear_error</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>  ] )</div>  <p class="para rdfs-comment">   This function clears the error code on the given socket or the global   last socket error if no socket is specified.  </p>  <p class="para">   This function allows explicitly resetting the error code value either of   a socket or of the extension global last error code. This may be useful   to detect within a part of the application if an error occurred or not.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="socket_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>socket_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>socket_close()</strong></span> closes the socket resource   given by <code class="parameter">socket</code>. This function is specific to sockets   and cannot be used on any other type of resources.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>socket_create</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$protocol</code></span>   )</div>  <p class="para rdfs-comment">   Creates and returns a socket resource, also referred to as an endpoint   of communication. A typical network connection is made up of 2 sockets, one   performing the role of the client, and another performing the role of the server.  </p>]]></desc>
	<params>
		<param type="int" name="domain"/>
		<param type="int" name="type"/>
		<param type="int" name="protocol"/>
	</params>
</keyword>
<keyword name="socket_create_listen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>socket_create_listen</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$backlog</code><span class="initializer"> = 128</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>socket_create_listen()</strong></span> creates a new socket resource of   type <strong><code>AF_INET</code></strong> listening on <em class="emphasis">all</em>   local interfaces on the given port waiting for new connections.  </p>  <p class="para">   This function is meant to ease the task of creating a new socket which   only listens to accept new connections.  </p>]]></desc>
	<params>
		<param type="int" name="port"/>
		<param type="int" name="backlog"/>
	</params>
</keyword>
<keyword name="socket_create_listen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>socket_create_listen</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$backlog</code><span class="initializer"> = 128</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>socket_create_listen()</strong></span> creates a new socket resource of   type <strong><code>AF_INET</code></strong> listening on <em class="emphasis">all</em>   local interfaces on the given port waiting for new connections.  </p>  <p class="para">   This function is meant to ease the task of creating a new socket which   only listens to accept new connections.  </p>]]></desc>
	<params>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="socket_create_pair" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_create_pair</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$protocol</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$fd</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>socket_create_pair()</strong></span> creates two connected and   indistinguishable sockets, and stores them in <code class="parameter">fd</code>.   This function is commonly used in IPC (InterProcess Communication).  </p>]]></desc>
	<params>
		<param type="int" name="domain"/>
		<param type="int" name="type"/>
		<param type="int" name="protocol"/>
		<param type="array" name="&amp;fd"/>
	</params>
</keyword>
<keyword name="socket_get_option" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>socket_get_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$optname</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>socket_get_option()</strong></span> function retrieves the value for   the option specified by the <code class="parameter">optname</code> parameter for the   specified <code class="parameter">socket</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="int" name="level"/>
		<param type="int" name="optname"/>
	</params>
</keyword>
<keyword name="socket_listen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_listen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$backlog</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   After the socket <code class="parameter">socket</code> has been created   using <span class="function"><a href="function.socket-create.php" class="function">socket_create()</a></span> and bound to a name with   <span class="function"><a href="function.socket-bind.php" class="function">socket_bind()</a></span>, it may be told to listen for incoming   connections on <code class="parameter">socket</code>.  </p>  <p class="para">   <span class="function"><strong>socket_listen()</strong></span> is applicable only to sockets of   type <strong><code>SOCK_STREAM</code></strong> or   <strong><code>SOCK_SEQPACKET</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="int" name="backlog"/>
	</params>
</keyword>
<keyword name="socket_listen" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_listen</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$backlog</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   After the socket <code class="parameter">socket</code> has been created   using <span class="function"><a href="function.socket-create.php" class="function">socket_create()</a></span> and bound to a name with   <span class="function"><a href="function.socket-bind.php" class="function">socket_bind()</a></span>, it may be told to listen for incoming   connections on <code class="parameter">socket</code>.  </p>  <p class="para">   <span class="function"><strong>socket_listen()</strong></span> is applicable only to sockets of   type <strong><code>SOCK_STREAM</code></strong> or   <strong><code>SOCK_SEQPACKET</code></strong>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_send" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>socket_send</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buf</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>socket_send()</strong></span> sends   <code class="parameter">len</code> bytes to the socket   <code class="parameter">socket</code> from <code class="parameter">buf</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="buf"/>
		<param type="int" name="len"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="socket_sendto" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>socket_sendto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buf</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$addr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>socket_sendto()</strong></span> sends   <code class="parameter">len</code> bytes from <code class="parameter">buf</code>   through the socket <code class="parameter">socket</code> to the   <code class="parameter">port</code> at the address <code class="parameter">addr</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="buf"/>
		<param type="int" name="len"/>
		<param type="int" name="flags"/>
		<param type="string" name="addr"/>
		<param type="int" name="port"/>
	</params>
</keyword>
<keyword name="socket_sendto" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>socket_sendto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buf</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$addr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$port</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>socket_sendto()</strong></span> sends   <code class="parameter">len</code> bytes from <code class="parameter">buf</code>   through the socket <code class="parameter">socket</code> to the   <code class="parameter">port</code> at the address <code class="parameter">addr</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="buf"/>
		<param type="int" name="len"/>
		<param type="int" name="flags"/>
		<param type="string" name="addr"/>
	</params>
</keyword>
<keyword name="socket_set_block" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_set_block</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>socket_set_block()</strong></span> function removes the    <strong><code>O_NONBLOCK</code></strong> flag on the socket specified by the    <code class="parameter">socket</code> parameter.  </p>  <p class="para">   When an operation (e.g. receive, send, connect, accept, ...) is performed on    a blocking socket, the script will pause its execution until it receives   a signal or it can perform the operation.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_set_option" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_set_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$level</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$optname</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$optval</code></span>   )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>socket_set_option()</strong></span> function sets the option   specified by the <code class="parameter">optname</code> parameter, at the   specified protocol <code class="parameter">level</code>, to the value pointed to   by the <code class="parameter">optval</code> parameter for the    <code class="parameter">socket</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="int" name="level"/>
		<param type="int" name="optname"/>
		<param type="int|array" name="optval"/>
	</params>
</keyword>
<keyword name="socket_shutdown" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_shutdown</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$how</code><span class="initializer"> = 2</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>socket_shutdown()</strong></span> function allows you to stop   incoming, outgoing or all data (the default) from being sent through the   <code class="parameter">socket</code>  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="int" name="how"/>
	</params>
</keyword>
<keyword name="socket_shutdown" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>socket_shutdown</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$how</code><span class="initializer"> = 2</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>socket_shutdown()</strong></span> function allows you to stop   incoming, outgoing or all data (the default) from being sent through the   <code class="parameter">socket</code>  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
	</params>
</keyword>
<keyword name="socket_strerror" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>socket_strerror</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$errno</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>socket_strerror()</strong></span> takes as its   <code class="parameter">errno</code> parameter a socket error code as returned by   <span class="function"><a href="function.socket-last-error.php" class="function">socket_last_error()</a></span> and returns the corresponding   explanatory text.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Although the error messages generated by the socket extension are in     English, the system messages retrieved with this function will appear    depending on the current locale (<strong><code>LC_MESSAGES</code></strong>).   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="int" name="errno"/>
	</params>
</keyword>
<keyword name="socket_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>socket_write</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buffer</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>socket_write()</strong></span> writes to the   <code class="parameter">socket</code> from the given   <code class="parameter">buffer</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="buf"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="socket_write" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>socket_write</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buffer</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>socket_write()</strong></span> writes to the   <code class="parameter">socket</code> from the given   <code class="parameter">buffer</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="string" name="buf"/>
	</params>
</keyword>
<keyword name="solid_fetch_prev" type="function" returnType="bool">
	<params>
		<param type="resource" name="result_id"/>
	</params>
</keyword>
<keyword name="sort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array.  Elements will be arranged from   lowest to highest when this function has completed.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
		<param type="int" name="sort_flags"/>
	</params>
</keyword>
<keyword name="sort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$sort_flags</code><span class="initializer"> = SORT_REGULAR</span></span>  ] )</div>  <p class="para rdfs-comment">   This function sorts an array.  Elements will be arranged from   lowest to highest when this function has completed.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;array_arg"/>
	</params>
</keyword>
<keyword name="spl_autoload" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>spl_autoload</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$file_extensions</code><span class="initializer"> = spl_autoload_extensions()</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is intended to be used as a default implementation for   <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span>. If nothing else is specified and   <span class="function"><a href="function.spl-autoload-register.php" class="function">spl_autoload_register()</a></span> is   called without any parameters then this function will be used for any   later call to <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span>.   </p>]]></desc>
	<params>
		<param type="string" name="class_name"/>
		<param type="string" name="file_extensions"/>
	</params>
</keyword>
<keyword name="spl_autoload" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>spl_autoload</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$file_extensions</code><span class="initializer"> = spl_autoload_extensions()</span></span>  ] )</div>  <p class="para rdfs-comment">   This function is intended to be used as a default implementation for   <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span>. If nothing else is specified and   <span class="function"><a href="function.spl-autoload-register.php" class="function">spl_autoload_register()</a></span> is   called without any parameters then this function will be used for any   later call to <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span>.   </p>]]></desc>
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="spl_autoload_call" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>spl_autoload_call</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   )</div>  <p class="para rdfs-comment">   This function can be used to manually search for a class or interface   using the registered __autoload functions.  </p>]]></desc>
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="spl_autoload_extensions" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>spl_autoload_extensions</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$file_extensions</code></span>  ] )</div>  <p class="para rdfs-comment">   This function can modify and check the file extensions that the built in   <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> fallback function <span class="function"><a href="function.spl-autoload.php" class="function">spl_autoload()</a></span>    will be using.  </p>]]></desc>
	<params>
		<param type="string" name="file_extensions"/>
	</params>
</keyword>
<keyword name="spl_autoload_extensions" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>spl_autoload_extensions</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$file_extensions</code></span>  ] )</div>  <p class="para rdfs-comment">   This function can modify and check the file extensions that the built in   <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> fallback function <span class="function"><a href="function.spl-autoload.php" class="function">spl_autoload()</a></span>    will be using.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="spl_autoload_register" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>spl_autoload_register</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$autoload_function</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$throw</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$prepend</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Register a function with the spl provided __autoload stack. If the stack   is not yet activated it will be activated.    </p>  <p class="para">   If your code has an existing <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> function then   this function must be explicitly registered on the __autoload stack. This   is because <span class="function"><strong>spl_autoload_register()</strong></span> will effectively   replace the engine cache for the <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> function   by either <span class="function"><a href="function.spl-autoload.php" class="function">spl_autoload()</a></span> or   <span class="function"><a href="function.spl-autoload-call.php" class="function">spl_autoload_call()</a></span>.  </p>  <p class="para">   If there must be multiple autoload functions, <span class="function"><strong>spl_autoload_register()</strong></span>    allows for this. It effectively creates a queue of autoload functions, and   runs through each of them in the order they are defined. By contrast,    <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> may only be defined once.  </p>]]></desc>
	<params>
		<param type="callback" name="autoload_function"/>
	</params>
</keyword>
<keyword name="spl_autoload_register" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>spl_autoload_register</strong></span>    ([ <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$autoload_function</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$throw</code><span class="initializer"> = true</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$prepend</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Register a function with the spl provided __autoload stack. If the stack   is not yet activated it will be activated.    </p>  <p class="para">   If your code has an existing <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> function then   this function must be explicitly registered on the __autoload stack. This   is because <span class="function"><strong>spl_autoload_register()</strong></span> will effectively   replace the engine cache for the <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> function   by either <span class="function"><a href="function.spl-autoload.php" class="function">spl_autoload()</a></span> or   <span class="function"><a href="function.spl-autoload-call.php" class="function">spl_autoload_call()</a></span>.  </p>  <p class="para">   If there must be multiple autoload functions, <span class="function"><strong>spl_autoload_register()</strong></span>    allows for this. It effectively creates a queue of autoload functions, and   runs through each of them in the order they are defined. By contrast,    <span class="function"><a href="function.autoload.php" class="function">__autoload()</a></span> may only be defined once.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="spl_autoload_unregister" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>spl_autoload_unregister</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$autoload_function</code></span>   )</div>  <p class="para rdfs-comment">   Unregister a function from the spl provided __autoload stack. If the stack   is activated and empty after unregistering the given function then it will   be deactivated.  </p>  <p class="para">   When this function results in the autoload stack being deactivated, any   __autoload function that previously existed will not be reactivated.  </p>]]></desc>
	<params>
		<param type="mixed" name="autoload_function"/>
	</params>
</keyword>
<keyword name="spl_classes" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>spl_classes</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function returns an array with the current available SPL classes.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="spl_object_hash" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>spl_object_hash</strong></span>    ( <span class="methodparam"><span class="type">object</span> <code class="parameter">$obj</code></span>   )</div>  <p class="para rdfs-comment">   This function returns a unique identifier for the object. This id can be   used as a hash key for storing objects or for identifying an object.  </p>]]></desc>
	<params>
		<param type="object" name="obj"/>
	</params>
</keyword>
<keyword name="SplFileInfo::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="file_name"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getATime" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getBasename" type="function" returnType="string">
	<params>
		<param type="string" name="$suffix"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getBasename" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SplFileInfo::getCTime" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getFileInfo" type="function" returnType="SplFileInfo">
	<params>
		<param type="string" name="$class_name"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getFileInfo" type="function" returnType="SplFileInfo">
	<params>
	</params>
</keyword>
<keyword name="SplFileInfo::getFilename" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getGroup" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getInode" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getLinkTarget" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getMTime" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getOwner" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getPath" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getPathInfo" type="function" returnType="SplFileInfo">
	<params>
		<param type="string" name="$class_name"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getPathInfo" type="function" returnType="SplFileInfo">
	<params>
	</params>
</keyword>
<keyword name="SplFileInfo::getPathname" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getPerms" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getRealPath" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getSize" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::getType" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isDir" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isExecutable" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isFile" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isLink" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isReadable" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::isWritable" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileInfo::openFile" type="function" returnType="SplFileObject">
	<params>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="SplFileInfo::openFile" type="function" returnType="SplFileObject">
	<params>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="SplFileInfo::openFile" type="function" returnType="SplFileObject">
	<params>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="SplFileInfo::openFile" type="function" returnType="SplFileObject">
	<params>
	</params>
</keyword>
<keyword name="SplFileInfo::setFileClass" type="function" returnType="void">
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="SplFileInfo::setFileClass" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="SplFileInfo::setInfoClass" type="function" returnType="void">
	<params>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="SplFileInfo::setInfoClass" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="SplFileObject::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="SplFileObject::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="SplFileObject::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="SplFileObject::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="SplFileObject::current" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::eof" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::fflush" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetc" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetcsv" type="function" returnType="array">
	<params>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetcsv" type="function" returnType="array">
	<params>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetcsv" type="function" returnType="array">
	<params>
	</params>
</keyword>
<keyword name="SplFileObject::fgets" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetss" type="function" returnType="string">
	<params>
		<param type="string" name="allowable_tags"/>
	</params>
</keyword>
<keyword name="SplFileObject::fgetss" type="function" returnType="string">
	<params>
	</params>
</keyword>
<keyword name="SplFileObject::flock" type="function" returnType="bool">
	<params>
		<param type="int" name="operation"/>
		<param type="int" name="&amp;wouldblock"/>
	</params>
</keyword>
<keyword name="SplFileObject::flock" type="function" returnType="bool">
	<params>
		<param type="int" name="operation"/>
	</params>
</keyword>
<keyword name="SplFileObject::fpassthru" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::fscanf" type="function" returnType="bool">
	<params>
		<param type="string" name="format"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="SplFileObject::fscanf" type="function" returnType="bool">
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="SplFileObject::fseek" type="function" returnType="int">
	<params>
		<param type="int" name="pos"/>
		<param type="int" name="whence"/>
	</params>
</keyword>
<keyword name="SplFileObject::fseek" type="function" returnType="int">
	<params>
		<param type="int" name="pos"/>
	</params>
</keyword>
<keyword name="SplFileObject::fstat" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::ftell" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::ftruncate" type="function" returnType="bool">
	<params>
		<param type="int" name="size"/>
	</params>
</keyword>
<keyword name="SplFileObject::fwrite" type="function" returnType="mixed">
	<params>
		<param type="string" name="str"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="SplFileObject::fwrite" type="function" returnType="mixed">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="SplFileObject::getChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::getCsvControl" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::getFlags" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::getMaxLineLen" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::key" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplFileObject::seek" type="function" returnType="void">
	<params>
		<param type="int" name="line_pos"/>
	</params>
</keyword>
<keyword name="SplFileObject::setCsvControl" type="function" returnType="void">
	<params>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
	</params>
</keyword>
<keyword name="SplFileObject::setCsvControl" type="function" returnType="void">
	<params>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="SplFileObject::setCsvControl" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="SplFileObject::setFlags" type="function" returnType="void">
	<params>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="SplFileObject::setMaxLineLen" type="function" returnType="void">
	<params>
		<param type="int" name="max_len"/>
	</params>
</keyword>
<keyword name="SplFileObject::valid" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="spliti" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>spliti</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Splits a <code class="parameter">string</code> into array by regular expression.  </p>  <p class="para">   This function is identical to <span class="function"><a href="function.split.php" class="function">split()</a></span> except that this   ignores case distinction when matching alphabetic characters.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
		<param type="int" name="limit"/>
	</params>
</keyword>
<keyword name="spliti" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>spliti</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$pattern</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$limit</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Splits a <code class="parameter">string</code> into array by regular expression.  </p>  <p class="para">   This function is identical to <span class="function"><a href="function.split.php" class="function">split()</a></span> except that this   ignores case distinction when matching alphabetic characters.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> as of PHP 5.3.0. Relying on this feature ishighly discouraged.</p></div>]]></desc>
	<params>
		<param type="string" name="pattern"/>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::attach" type="function" returnType="void">
	<params>
		<param type="object" name="$obj"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::contains" type="function" returnType="bool">
	<params>
		<param type="object" name="$obj"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::count" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::current" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::detach" type="function" returnType="void">
	<params>
		<param type="object" name="$obj"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::key" type="function" returnType="mixed">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::next" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::rewind" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::serialize" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::unserialize" type="function" returnType="void">
	<params>
		<param type="string" name="serialized"/>
	</params>
</keyword>
<keyword name="SplObjectStorage::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="SplTempFileObject::__construct" type="function" returnType="void">
	<params>
		<param type="int" name="max_memory"/>
	</params>
</keyword>
<keyword name="SplTempFileObject::__construct" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="sprintf" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sprintf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string produced according to the formatting string   <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="sprintf" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sprintf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string produced according to the formatting string   <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="mixed" name="arg1"/>
	</params>
</keyword>
<keyword name="sprintf" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sprintf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$args</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns a string produced according to the formatting string   <code class="parameter">format</code>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="sqlite_array_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::arrayQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_array_query()</strong></span> executes the given query and returns   an array of the entire result set.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> and then <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span>   for each row in the result set.  <span class="function"><strong>sqlite_array_query()</strong></span> is   significantly faster than the aforementioned.  </p>  <div class="tip"><strong class="tip">Tip</strong>   <p class="para">    <span class="function"><strong>sqlite_array_query()</strong></span> is best suited to queries    returning 45 rows or less.  If you have more data than that, it is    recommended that you write your scripts to use    <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span> instead for more optimal    performance.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query "/>
		<param type="int" name="result_type"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_array_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::arrayQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_array_query()</strong></span> executes the given query and returns   an array of the entire result set.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> and then <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span>   for each row in the result set.  <span class="function"><strong>sqlite_array_query()</strong></span> is   significantly faster than the aforementioned.  </p>  <div class="tip"><strong class="tip">Tip</strong>   <p class="para">    <span class="function"><strong>sqlite_array_query()</strong></span> is best suited to queries    returning 45 rows or less.  If you have more data than that, it is    recommended that you write your scripts to use    <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span> instead for more optimal    performance.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query "/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_array_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_array_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::arrayQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_array_query()</strong></span> executes the given query and returns   an array of the entire result set.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> and then <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span>   for each row in the result set.  <span class="function"><strong>sqlite_array_query()</strong></span> is   significantly faster than the aforementioned.  </p>  <div class="tip"><strong class="tip">Tip</strong>   <p class="para">    <span class="function"><strong>sqlite_array_query()</strong></span> is best suited to queries    returning 45 rows or less.  If you have more data than that, it is    recommended that you write your scripts to use    <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span> instead for more optimal    performance.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query "/>
	</params>
</keyword>
<keyword name="sqlite_busy_timeout" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_busy_timeout</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$milliseconds</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>SQLiteDatabase::busyTimeout</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$milliseconds</code></span>   )</div>  <p class="para rdfs-comment">   Set the maximum time, in milliseconds, that SQLite will wait for a   <code class="parameter">dbhandle</code> to become ready for use.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="int" name="ms"/>
	</params>
</keyword>
<keyword name="sqlite_changes" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sqlite_changes</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>SQLiteDatabase::changes</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the numbers of rows that were changed by the most recent SQL   statement executed against the <code class="parameter">dbhandle</code> database   handle.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">   Closes the given <code class="parameter">db_handle</code> database handle.   If the database was persistent, it will be closed and removed from the   persistent list.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_column" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sqlite_column</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>SQLiteResult::column</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>SQLiteUnbuffered::column</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches the value of a column named <code class="parameter">index_or_name</code>   (if it is a string), or of the ordinal column numbered   <code class="parameter">index_or_name</code> (if it is an integer) from the   current row of the query result handle <code class="parameter">result</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="mixed" name="index_or_name"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_column" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sqlite_column</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>SQLiteResult::column</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>SQLiteUnbuffered::column</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$index_or_name</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Fetches the value of a column named <code class="parameter">index_or_name</code>   (if it is a string), or of the ordinal column numbered   <code class="parameter">index_or_name</code> (if it is an integer) from the   current row of the query result handle <code class="parameter">result</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="mixed" name="index_or_name"/>
	</params>
</keyword>
<keyword name="sqlite_create_aggregate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_create_aggregate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$step_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$finalize_func</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>SQLiteDatabase::createAggregate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$step_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$finalize_func</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_create_aggregate()</strong></span> is similar to   <span class="function"><a href="function.sqlite-create-function.php" class="function">sqlite_create_function()</a></span> except that it registers   functions that can be used to calculate a result aggregated across all the   rows of a query.  </p>  <p class="para">   The key difference between this function and   <span class="function"><a href="function.sqlite-create-function.php" class="function">sqlite_create_function()</a></span> is that two functions are   required to manage the aggregate; <code class="parameter">step_func</code> is   called for each row of the result set.  Your PHP function should   accumulate the result and store it into the aggregation context.   Once all the rows have been processed,   <code class="parameter">finalize_func</code> will be called and it should then   take the data from the aggregation context and return the result.   Callback functions should return a type understood by SQLite (i.e.   <a href="language.types.intro.php" class="link">scalar type</a>).  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="funcname"/>
		<param type="mixed" name="step_func"/>
		<param type="mixed" name="finalize_func"/>
		<param type="long" name="num_args"/>
	</params>
</keyword>
<keyword name="sqlite_create_aggregate" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_create_aggregate</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$step_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$finalize_func</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>SQLiteDatabase::createAggregate</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$step_func</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$finalize_func</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_create_aggregate()</strong></span> is similar to   <span class="function"><a href="function.sqlite-create-function.php" class="function">sqlite_create_function()</a></span> except that it registers   functions that can be used to calculate a result aggregated across all the   rows of a query.  </p>  <p class="para">   The key difference between this function and   <span class="function"><a href="function.sqlite-create-function.php" class="function">sqlite_create_function()</a></span> is that two functions are   required to manage the aggregate; <code class="parameter">step_func</code> is   called for each row of the result set.  Your PHP function should   accumulate the result and store it into the aggregation context.   Once all the rows have been processed,   <code class="parameter">finalize_func</code> will be called and it should then   take the data from the aggregation context and return the result.   Callback functions should return a type understood by SQLite (i.e.   <a href="language.types.intro.php" class="link">scalar type</a>).  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="funcname"/>
		<param type="mixed" name="step_func"/>
		<param type="mixed" name="finalize_func"/>
	</params>
</keyword>
<keyword name="sqlite_create_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_create_function</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>SQLiteDatabase::createFunction</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_create_function()</strong></span> allows you to register a PHP   function with SQLite as an <acronym title="User Defined Functions">UDF</acronym> (User Defined   Function), so that it can be called from within your SQL statements.  </p>  <p class="para">   The UDF can be used in any SQL statement that can call functions, such as   SELECT and UPDATE statements and also in triggers.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="funcname"/>
		<param type="mixed" name="callback"/>
		<param type="long" name="num_args"/>
	</params>
</keyword>
<keyword name="sqlite_create_function" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sqlite_create_function</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>SQLiteDatabase::createFunction</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$callback</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$num_args</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_create_function()</strong></span> allows you to register a PHP   function with SQLite as an <acronym title="User Defined Functions">UDF</acronym> (User Defined   Function), so that it can be called from within your SQL statements.  </p>  <p class="para">   The UDF can be used in any SQL statement that can call functions, such as   SELECT and UPDATE statements and also in triggers.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="funcname"/>
		<param type="mixed" name="callback"/>
	</params>
</keyword>
<keyword name="sqlite_current" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_current</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_current()</strong></span> is identical to   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> except that it does not advance   to the next row prior to returning the data; it returns the data from the   current position only.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_current" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_current</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_current()</strong></span> is identical to   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> except that it does not advance   to the next row prior to returning the data; it returns the data from the   current position only.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_current" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_current</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::current</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_current()</strong></span> is identical to   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> except that it does not advance   to the next row prior to returning the data; it returns the data from the   current position only.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_error_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_error_string</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_code</code></span>   )</div>  <p class="para rdfs-comment">   Returns a human readable description of the   <code class="parameter">error_code</code> returned from   <span class="function"><a href="function.sqlite-last-error.php" class="function">sqlite_last_error()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="error_code"/>
	</params>
</keyword>
<keyword name="sqlite_escape_string" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_escape_string</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$item</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_escape_string()</strong></span> will correctly quote the string   specified by <code class="parameter">item</code>   for use in an SQLite SQL statement.  This includes doubling up   single-quote characters (<em>&#039;</em>) and checking for   binary-unsafe characters in the query string.  </p>  <p class="para">   Although the encoding makes it safe to insert the data, it will render   simple text comparisons and <em>LIKE</em> clauses in your   queries unusable for the columns that contain the binary data.  In   practice, this shouldn&#039;t be a problem, as your schema should be such that   you don&#039;t use such things on binary columns (in fact, it might be better to   store binary data using other means, such as in files).  </p>]]></desc>
	<params>
		<param type="string" name="item"/>
	</params>
</keyword>
<keyword name="sqlite_exec" type="function" returnType="boolean">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">bool</span> <span class="methodname"><strong>SQLiteDatabase::queryExec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ] )</div>  <p class="para rdfs-comment">   Executes an SQL statement given by the <code class="parameter">query</code> against   a given database handle (specified by the <code class="parameter">dbhandle</code>    parameter).  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    SQLite <em class="emphasis">will</em> execute multiple queries separated by    semicolons, so you can use it to execute a batch of SQL that you have    loaded from a file or have embedded in a script.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_exec" type="function" returnType="boolean">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_exec</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_exec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">bool</span> <span class="methodname"><strong>SQLiteDatabase::queryExec</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ] )</div>  <p class="para rdfs-comment">   Executes an SQL statement given by the <code class="parameter">query</code> against   a given database handle (specified by the <code class="parameter">dbhandle</code>    parameter).  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="simpara">    SQLite <em class="emphasis">will</em> execute multiple queries separated by    semicolons, so you can use it to execute a batch of SQL that you have    loaded from a file or have embedded in a script.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_factory" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type SQLiteDatabase">SQLiteDatabase</span></span> <span class="methodname"><strong>sqlite_factory</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_factory()</strong></span> behaves similarly to   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> in that it opens an SQLite database or   attempts to create it if it does not exist.  However, a   <a href="ref.sqlite.php#sqlite.class.sqlitedatabase" class="link">SQLiteDatabase</a> object is   returned rather than a resource.  Please see the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> reference page for further usage and caveats.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_factory" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type SQLiteDatabase">SQLiteDatabase</span></span> <span class="methodname"><strong>sqlite_factory</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_factory()</strong></span> behaves similarly to   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> in that it opens an SQLite database or   attempts to create it if it does not exist.  However, a   <a href="ref.sqlite.php#sqlite.class.sqlitedatabase" class="link">SQLiteDatabase</a> object is   returned rather than a resource.  Please see the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> reference page for further usage and caveats.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="sqlite_factory" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type SQLiteDatabase">SQLiteDatabase</span></span> <span class="methodname"><strong>sqlite_factory</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_factory()</strong></span> behaves similarly to   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> in that it opens an SQLite database or   attempts to create it if it does not exist.  However, a   <a href="ref.sqlite.php#sqlite.class.sqlitedatabase" class="link">SQLiteDatabase</a> object is   returned rather than a resource.  Please see the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> reference page for further usage and caveats.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_all" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_all()</strong></span> returns an array of the entire result   set from the <code class="parameter">result</code> resource.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> (or   <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span>) and then   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> for each row in the result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_all" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_all()</strong></span> returns an array of the entire result   set from the <code class="parameter">result</code> resource.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> (or   <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span>) and then   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> for each row in the result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_all" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_all</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchAll</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_all()</strong></span> returns an array of the entire result   set from the <code class="parameter">result</code> resource.  It is similar to calling   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> (or   <span class="function"><a href="function.sqlite-unbuffered-query.php" class="function">sqlite_unbuffered_query()</a></span>) and then   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> for each row in the result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Fetches the next row from the given <code class="parameter">result</code> handle.   If there are no more rows, returns <strong><code>FALSE</code></strong>, otherwise returns an   associative array representing the row data.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Fetches the next row from the given <code class="parameter">result</code> handle.   If there are no more rows, returns <strong><code>FALSE</code></strong>, otherwise returns an   associative array representing the row data.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteResult::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>SQLiteUnbuffered::fetch</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]] )</div>  <p class="para rdfs-comment">   Fetches the next row from the given <code class="parameter">result</code> handle.   If there are no more rows, returns <strong><code>FALSE</code></strong>, otherwise returns an   associative array representing the row data.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_column_types" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_column_types</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_ASSOC</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::fetchColumnTypes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_ASSOC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_column_types()</strong></span> returns an array of column   data types from the specified <code class="parameter">table_name</code> table.  </p>]]></desc>
	<params>
		<param type="string" name="table_name"/>
		<param type="resource" name="db"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_column_types" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_fetch_column_types</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_ASSOC</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::fetchColumnTypes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$table_name</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_ASSOC</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_column_types()</strong></span> returns an array of column   data types from the specified <code class="parameter">table_name</code> table.  </p>]]></desc>
	<params>
		<param type="string" name="table_name"/>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sqlite_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteResult::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="class_name"/>
		<param type="NULL|array" name="ctor_params"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sqlite_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteResult::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="class_name"/>
		<param type="NULL|array" name="ctor_params"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sqlite_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteResult::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="string" name="class_name"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sqlite_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteResult::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchObject</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$class_name</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$ctor_params</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ]]] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_single" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_fetch_single</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteResult::fetchSingle</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchSingle</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_single()</strong></span> is identical to   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> except that it returns the value   of the first column of the rowset.  </p>  <p class="para">   This is the most optimal way to retrieve data when you are only   interested in the values from a single column of data.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_fetch_single" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_fetch_single</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteResult::fetchSingle</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteUnbuffered::fetchSingle</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_fetch_single()</strong></span> is identical to   <span class="function"><a href="function.sqlite-fetch-array.php" class="function">sqlite_fetch_array()</a></span> except that it returns the value   of the first column of the rowset.  </p>  <p class="para">   This is the most optimal way to retrieve data when you are only   interested in the values from a single column of data.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_field_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_field_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_index</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteResult::fieldName</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_index</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>SQLiteUnbuffered::fieldName</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_index</code></span>   )</div>  <p class="para rdfs-comment">   Given the ordinal column number, <code class="parameter">field_index</code>,   <span class="function"><strong>sqlite_field_name()</strong></span> returns the name of that field in   the result set <code class="parameter">result</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="field_index"/>
	</params>
</keyword>
<keyword name="sqlite_has_prev" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_has_prev</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::hasPrev</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Find whether there are more previous rows from the given result handle.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_key" type="function" returnType="int">
	<desc><![CDATA[<p class="para">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>SQLiteResult::key</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="methodname"><strong>SQLiteResult::key()</strong></span> returns the current row index of   the buffered result set <code class="parameter">result</code>.  </p>  <p class="para">   Unlike all other SQLite functions, this function does not have a procedural   version, and can only be called as a method on a   <strong class="classname">SQLiteResult</strong> object.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_last_error" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sqlite_last_error</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>SQLiteDatabase::lastError</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the error code from the last operation performed on   <code class="parameter">dbhandle</code> (the database handle), or <em>0</em>   when no error occurred. A human readable   description of the error code can be retrieved using   <span class="function"><a href="function.sqlite-error-string.php" class="function">sqlite_error_string()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_last_insert_rowid" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sqlite_last_insert_rowid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">int</span> <span class="methodname"><strong>SQLiteDatabase::lastInsertRowid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the rowid of the row that was most recently inserted into the   database <code class="parameter">dbhandle</code>, if it was created as an   auto-increment field.  </p>  <div class="tip"><strong class="tip">Tip</strong>   <p class="para">    You can create auto-increment fields in SQLite by declaring them as    <em>INTEGER PRIMARY KEY</em> in your table schema.   </p>  </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_libencoding" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_libencoding</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   The SQLite library may be compiled in either <em>ISO-8859-1</em>   or <em>UTF-8</em> compatible modes. This function allows you to   determine which encoding scheme is used by your version of the library.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    The default PHP distribution builds <var class="filename">libsqlite</var> in    <em>ISO-8859-1</em> encoding    mode.  However, this is a misnomer; rather than handling    <em>ISO-8859-1</em>, it operates according to your current    locale settings for string comparisons and sort ordering. So, rather    than <em>ISO-8859-1</em>, you should think of it as being    &#039;<em>8-bit</em>&#039; instead.   </p>  </div>  <p class="para">   When compiled with <em>UTF-8</em> support, sqlite handles encoding and decoding   of <em>UTF-8</em> multi-byte character sequences, but does not yet do a complete   job when working with the data (no normalization is performed for   example), and some comparison operations may still not be carried out   correctly.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    It is not recommended that you use PHP in a web-server configuration    with a version of the SQLite library compiled with <em>UTF-8</em> support, since    <var class="filename">libsqlite</var> will abort the process if it detects a problem with the    <em>UTF-8</em> encoding.   </p>  </div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="sqlite_libversion" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_libversion</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the version of the linked SQLite library.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="sqlite_next" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_next</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::next</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteUnbuffered::next</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_next()</strong></span> advances the result handle   <code class="parameter">result</code> to the next row.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sqlite_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>SQLiteResult::numFields</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>SQLiteUnbuffered::numFields</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the number of fields in the <code class="parameter">result</code> set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sqlite_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>SQLiteResult::numRows</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the number of rows in the buffered <code class="parameter">result</code>   set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (constructor):</p>  <div class="constructorsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname"><strong>SQLiteDatabase::__construct</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   Opens an SQLite database or creates the database if it does not exist.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (constructor):</p>  <div class="constructorsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname"><strong>SQLiteDatabase::__construct</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   Opens an SQLite database or creates the database if it does not exist.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="sqlite_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (constructor):</p>  <div class="constructorsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname"><strong>SQLiteDatabase::__construct</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="para rdfs-comment">   Opens an SQLite database or creates the database if it does not exist.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="sqlite_popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="simpara">   This function behaves identically to <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span>   except that is uses the persistent resource mechanism of PHP.   For information about the meaning of the parameters, read the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> manual page.  </p>  <p class="para">   <span class="function"><strong>sqlite_popen()</strong></span> will first check to see if a persistent   handle has already been opened for the given   <code class="parameter">filename</code>.  If it finds one, it returns that handle   to your script, otherwise it opens a fresh handle to the database.  </p>  <p class="para">   The benefit of this approach is that you don&#039;t incur the performance   cost of re-reading the database and index schema on each page hit served   by persistent web server SAPI&#039;s (any SAPI except for regular CGI or CLI).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    If you use persistent handles and have the database updated by a    background process (perhaps via a crontab), and that process re-creates    the database by overwriting it (either by unlinking and rebuilding, or    moving the updated version to replace the current version),    you may experience undefined behaviour when a persistent handle on the    old version of the database is recycled.   </span>   <span class="simpara">    To avoid this situation, have your background processes open the same    database file and perform their updates in a transaction.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="simpara">   This function behaves identically to <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span>   except that is uses the persistent resource mechanism of PHP.   For information about the meaning of the parameters, read the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> manual page.  </p>  <p class="para">   <span class="function"><strong>sqlite_popen()</strong></span> will first check to see if a persistent   handle has already been opened for the given   <code class="parameter">filename</code>.  If it finds one, it returns that handle   to your script, otherwise it opens a fresh handle to the database.  </p>  <p class="para">   The benefit of this approach is that you don&#039;t incur the performance   cost of re-reading the database and index schema on each page hit served   by persistent web server SAPI&#039;s (any SAPI except for regular CGI or CLI).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    If you use persistent handles and have the database updated by a    background process (perhaps via a crontab), and that process re-creates    the database by overwriting it (either by unlinking and rebuilding, or    moving the updated version to replace the current version),    you may experience undefined behaviour when a persistent handle on the    old version of the database is recycled.   </span>   <span class="simpara">    To avoid this situation, have your background processes open the same    database file and perform their updates in a transaction.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="sqlite_popen" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_popen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code><span class="initializer"> = 0666</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_message</code></span>  ]] )</div>  <p class="simpara">   This function behaves identically to <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span>   except that is uses the persistent resource mechanism of PHP.   For information about the meaning of the parameters, read the   <span class="function"><a href="function.sqlite-open.php" class="function">sqlite_open()</a></span> manual page.  </p>  <p class="para">   <span class="function"><strong>sqlite_popen()</strong></span> will first check to see if a persistent   handle has already been opened for the given   <code class="parameter">filename</code>.  If it finds one, it returns that handle   to your script, otherwise it opens a fresh handle to the database.  </p>  <p class="para">   The benefit of this approach is that you don&#039;t incur the performance   cost of re-reading the database and index schema on each page hit served   by persistent web server SAPI&#039;s (any SAPI except for regular CGI or CLI).  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <span class="simpara">    If you use persistent handles and have the database updated by a    background process (perhaps via a crontab), and that process re-creates    the database by overwriting it (either by unlinking and rebuilding, or    moving the updated version to replace the current version),    you may experience undefined behaviour when a persistent handle on the    old version of the database is recycled.   </span>   <span class="simpara">    To avoid this situation, have your background processes open the same    database file and perform their updates in a transaction.   </span>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="sqlite_prev" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_prev</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::prev</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_prev()</strong></span> seeks back the    <code class="parameter">result</code> handle to the previous row.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteResult">SQLiteResult</span></span> <span class="methodname"><strong>SQLiteDatabase::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes an SQL statement given by the <code class="parameter">query</code> against   a given database handle.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db"/>
		<param type="int" name="result_type"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteResult">SQLiteResult</span></span> <span class="methodname"><strong>SQLiteDatabase::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes an SQL statement given by the <code class="parameter">query</code> against   a given database handle.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db"/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteResult">SQLiteResult</span></span> <span class="methodname"><strong>SQLiteDatabase::query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   Executes an SQL statement given by the <code class="parameter">query</code> against   a given database handle.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db"/>
	</params>
</keyword>
<keyword name="sqlite_rewind" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_rewind</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::rewind</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_rewind()</strong></span> seeks back to the first row in the   given result set.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="sqlite_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownum</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::seek</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$rownum</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_seek()</strong></span> seeks to the row given by the parameter   <code class="parameter">rownum</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
		<param type="int" name="row"/>
	</params>
</keyword>
<keyword name="sqlite_single_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_single_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::singleQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>    <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query"/>
		<param type="bool" name="first_row_only"/>
		<param type="bool" name="decode_binary"/>
	</params>
</keyword>
<keyword name="sqlite_single_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_single_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::singleQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>    <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query"/>
		<param type="bool" name="first_row_only"/>
	</params>
</keyword>
<keyword name="sqlite_single_query" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sqlite_single_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$db</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type">array</span> <span class="methodname"><strong>SQLiteDatabase::singleQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$first_row_only</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$decode_binary</code></span>  ]] )</div>    <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="db"/>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="sqlite_udf_decode_binary" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_udf_decode_binary</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   Decodes binary data passed as parameters to a <acronym title="User Defined Functions">UDF</acronym>.  </p>  <p class="para">   You must call this function on parameters passed to your UDF if you need   them to handle binary data, as the binary encoding employed by PHP will   obscure the content and of the parameter in its natural, non-coded form.  </p>  <p class="para">   PHP does not perform this encode/decode operation automatically as it would   severely impact performance if it did.  </p>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="sqlite_udf_encode_binary" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sqlite_udf_encode_binary</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_udf_encode_binary()</strong></span> applies a binary encoding   to the <code class="parameter">data</code> so that it can be safely returned from   queries (since the underlying <var class="filename">libsqlite</var> API is not binary safe).  </p>  <p class="para">   If there is a chance that your data might be binary unsafe (e.g.: it   contains a NUL byte in the middle rather than at the end, or if it has and   <em>0x01</em> byte as the first character) then you must   call this function to encode the return value from your UDF.  </p>  <p class="para">   PHP does not perform this encode/decode operation automatically as it would   severely impact performance if it did.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Do not use <span class="function"><a href="function.sqlite-escape-string.php" class="function">sqlite_escape_string()</a></span> to quote strings    returned from UDF&#039;s as it will lead to double-quoting of the data.  Use    <span class="function"><strong>sqlite_udf_encode_binary()</strong></span> instead!   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="sqlite_unbuffered_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>     ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteUnbuffered">SQLiteUnbuffered</span></span> <span class="methodname"><strong>SQLiteDatabase::unbufferedQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_unbuffered_query()</strong></span> is identical to   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> except that the result that is returned   is a sequential forward-only result set that can only be used to read   each row, one after the other.  </p>  <p class="para">   This function is ideal for generating things such as HTML tables where   you only need to process one row at a time and don&#039;t need to randomly   access the row data.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Functions such as <span class="function"><a href="function.sqlite-seek.php" class="function">sqlite_seek()</a></span>,     <span class="function"><a href="function.sqlite-rewind.php" class="function">sqlite_rewind()</a></span>, <span class="function"><a href="function.sqlite-next.php" class="function">sqlite_next()</a></span>,    <span class="function"><a href="function.sqlite-current.php" class="function">sqlite_current()</a></span>, and    <span class="function"><a href="function.sqlite-num-rows.php" class="function">sqlite_num_rows()</a></span> do not work on result handles    returned from <span class="function"><strong>sqlite_unbuffered_query()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db "/>
		<param type="int" name="result_type"/>
		<param type="string" name="&amp;error_message"/>
	</params>
</keyword>
<keyword name="sqlite_unbuffered_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>     ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteUnbuffered">SQLiteUnbuffered</span></span> <span class="methodname"><strong>SQLiteDatabase::unbufferedQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_unbuffered_query()</strong></span> is identical to   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> except that the result that is returned   is a sequential forward-only result set that can only be used to read   each row, one after the other.  </p>  <p class="para">   This function is ideal for generating things such as HTML tables where   you only need to process one row at a time and don&#039;t need to randomly   access the row data.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Functions such as <span class="function"><a href="function.sqlite-seek.php" class="function">sqlite_seek()</a></span>,     <span class="function"><a href="function.sqlite-rewind.php" class="function">sqlite_rewind()</a></span>, <span class="function"><a href="function.sqlite-next.php" class="function">sqlite_next()</a></span>,    <span class="function"><a href="function.sqlite-current.php" class="function">sqlite_current()</a></span>, and    <span class="function"><a href="function.sqlite-num-rows.php" class="function">sqlite_num_rows()</a></span> do not work on result handles    returned from <span class="function"><strong>sqlite_unbuffered_query()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db "/>
		<param type="int" name="result_type"/>
	</params>
</keyword>
<keyword name="sqlite_unbuffered_query" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sqlite_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dbhandle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>     ]] )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="type"><span class="type SQLiteUnbuffered">SQLiteUnbuffered</span></span> <span class="methodname"><strong>SQLiteDatabase::unbufferedQuery</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$result_type</code><span class="initializer"> = SQLITE_BOTH</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$error_msg</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sqlite_unbuffered_query()</strong></span> is identical to   <span class="function"><a href="function.sqlite-query.php" class="function">sqlite_query()</a></span> except that the result that is returned   is a sequential forward-only result set that can only be used to read   each row, one after the other.  </p>  <p class="para">   This function is ideal for generating things such as HTML tables where   you only need to process one row at a time and don&#039;t need to randomly   access the row data.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    Functions such as <span class="function"><a href="function.sqlite-seek.php" class="function">sqlite_seek()</a></span>,     <span class="function"><a href="function.sqlite-rewind.php" class="function">sqlite_rewind()</a></span>, <span class="function"><a href="function.sqlite-next.php" class="function">sqlite_next()</a></span>,    <span class="function"><a href="function.sqlite-current.php" class="function">sqlite_current()</a></span>, and    <span class="function"><a href="function.sqlite-num-rows.php" class="function">sqlite_num_rows()</a></span> do not work on result handles    returned from <span class="function"><strong>sqlite_unbuffered_query()</strong></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="resource" name="db "/>
	</params>
</keyword>
<keyword name="sqlite_valid" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sqlite_valid</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">Object oriented style (method):</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteResult::valid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>SQLiteUnbuffered::valid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Finds whether more rows are available from the given result handle.  </p>]]></desc>
	<params>
		<param type="resource" name="result"/>
	</params>
</keyword>
<keyword name="srand" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>srand</strong></span>     ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>   ] )</div>  <p class="para rdfs-comment">   Seeds the random number generator with <code class="parameter">seed</code>   or with a random value if no <code class="parameter">seed</code> is given.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">As of PHP 4.2.0, there is no needto seed the random number generator with <span class="function"><strong>srand()</strong></span> or<span class="function"><a href="function.mt-srand.php" class="function">mt_srand()</a></span> as this is now done automatically.</span></p></blockquote>]]></desc>
	<params>
		<param type="int" name="seed"/>
	</params>
</keyword>
<keyword name="srand" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>srand</strong></span>     ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$seed</code></span>   ] )</div>  <p class="para rdfs-comment">   Seeds the random number generator with <code class="parameter">seed</code>   or with a random value if no <code class="parameter">seed</code> is given.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">As of PHP 4.2.0, there is no needto seed the random number generator with <span class="function"><strong>srand()</strong></span> or<span class="function"><a href="function.mt-srand.php" class="function">mt_srand()</a></span> as this is now done automatically.</span></p></blockquote>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="sscanf" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sscanf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>sscanf()</strong></span> is the input analog of   <span class="function"><a href="function.printf.php" class="function">printf()</a></span>. <span class="function"><strong>sscanf()</strong></span> reads   from the string <code class="parameter">str</code> and interprets it   according to the specified <code class="parameter">format</code>, which is   described in the documentation for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>.   </p>  <p class="para">   Any whitespace in the format string matches any whitespace in the input   string. This means that even a tab \t in the format string can match a   single space character in the input string.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="format"/>
		<param type="string" name="..."/>
	</params>
</keyword>
<keyword name="sscanf" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sscanf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter reference">&$...</code></span>  ] )</div>  <p class="para rdfs-comment">   The function <span class="function"><strong>sscanf()</strong></span> is the input analog of   <span class="function"><a href="function.printf.php" class="function">printf()</a></span>. <span class="function"><strong>sscanf()</strong></span> reads   from the string <code class="parameter">str</code> and interprets it   according to the specified <code class="parameter">format</code>, which is   described in the documentation for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>.   </p>  <p class="para">   Any whitespace in the format string matches any whitespace in the input   string. This means that even a tab \t in the format string can match a   single space character in the input string.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="stat" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stat</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Gathers the statistics of the file named by   <code class="parameter">filename</code>.  If <code class="parameter">filename</code> is a   symbolic link, statistics are from the file itself, not the symlink.  </p>  <p class="para">   <span class="function"><a href="function.lstat.php" class="function">lstat()</a></span> is identical to <span class="function"><strong>stat()</strong></span>   except it would instead be based off the symlinks status.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="statIndex" type="function" returnType="resource">
	<params>
		<param type="int" name="index"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="statIndex" type="function" returnType="resource">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="statName" type="function" returnType="array">
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="statName" type="function" returnType="array">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="str_getcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_getcsv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Parses a string input for fields in <acronym title="Comma Separated Value">CSV</acronym> format   and returns an array containing the fields read.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
		<param type="string" name="escape"/>
	</params>
</keyword>
<keyword name="str_getcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_getcsv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Parses a string input for fields in <acronym title="Comma Separated Value">CSV</acronym> format   and returns an array containing the fields read.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="string" name="delimiter"/>
		<param type="string" name="enclosure"/>
	</params>
</keyword>
<keyword name="str_getcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_getcsv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Parses a string input for fields in <acronym title="Comma Separated Value">CSV</acronym> format   and returns an array containing the fields read.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="string" name="delimiter"/>
	</params>
</keyword>
<keyword name="str_getcsv" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_getcsv</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$delimiter</code><span class="initializer"> = &quot;,&quot;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$enclosure</code><span class="initializer"> = &#039;&quot;&#039;</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$escape</code><span class="initializer"> = &quot;\\&quot;</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Parses a string input for fields in <acronym title="Comma Separated Value">CSV</acronym> format   and returns an array containing the fields read.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
	</params>
</keyword>
<keyword name="str_ireplace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_ireplace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string or an array with all occurrences of   <code class="parameter">search</code> in <code class="parameter">subject</code>   (ignoring case) replaced with the given <code class="parameter">replace</code>   value.  If you don&#039;t need fancy replacing rules, you should generally   use this function instead of   <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span> with the <em>i</em> modifier.  </p>]]></desc>
	<params>
		<param type="mixed" name="search"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="&amp;replace_count"/>
	</params>
</keyword>
<keyword name="str_ireplace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_ireplace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string or an array with all occurrences of   <code class="parameter">search</code> in <code class="parameter">subject</code>   (ignoring case) replaced with the given <code class="parameter">replace</code>   value.  If you don&#039;t need fancy replacing rules, you should generally   use this function instead of   <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span> with the <em>i</em> modifier.  </p>]]></desc>
	<params>
		<param type="mixed" name="search"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
	</params>
</keyword>
<keyword name="str_pad" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>str_pad</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pad_string</code><span class="initializer"> = &quot; &quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_type</code><span class="initializer"> = STR_PAD_RIGHT</span></span>  ]] )</div>  <p class="para rdfs-comment">   This functions returns the <code class="parameter">input</code> string   padded on the left, the right, or both sides to the specified   padding length. If the optional argument   <code class="parameter">pad_string</code> is not supplied, the   <code class="parameter">input</code> is padded with spaces, otherwise it   is padded with characters from <code class="parameter">pad_string</code>   up to the limit.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="int" name="pad_length"/>
		<param type="string" name="pad_string"/>
		<param type="int" name="pad_type"/>
	</params>
</keyword>
<keyword name="str_pad" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>str_pad</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pad_string</code><span class="initializer"> = &quot; &quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_type</code><span class="initializer"> = STR_PAD_RIGHT</span></span>  ]] )</div>  <p class="para rdfs-comment">   This functions returns the <code class="parameter">input</code> string   padded on the left, the right, or both sides to the specified   padding length. If the optional argument   <code class="parameter">pad_string</code> is not supplied, the   <code class="parameter">input</code> is padded with spaces, otherwise it   is padded with characters from <code class="parameter">pad_string</code>   up to the limit.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="int" name="pad_length"/>
		<param type="string" name="pad_string"/>
	</params>
</keyword>
<keyword name="str_pad" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>str_pad</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$pad_string</code><span class="initializer"> = &quot; &quot;</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$pad_type</code><span class="initializer"> = STR_PAD_RIGHT</span></span>  ]] )</div>  <p class="para rdfs-comment">   This functions returns the <code class="parameter">input</code> string   padded on the left, the right, or both sides to the specified   padding length. If the optional argument   <code class="parameter">pad_string</code> is not supplied, the   <code class="parameter">input</code> is padded with spaces, otherwise it   is padded with characters from <code class="parameter">pad_string</code>   up to the limit.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="int" name="pad_length"/>
	</params>
</keyword>
<keyword name="str_repeat" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>str_repeat</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$input</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$multiplier</code></span>   )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">input</code> repeated   <code class="parameter">multiplier</code> times.  </p>]]></desc>
	<params>
		<param type="string" name="input"/>
		<param type="int" name="mult"/>
	</params>
</keyword>
<keyword name="str_replace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string or an array with all occurrences of   <code class="parameter">search</code> in <code class="parameter">subject</code>   replaced with the given <code class="parameter">replace</code> value.  </p>  <p class="para">   If you don&#039;t need fancy replacing rules (like regular expressions), you   should always use this function instead of <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span>.  </p>]]></desc>
	<params>
		<param type="mixed" name="search"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
		<param type="int" name="&amp;replace_count"/>
	</params>
</keyword>
<keyword name="str_replace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$search</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replace</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$subject</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$count</code></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string or an array with all occurrences of   <code class="parameter">search</code> in <code class="parameter">subject</code>   replaced with the given <code class="parameter">replace</code> value.  </p>  <p class="para">   If you don&#039;t need fancy replacing rules (like regular expressions), you   should always use this function instead of <span class="function"><a href="function.preg-replace.php" class="function">preg_replace()</a></span>.  </p>]]></desc>
	<params>
		<param type="mixed" name="search"/>
		<param type="mixed" name="replace"/>
		<param type="mixed" name="subject"/>
	</params>
</keyword>
<keyword name="str_shuffle" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>str_shuffle</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>str_shuffle()</strong></span> shuffles a string.  One permutation   of all possible is created.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="str_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$split_length</code><span class="initializer"> = 1</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts a string to an array.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="split_length"/>
	</params>
</keyword>
<keyword name="str_split" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>str_split</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$split_length</code><span class="initializer"> = 1</span></span>  ] )</div>  <p class="para rdfs-comment">   Converts a string to an array.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="str_transliterate" type="function" returnType="string">
	<params>
		<param type="string" name="str"/>
		<param type="string" name="from_script"/>
		<param type="string" name="to_script"/>
		<param type="string" name="variant"/>
	</params>
</keyword>
<keyword name="str_transliterate" type="function" returnType="string">
	<params>
		<param type="string" name="str"/>
		<param type="string" name="from_script"/>
		<param type="string" name="to_script"/>
	</params>
</keyword>
<keyword name="str_word_count" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_word_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>  ]] )</div>  <p class="para rdfs-comment">   Counts the number of words inside <code class="parameter">string</code>.    If the optional <code class="parameter">format</code> is not specified, then    the return value will be an integer representing the number of words    found. In the event the <code class="parameter">format</code> is specified, the return   value will be an array, content of which is dependent on the    <code class="parameter">format</code>. The possible value for the    <code class="parameter">format</code> and the resultant outputs are listed below.  </p>  <p class="para">   For the purpose of this function, &#039;word&#039; is defined as a locale dependent   string containing alphabetic characters, which also may contain, but not start   with &quot;&#039;&quot; and &quot;-&quot; characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="format"/>
		<param type="string" name="charlist"/>
	</params>
</keyword>
<keyword name="str_word_count" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_word_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>  ]] )</div>  <p class="para rdfs-comment">   Counts the number of words inside <code class="parameter">string</code>.    If the optional <code class="parameter">format</code> is not specified, then    the return value will be an integer representing the number of words    found. In the event the <code class="parameter">format</code> is specified, the return   value will be an array, content of which is dependent on the    <code class="parameter">format</code>. The possible value for the    <code class="parameter">format</code> and the resultant outputs are listed below.  </p>  <p class="para">   For the purpose of this function, &#039;word&#039; is defined as a locale dependent   string containing alphabetic characters, which also may contain, but not start   with &quot;&#039;&quot; and &quot;-&quot; characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="format"/>
	</params>
</keyword>
<keyword name="str_word_count" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>str_word_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$format</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charlist</code></span>  ]] )</div>  <p class="para rdfs-comment">   Counts the number of words inside <code class="parameter">string</code>.    If the optional <code class="parameter">format</code> is not specified, then    the return value will be an integer representing the number of words    found. In the event the <code class="parameter">format</code> is specified, the return   value will be an array, content of which is dependent on the    <code class="parameter">format</code>. The possible value for the    <code class="parameter">format</code> and the resultant outputs are listed below.  </p>  <p class="para">   For the purpose of this function, &#039;word&#039; is defined as a locale dependent   string containing alphabetic characters, which also may contain, but not start   with &quot;&#039;&quot; and &quot;-&quot; characters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strcasecmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcasecmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   Binary safe case-insensitive string comparison.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="strchr" type="function" returnType="string">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.strstr.php" class="function">strstr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="strchr" type="function" returnType="string">
	<desc><![CDATA[<p class="simpara">   This function is an alias of:    <span class="function"><a href="function.strstr.php" class="function">strstr()</a></span>.  </p> </div>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strcmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="simpara">   Note that this comparison is case sensitive.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="strcoll" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcoll</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   Note that this comparison is case sensitive, and unlike   <span class="function"><a href="function.strcmp.php" class="function">strcmp()</a></span> this function is not binary safe.  </p>  <p class="para">   <span class="function"><strong>strcoll()</strong></span> uses the current locale for doing the   comparisons.  If the current locale is C or POSIX, this function is   equivalent to <span class="function"><a href="function.strcmp.php" class="function">strcmp()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
	</params>
</keyword>
<keyword name="strcspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the length of the initial segment of   <code class="parameter">str1</code> which does <em class="emphasis">not</em>   contain any of the characters in <code class="parameter">str2</code>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
		<param type="" name="start"/>
		<param type="" name="len"/>
	</params>
</keyword>
<keyword name="strcspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the length of the initial segment of   <code class="parameter">str1</code> which does <em class="emphasis">not</em>   contain any of the characters in <code class="parameter">str2</code>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
		<param type="" name="start"/>
	</params>
</keyword>
<keyword name="strcspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strcspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Returns the length of the initial segment of   <code class="parameter">str1</code> which does <em class="emphasis">not</em>   contain any of the characters in <code class="parameter">str2</code>.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
	</params>
</keyword>
<keyword name="stream_bucket_append" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>stream_bucket_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$brigade</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bucket</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="brigade"/>
		<param type="resource" name="bucket"/>
	</params>
</keyword>
<keyword name="stream_bucket_make_writeable" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>stream_bucket_make_writeable</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$brigade</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="brigade"/>
	</params>
</keyword>
<keyword name="stream_bucket_new" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>stream_bucket_new</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$buffer</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="buffer"/>
	</params>
</keyword>
<keyword name="stream_bucket_prepend" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>stream_bucket_prepend</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$brigade</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$bucket</code></span>   )</div>  <p class="para rdfs-comment">    This function can be called to prepend a bucket to a bucket brigade. It    is typically called from <span class="methodname"><a href="php-user-filter.filter.php" class="methodname">php_user_filter::filter()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="brigade"/>
		<param type="resource" name="bucket"/>
	</params>
</keyword>
<keyword name="stream_context_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_context_create</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Creates and returns a stream context with any options supplied in   <code class="parameter">options</code> preset.  </p>]]></desc>
	<params>
		<param type="array" name="options"/>
		<param type="array" name="params"/>
	</params>
</keyword>
<keyword name="stream_context_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_context_create</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Creates and returns a stream context with any options supplied in   <code class="parameter">options</code> preset.  </p>]]></desc>
	<params>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="stream_context_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_context_create</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Creates and returns a stream context with any options supplied in   <code class="parameter">options</code> preset.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="stream_context_get_default" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_context_get_default</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>  ] )</div>  <p class="simpara">   Returns the default stream context which is used whenever file operations   (<span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>, <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, etc...)   are called without a context parameter.  Options for the default context   can optionally be specified with this function using the same syntax as   <span class="function"><a href="function.stream-context-create.php" class="function">stream_context_create()</a></span>.  </p>]]></desc>
	<params>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="stream_context_get_default" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_context_get_default</strong></span>    ([ <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>  ] )</div>  <p class="simpara">   Returns the default stream context which is used whenever file operations   (<span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>, <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, etc...)   are called without a context parameter.  Options for the default context   can optionally be specified with this function using the same syntax as   <span class="function"><a href="function.stream-context-create.php" class="function">stream_context_create()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="stream_context_get_options" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_context_get_options</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream_or_context</code></span>   )</div>  <p class="simpara">   Returns an array of options on the specified stream or context.  </p>]]></desc>
	<params>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="stream_context_set_option" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_context_set_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream_or_context</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$wrapper</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>   <div class="methodsynopsis dc-description">    <span class="type">bool</span> <span class="methodname"><strong>stream_context_set_option</strong></span>     ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream_or_context</code></span>    , <span class="methodparam"><span class="type">array</span> <code class="parameter">$options</code></span>    )</div>  <p class="simpara">    Sets an option on the specified context.  <code class="parameter">value</code>    is set to <code class="parameter">option</code> for <code class="parameter">wrapper</code>  </p>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="string" name="wrappername"/>
		<param type="string" name="optionname"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="stream_context_set_params" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_context_set_params</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream_or_context</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$params</code></span>   )</div>  <p class="para rdfs-comment">   Sets parameters on the specified context.  </p>]]></desc>
	<params>
		<param type="resource" name="context"/>
		<param type="array" name="options"/>
	</params>
</keyword>
<keyword name="stream_copy_to_stream" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_copy_to_stream</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$source</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dest</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Makes a copy of up to <code class="parameter">maxlength</code> bytes   of data from the current position (or from the   <code class="parameter">offset</code> position, if specified) in   <code class="parameter">source</code> to <code class="parameter">dest</code>. If   <code class="parameter">maxlength</code> is not specified, all remaining content in   <code class="parameter">source</code> will be copied.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
		<param type="resource" name="dest"/>
		<param type="long" name="maxlen"/>
		<param type="long" name="pos"/>
	</params>
</keyword>
<keyword name="stream_copy_to_stream" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_copy_to_stream</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$source</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dest</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Makes a copy of up to <code class="parameter">maxlength</code> bytes   of data from the current position (or from the   <code class="parameter">offset</code> position, if specified) in   <code class="parameter">source</code> to <code class="parameter">dest</code>. If   <code class="parameter">maxlength</code> is not specified, all remaining content in   <code class="parameter">source</code> will be copied.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
		<param type="resource" name="dest"/>
		<param type="long" name="maxlen"/>
	</params>
</keyword>
<keyword name="stream_copy_to_stream" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_copy_to_stream</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$source</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$dest</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ]] )</div>  <p class="para rdfs-comment">   Makes a copy of up to <code class="parameter">maxlength</code> bytes   of data from the current position (or from the   <code class="parameter">offset</code> position, if specified) in   <code class="parameter">source</code> to <code class="parameter">dest</code>. If   <code class="parameter">maxlength</code> is not specified, all remaining content in   <code class="parameter">source</code> will be copied.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
		<param type="resource" name="dest"/>
	</params>
</keyword>
<keyword name="stream_default_encoding" type="function" returnType="bool">
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="stream_encoding" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_encoding</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="stream_encoding" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_encoding</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="stream_filter_append" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.    </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
		<param type="int" name="read_write"/>
		<param type="mixed" name="filterparams"/>
	</params>
</keyword>
<keyword name="stream_filter_append" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.    </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
		<param type="int" name="read_write"/>
	</params>
</keyword>
<keyword name="stream_filter_append" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_append</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.    </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
	</params>
</keyword>
<keyword name="stream_filter_prepend" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_prepend</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
		<param type="int" name="read_write"/>
		<param type="mixed" name="filterparams"/>
	</params>
</keyword>
<keyword name="stream_filter_prepend" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_prepend</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
		<param type="int" name="read_write"/>
	</params>
</keyword>
<keyword name="stream_filter_prepend" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_filter_prepend</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$read_write</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>  ]] )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">filtername</code> to the list of filters   attached to <code class="parameter">stream</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="filtername"/>
	</params>
</keyword>
<keyword name="stream_filter_register" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_filter_register</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filtername</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$classname</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>stream_filter_register()</strong></span> allows you to implement   your own filter on any registered stream used with all the other   filesystem functions (such as <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,   <span class="function"><a href="function.fread.php" class="function">fread()</a></span> etc.).  </p>]]></desc>
	<params>
		<param type="string" name="filtername"/>
		<param type="string" name="classname"/>
	</params>
</keyword>
<keyword name="stream_filter_remove" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_filter_remove</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream_filter</code></span>   )</div>  <p class="para rdfs-comment">   Removes a stream filter previously added to a stream with   <span class="function"><a href="function.stream-filter-prepend.php" class="function">stream_filter_prepend()</a></span> or   <span class="function"><a href="function.stream-filter-append.php" class="function">stream_filter_append()</a></span>.  Any data remaining in the   filter&#039;s internal buffer will be flushed through to the next filter before   removing it.  </p>]]></desc>
	<params>
		<param type="resource" name="stream_filter"/>
	</params>
</keyword>
<keyword name="stream_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_get_contents</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ]] )</div>  <p class="para rdfs-comment">    Identical to <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, except that   <span class="function"><strong>stream_get_contents()</strong></span> operates on an already open   stream resource and returns the remaining contents in a string, up to   <code class="parameter">maxlength</code> bytes and starting at the specified   <code class="parameter">offset</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
		<param type="long" name="maxlen"/>
		<param type="long" name="offset"/>
	</params>
</keyword>
<keyword name="stream_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_get_contents</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ]] )</div>  <p class="para rdfs-comment">    Identical to <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, except that   <span class="function"><strong>stream_get_contents()</strong></span> operates on an already open   stream resource and returns the remaining contents in a string, up to   <code class="parameter">maxlength</code> bytes and starting at the specified   <code class="parameter">offset</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
		<param type="long" name="maxlen"/>
	</params>
</keyword>
<keyword name="stream_get_contents" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_get_contents</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$maxlength</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = -1</span></span>  ]] )</div>  <p class="para rdfs-comment">    Identical to <span class="function"><a href="function.file-get-contents.php" class="function">file_get_contents()</a></span>, except that   <span class="function"><strong>stream_get_contents()</strong></span> operates on an already open   stream resource and returns the remaining contents in a string, up to   <code class="parameter">maxlength</code> bytes and starting at the specified   <code class="parameter">offset</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="source"/>
	</params>
</keyword>
<keyword name="stream_get_filters" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_get_filters</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Retrieve the list of registered filters on the running system.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="stream_get_line" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_get_line</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$ending</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets a line from the given handle.  </p>  <p class="para">   Reading ends when <code class="parameter">length</code> bytes have been read, when   the string specified by <code class="parameter">ending</code> is found (which is   <em class="emphasis">not</em> included in the return value), or on <acronym title="End Of File">EOF</acronym>   (whichever comes first).  </p>  <p class="para">   This function is nearly identical to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except in   that it allows end of line delimiters other than the standard \n, \r, and   \r\n, and does <em class="emphasis">not</em> return the delimiter itself.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="maxlen"/>
		<param type="string" name="ending"/>
	</params>
</keyword>
<keyword name="stream_get_line" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_get_line</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$ending</code></span>  ] )</div>  <p class="para rdfs-comment">   Gets a line from the given handle.  </p>  <p class="para">   Reading ends when <code class="parameter">length</code> bytes have been read, when   the string specified by <code class="parameter">ending</code> is found (which is   <em class="emphasis">not</em> included in the return value), or on <acronym title="End Of File">EOF</acronym>   (whichever comes first).  </p>  <p class="para">   This function is nearly identical to <span class="function"><a href="function.fgets.php" class="function">fgets()</a></span> except in   that it allows end of line delimiters other than the standard \n, \r, and   \r\n, and does <em class="emphasis">not</em> return the delimiter itself.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="maxlen"/>
	</params>
</keyword>
<keyword name="stream_get_meta_data" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_get_meta_data</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   )</div>  <p class="para rdfs-comment">   Returns information about an existing <code class="parameter">stream</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
	</params>
</keyword>
<keyword name="stream_get_transports" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_get_transports</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="simpara">   Returns an indexed array containing the name of all socket transports   available on the running system.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="stream_get_wrappers" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_get_wrappers</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Retrieve list of registered streams available on the running system.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="stream_is_local" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_is_local</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$stream_or_url</code></span>   )</div>  <p class="para rdfs-comment">   Checks if a stream, or a URL, is a local one or not.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
	</params>
</keyword>
<keyword name="stream_resolve_include_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_resolve_include_path</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>      )</div>  <p class="para rdfs-comment">   Resolve <code class="parameter">filename</code> against the include path according to the same rules as <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>/<span class="function"><a href="function.include.php" class="function">include</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="stream_resolve_include_path" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_resolve_include_path</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>      )</div>  <p class="para rdfs-comment">   Resolve <code class="parameter">filename</code> against the include path according to the same rules as <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>/<span class="function"><a href="function.include.php" class="function">include</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="stream_select" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_select</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$read</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$write</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$except</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$tv_sec</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$tv_usec</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>stream_select()</strong></span> function accepts arrays of streams and   waits for them to change status. Its operation is equivalent to that of   the <span class="function"><a href="function.socket-select.php" class="function">socket_select()</a></span> function except in that it acts on streams.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;read_streams"/>
		<param type="array" name="&amp;write_streams"/>
		<param type="array" name="&amp;except_streams"/>
		<param type="int" name="tv_sec"/>
		<param type="int" name="tv_usec"/>
	</params>
</keyword>
<keyword name="stream_select" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_select</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$read</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$write</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$except</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$tv_sec</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$tv_usec</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   The <span class="function"><strong>stream_select()</strong></span> function accepts arrays of streams and   waits for them to change status. Its operation is equivalent to that of   the <span class="function"><a href="function.socket-select.php" class="function">socket_select()</a></span> function except in that it acts on streams.  </p>]]></desc>
	<params>
		<param type="array" name="&amp;read_streams"/>
		<param type="array" name="&amp;write_streams"/>
		<param type="array" name="&amp;except_streams"/>
		<param type="int" name="tv_sec"/>
	</params>
</keyword>
<keyword name="stream_set_blocking" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_set_blocking</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$mode</code></span>   )</div>  <p class="para rdfs-comment">   Sets blocking or non-blocking mode on a <code class="parameter">stream</code>.  </p>  <p class="para">   This function works for any stream that supports non-blocking mode   (currently, regular files and socket streams).  </p>]]></desc>
	<params>
		<param type="resource" name="socket"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="stream_set_timeout" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_set_timeout</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$seconds</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$microseconds</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Sets the timeout value on <code class="parameter">stream</code>,   expressed in the sum of <code class="parameter">seconds</code> and   <code class="parameter">microseconds</code>.   </p>  <p class="para">   When the stream times out, the &#039;timed_out&#039; key of the array returned by   <span class="function"><a href="function.stream-get-meta-data.php" class="function">stream_get_meta_data()</a></span> is set to <strong><code>TRUE</code></strong>, although no   error/warning is generated.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="seconds"/>
		<param type="int" name="microseconds"/>
	</params>
</keyword>
<keyword name="stream_set_write_buffer" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_set_write_buffer</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$buffer</code></span>   )</div>  <p class="para rdfs-comment">   Sets the buffering for write operations on the given <code class="parameter">stream</code>   to <code class="parameter">buffer</code> bytes.  </p>  <p class="simpara">   Output using <span class="function"><a href="function.fwrite.php" class="function">fwrite()</a></span> is normally buffered at   8K.  This means that if there are two processes wanting to write   to the same output stream (a file), each is paused after 8K of   data to allow the other to write.  </p>]]></desc>
	<params>
		<param type="resource" name="fp"/>
		<param type="int" name="buffer"/>
	</params>
</keyword>
<keyword name="stream_socket_accept" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_accept</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server_socket</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$peername</code></span>  ]] )</div>  <p class="para rdfs-comment">   Accept a connection on a socket previously created by   <span class="function"><a href="function.stream-socket-server.php" class="function">stream_socket_server()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="serverstream"/>
		<param type="double" name="timeout"/>
		<param type="string" name="&amp;peername "/>
	</params>
</keyword>
<keyword name="stream_socket_accept" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_accept</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server_socket</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$peername</code></span>  ]] )</div>  <p class="para rdfs-comment">   Accept a connection on a socket previously created by   <span class="function"><a href="function.stream-socket-server.php" class="function">stream_socket_server()</a></span>.  </p>]]></desc>
	<params>
		<param type="resource" name="serverstream"/>
	</params>
</keyword>
<keyword name="stream_socket_client" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_client</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = STREAM_CLIENT_CONNECT</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Initiates a stream or datagram connection to the destination specified   by <code class="parameter">remote_socket</code>.  The type of socket created   is determined by the transport specified using standard URL formatting:   <em>transport://target</em>.  For Internet Domain sockets   (AF_INET) such as TCP and UDP, the <em>target</em> portion   of the <code class="parameter">remote_socket</code> parameter should consist of   a hostname or IP address followed by a colon and a port number.  For Unix   domain sockets, the <code class="parameter">target</code> portion should point   to the socket file on the filesystem.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The stream will by default be opened in blocking mode.  You can    switch it to non-blocking mode by using    <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="remoteaddress"/>
		<param type="long" name="&amp;errcode"/>
		<param type="string" name="&amp;errstring"/>
		<param type="double" name="timeout"/>
		<param type="long" name="flags"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="stream_socket_client" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_client</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$remote_socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">float</span> <code class="parameter">$timeout</code><span class="initializer"> = ini_get(&quot;default_socket_timeout&quot;)</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = STREAM_CLIENT_CONNECT</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   Initiates a stream or datagram connection to the destination specified   by <code class="parameter">remote_socket</code>.  The type of socket created   is determined by the transport specified using standard URL formatting:   <em>transport://target</em>.  For Internet Domain sockets   (AF_INET) such as TCP and UDP, the <em>target</em> portion   of the <code class="parameter">remote_socket</code> parameter should consist of   a hostname or IP address followed by a colon and a port number.  For Unix   domain sockets, the <code class="parameter">target</code> portion should point   to the socket file on the filesystem.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    The stream will by default be opened in blocking mode.  You can    switch it to non-blocking mode by using    <span class="function"><a href="function.stream-set-blocking.php" class="function">stream_set_blocking()</a></span>.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="remoteaddress"/>
	</params>
</keyword>
<keyword name="stream_socket_enable_crypto" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>stream_socket_enable_crypto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$enable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$crypto_type</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$session_stream</code></span>  ]] )</div>  <p class="simpara">   Enable or disable encryption on the stream.  </p>  <p class="simpara">   Once the crypto settings are established, cryptography can be turned   on and off dynamically by passing <strong><code>TRUE</code></strong> or <strong><code>FALSE</code></strong> in the   <code class="parameter">enable</code> parameter.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="bool" name="enable"/>
		<param type="int" name="cryptokind"/>
		<param type="resource" name="sessionstream"/>
	</params>
</keyword>
<keyword name="stream_socket_enable_crypto" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>stream_socket_enable_crypto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$enable</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$crypto_type</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$session_stream</code></span>  ]] )</div>  <p class="simpara">   Enable or disable encryption on the stream.  </p>  <p class="simpara">   Once the crypto settings are established, cryptography can be turned   on and off dynamically by passing <strong><code>TRUE</code></strong> or <strong><code>FALSE</code></strong> in the   <code class="parameter">enable</code> parameter.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="bool" name="enable"/>
	</params>
</keyword>
<keyword name="stream_socket_get_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_socket_get_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$want_peer</code></span>   )</div>  <p class="para rdfs-comment">   Returns the local or remote name of a given socket connection.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="bool" name="want_peer"/>
	</params>
</keyword>
<keyword name="stream_socket_pair" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>stream_socket_pair</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$domain</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$protocol</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>stream_socket_pair()</strong></span> creates a pair of connected,   indistinguishable socket streams. This function is commonly used in IPC   (Inter-Process Communication).       </p>]]></desc>
	<params>
		<param type="int" name="domain"/>
		<param type="int" name="type"/>
		<param type="int" name="protocol"/>
	</params>
</keyword>
<keyword name="stream_socket_recvfrom" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_socket_recvfrom</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>stream_socket_recvfrom()</strong></span> accepts   data from a remote socket up to <code class="parameter">length</code> bytes.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="long" name="amount"/>
		<param type="long" name="flags"/>
		<param type="string" name="&amp;remote_addr"/>
	</params>
</keyword>
<keyword name="stream_socket_recvfrom" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_socket_recvfrom</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>stream_socket_recvfrom()</strong></span> accepts   data from a remote socket up to <code class="parameter">length</code> bytes.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="long" name="amount"/>
		<param type="long" name="flags"/>
	</params>
</keyword>
<keyword name="stream_socket_recvfrom" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stream_socket_recvfrom</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>stream_socket_recvfrom()</strong></span> accepts   data from a remote socket up to <code class="parameter">length</code> bytes.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="long" name="amount"/>
	</params>
</keyword>
<keyword name="stream_socket_sendto" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_socket_sendto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends the specified <code class="parameter">data</code> through the   <code class="parameter">socket</code>.    </p>]]></desc>
	<params>
		<param type="resouce" name="stream"/>
		<param type="string" name="data"/>
		<param type="long" name="flags"/>
		<param type="string" name="target_addr"/>
	</params>
</keyword>
<keyword name="stream_socket_sendto" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_socket_sendto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends the specified <code class="parameter">data</code> through the   <code class="parameter">socket</code>.    </p>]]></desc>
	<params>
		<param type="resouce" name="stream"/>
		<param type="string" name="data"/>
		<param type="long" name="flags"/>
	</params>
</keyword>
<keyword name="stream_socket_sendto" type="function" returnType="long">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stream_socket_sendto</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$socket</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$address</code></span>  ]] )</div>  <p class="para rdfs-comment">   Sends the specified <code class="parameter">data</code> through the   <code class="parameter">socket</code>.    </p>]]></desc>
	<params>
		<param type="resouce" name="stream"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="stream_socket_server" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_server</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Creates a stream or datagram socket on the specified   <code class="parameter">local_socket</code>.      </p>  <p class="para">   This function only creates a socket, to begin accepting connections   use <span class="function"><a href="function.stream-socket-accept.php" class="function">stream_socket_accept()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="localaddress"/>
		<param type="long" name="&amp;errcode"/>
		<param type="string" name="&amp;errstring"/>
		<param type="long" name="flags"/>
		<param type="resource" name="context"/>
	</params>
</keyword>
<keyword name="stream_socket_server" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>stream_socket_server</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$local_socket</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter reference">&$errno</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$errstr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code><span class="initializer"> = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN</span></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ]]]] )</div>  <p class="para rdfs-comment">   Creates a stream or datagram socket on the specified   <code class="parameter">local_socket</code>.      </p>  <p class="para">   This function only creates a socket, to begin accepting connections   use <span class="function"><a href="function.stream-socket-accept.php" class="function">stream_socket_accept()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="localaddress"/>
	</params>
</keyword>
<keyword name="stream_socket_shutdown" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_socket_shutdown</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$stream</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$how</code></span>   )</div>  <p class="para rdfs-comment">   Shutdowns (partially or not) a full-duplex connection.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="int" name="how"/>
	</params>
</keyword>
<keyword name="stream_wrapper_register" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_wrapper_register</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$protocol</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$classname</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code> <span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Allows you to implement your own protocol handlers and streams for use   with all the other filesystem functions (such as <span class="function"><a href="function.fopen.php" class="function">fopen()</a></span>,   <span class="function"><a href="function.fread.php" class="function">fread()</a></span> etc.).  </p>]]></desc>
	<params>
		<param type="string" name="protocol"/>
		<param type="string" name="classname"/>
	</params>
</keyword>
<keyword name="stream_wrapper_restore" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_wrapper_restore</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$protocol</code></span>   )</div>  <p class="para rdfs-comment">   Restores a built-in wrapper previously unregistered with   <span class="function"><a href="function.stream-wrapper-unregister.php" class="function">stream_wrapper_unregister()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="protocol"/>
	</params>
</keyword>
<keyword name="stream_wrapper_unregister" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>stream_wrapper_unregister</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$protocol</code></span>   )</div>  <p class="para rdfs-comment">   Allows you to disable an already defined stream wrapper. Once the wrapper   has been disabled you may override it with a user-defined wrapper using   <span class="function"><a href="function.stream-wrapper-register.php" class="function">stream_wrapper_register()</a></span> or reenable it later on with   <span class="function"><a href="function.stream-wrapper-restore.php" class="function">stream_wrapper_restore()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="protocol"/>
	</params>
</keyword>
<keyword name="strftime" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strftime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Format the time and/or date according to locale settings. Month and weekday   names and other language-dependent strings respect the current locale set   with <span class="function"><a href="function.setlocale.php" class="function">setlocale()</a></span>.  </p>  <p class="para">   Not all conversion specifiers may be supported by your C library, in which   case they will not be supported by PHP&#039;s <span class="function"><strong>strftime()</strong></span>.   Additionally, not all platforms support negative timestamps, so your   date range may be limited to no earlier than the Unix epoch. This means that   %e, %T, %R and, %D (and possibly others) - as well as dates prior to   <em>Jan 1, 1970</em> - will not work on Windows, some Linux   distributions, and a few other operating systems. For Windows systems, a   complete overview of supported conversion specifiers can be found at   <a href="http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx" class="link external">&raquo;&nbsp;<acronym title="Microsoft Developer Network">MSDN</acronym></a>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="strftime" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strftime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Format the time and/or date according to locale settings. Month and weekday   names and other language-dependent strings respect the current locale set   with <span class="function"><a href="function.setlocale.php" class="function">setlocale()</a></span>.  </p>  <p class="para">   Not all conversion specifiers may be supported by your C library, in which   case they will not be supported by PHP&#039;s <span class="function"><strong>strftime()</strong></span>.   Additionally, not all platforms support negative timestamps, so your   date range may be limited to no earlier than the Unix epoch. This means that   %e, %T, %R and, %D (and possibly others) - as well as dates prior to   <em>Jan 1, 1970</em> - will not work on Windows, some Linux   distributions, and a few other operating systems. For Windows systems, a   complete overview of supported conversion specifiers can be found at   <a href="http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx" class="link external">&raquo;&nbsp;<acronym title="Microsoft Developer Network">MSDN</acronym></a>.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="strip_tags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strip_tags</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$allowable_tags</code></span>  ] )</div>  <p class="para rdfs-comment">   This function tries to return a string with all NULL bytes, HTML and PHP tags stripped   from a given <code class="parameter">str</code>.  It uses the same tag stripping   state machine as the <span class="function"><a href="function.fgetss.php" class="function">fgetss()</a></span> function.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="allowable_tags"/>
	</params>
</keyword>
<keyword name="strip_tags" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strip_tags</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$allowable_tags</code></span>  ] )</div>  <p class="para rdfs-comment">   This function tries to return a string with all NULL bytes, HTML and PHP tags stripped   from a given <code class="parameter">str</code>.  It uses the same tag stripping   state machine as the <span class="function"><a href="function.fgetss.php" class="function">fgetss()</a></span> function.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="stripcslashes" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stripcslashes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with backslashes stripped off. Recognizes   C-like <em>\n</em>, <em>\r</em> ..., octal   and hexadecimal representation.  </p>]]></desc>
	<params>
		<param type="binary" name="str"/>
	</params>
</keyword>
<keyword name="stripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the first occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>  <p class="para">   Unlike the <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span>, <span class="function"><strong>stripos()</strong></span> is   case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="stripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>stripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the first occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>  <p class="para">   Unlike the <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span>, <span class="function"><strong>stripos()</strong></span> is   case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="stripslashes" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stripslashes</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Un-quotes a quoted string.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If <a href="sybase.configuration.php#ini.magic-quotes-sybase" class="link">magic_quotes_sybase</a> is    on, no backslashes are stripped off but two apostrophes are replaced by    one instead.   </p>  </p></blockquote>  <p class="para">   An example use of <span class="function"><strong>stripslashes()</strong></span> is when the PHP   directive <a href="info.configuration.php#ini.magic-quotes-gpc" class="link">magic_quotes_gpc</a>   is <em>on</em> (it was on by default before PHP 5.4), and you aren&#039;t inserting   this data into a place (such as a database) that requires escaping.   For example, if you&#039;re simply outputting data straight from an HTML form.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="stristr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stristr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns all of <code class="parameter">haystack</code> starting from and including the first   occurrence of <code class="parameter">needle</code> to the end.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="stristr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>stristr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns all of <code class="parameter">haystack</code> starting from and including the first   occurrence of <code class="parameter">needle</code> to the end.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strlen" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strlen</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Returns the length of the given <code class="parameter">string</code>.   </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strnatcasecmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strnatcasecmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   This function implements a comparison algorithm that orders alphanumeric   strings in the way a human being would.  The behaviour of this function is   similar to <span class="function"><a href="function.strnatcmp.php" class="function">strnatcmp()</a></span>, except that the comparison is   not case sensitive.  For more information see: Martin Pool&#039;s <a href="http://sourcefrog.net/projects/natsort/" class="link external">&raquo;&nbsp;Natural Order String Comparison</a> page.  </p>]]></desc>
	<params>
		<param type="string" name="s1"/>
		<param type="string" name="s2"/>
	</params>
</keyword>
<keyword name="strnatcmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strnatcmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   )</div>  <p class="para rdfs-comment">   This function implements a comparison algorithm that orders   alphanumeric strings in the way a human being would, this is   described as a &quot;natural ordering&quot;.     Note that this comparison is case sensitive.  </p>]]></desc>
	<params>
		<param type="string" name="s1"/>
		<param type="string" name="s2"/>
	</params>
</keyword>
<keyword name="strncasecmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strncasecmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>   )</div>  <p class="para rdfs-comment">   This function is similar to <span class="function"><a href="function.strcasecmp.php" class="function">strcasecmp()</a></span>, with the   difference that you can specify the (upper limit of the) number of   characters from each string to be used in the comparison.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="strncmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strncmp</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str2</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$len</code></span>   )</div>  <p class="para rdfs-comment">   This function is similar to <span class="function"><a href="function.strcmp.php" class="function">strcmp()</a></span>, with the   difference that you can specify the (upper limit of the) number of   characters from each string to be used in the comparison.  </p>  <p class="para">   Note that this comparison is case sensitive.  </p>]]></desc>
	<params>
		<param type="string" name="str1"/>
		<param type="string" name="str2"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="strpbrk" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strpbrk</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$char_list</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>strpbrk()</strong></span> searches the <code class="parameter">haystack</code>   string for a <code class="parameter">char_list</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="char_list"/>
	</params>
</keyword>
<keyword name="strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the first occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="mixed" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="strpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>strpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the first occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="mixed" name="needle"/>
	</params>
</keyword>
<keyword name="strptime" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">     <span class="type">array</span> <span class="methodname"><strong>strptime</strong></span>      ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$date</code></span>     , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>     )</div>    <p class="para rdfs-comment">     <span class="function"><strong>strptime()</strong></span> returns an array with the     <code class="parameter">date</code> parsed, or <strong><code>FALSE</code></strong> on error.    </p>    <p class="para">     Month and weekday names and other language dependent strings respect the     current locale set with <span class="function"><a href="function.setlocale.php" class="function">setlocale()</a></span> (<strong><code>LC_TIME</code></strong>).    </p>]]></desc>
	<params>
		<param type="string" name="timestamp"/>
		<param type="string" name="format"/>
	</params>
</keyword>
<keyword name="strrchr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strrchr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   )</div>  <p class="para rdfs-comment">   This function returns the portion of <code class="parameter">haystack</code> which   starts at the last occurrence of <code class="parameter">needle</code> and goes   until the end of <code class="parameter">haystack</code>.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strrev" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strrev</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">string</code>, reversed.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the last occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>  <p class="para">    Unlike the <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span>, <span class="function"><strong>strripos()</strong></span> is   case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="strripos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strripos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the last occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>  <p class="para">    Unlike the <span class="function"><a href="function.strrpos.php" class="function">strrpos()</a></span>, <span class="function"><strong>strripos()</strong></span> is   case-insensitive.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the last occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="strrpos" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strrpos</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>  ] )</div>  <p class="para rdfs-comment">   Find the numeric position of the last occurrence of   <code class="parameter">needle</code> in the <code class="parameter">haystack</code> string.  </p>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mask</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Finds the length of the initial segment of <code class="parameter">subject</code>   that contains <em class="emphasis">only</em> characters from <code class="parameter">mask</code>.  </p>  <p class="para">   If <code class="parameter">start</code> and <code class="parameter">length</code>   are omitted, then all of <code class="parameter">subject</code> will be   examined. If they are included, then the effect will be the same as   calling <em>strspn(substr($subject, $start, $length),   $mask)</em> (see <a href="function.substr.php" class="xref">substr</a>   for more information).  </p>  <p class="para">   The line of code:   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strspn</span><span style="color: #007700">(</span><span style="color: #DD0000">"42&nbsp;is&nbsp;the&nbsp;answer&nbsp;to&nbsp;the&nbsp;128th&nbsp;question."</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"1234567890"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>   will assign <em>2</em> to <var class="varname"><var class="varname">$var</var></var>,   because the string &quot;42&quot; is the initial segment   of <code class="parameter">subject</code> that consists only of characters   contained within &quot;1234567890&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
		<param type="" name="start"/>
		<param type="" name="len"/>
	</params>
</keyword>
<keyword name="strspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mask</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Finds the length of the initial segment of <code class="parameter">subject</code>   that contains <em class="emphasis">only</em> characters from <code class="parameter">mask</code>.  </p>  <p class="para">   If <code class="parameter">start</code> and <code class="parameter">length</code>   are omitted, then all of <code class="parameter">subject</code> will be   examined. If they are included, then the effect will be the same as   calling <em>strspn(substr($subject, $start, $length),   $mask)</em> (see <a href="function.substr.php" class="xref">substr</a>   for more information).  </p>  <p class="para">   The line of code:   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strspn</span><span style="color: #007700">(</span><span style="color: #DD0000">"42&nbsp;is&nbsp;the&nbsp;answer&nbsp;to&nbsp;the&nbsp;128th&nbsp;question."</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"1234567890"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>   will assign <em>2</em> to <var class="varname"><var class="varname">$var</var></var>,   because the string &quot;42&quot; is the initial segment   of <code class="parameter">subject</code> that consists only of characters   contained within &quot;1234567890&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
		<param type="" name="start"/>
	</params>
</keyword>
<keyword name="strspn" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strspn</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$subject</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$mask</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   Finds the length of the initial segment of <code class="parameter">subject</code>   that contains <em class="emphasis">only</em> characters from <code class="parameter">mask</code>.  </p>  <p class="para">   If <code class="parameter">start</code> and <code class="parameter">length</code>   are omitted, then all of <code class="parameter">subject</code> will be   examined. If they are included, then the effect will be the same as   calling <em>strspn(substr($subject, $start, $length),   $mask)</em> (see <a href="function.substr.php" class="xref">substr</a>   for more information).  </p>  <p class="para">   The line of code:   <div class="informalexample">    <div class="example-contents"><div class="phpcode"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">strspn</span><span style="color: #007700">(</span><span style="color: #DD0000">"42&nbsp;is&nbsp;the&nbsp;answer&nbsp;to&nbsp;the&nbsp;128th&nbsp;question."</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"1234567890"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>    </div>   </div>   will assign <em>2</em> to <var class="varname"><var class="varname">$var</var></var>,   because the string &quot;42&quot; is the initial segment   of <code class="parameter">subject</code> that consists only of characters   contained within &quot;1234567890&quot;.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="mask"/>
	</params>
</keyword>
<keyword name="strstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strstr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns part of <code class="parameter">haystack</code> string starting from and including the first   occurrence of <code class="parameter">needle</code> to the end of   <code class="parameter">haystack</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function is case-sensitive. For case-insensitive searches, use    <span class="function"><a href="function.stristr.php" class="function">stristr()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you only want to determine if a particular <code class="parameter">needle</code>    occurs within <code class="parameter">haystack</code>, use the faster and less memory    intensive function <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span> instead.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="bool" name="part"/>
	</params>
</keyword>
<keyword name="strstr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strstr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$before_needle</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns part of <code class="parameter">haystack</code> string starting from and including the first   occurrence of <code class="parameter">needle</code> to the end of   <code class="parameter">haystack</code>.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function is case-sensitive. For case-insensitive searches, use    <span class="function"><a href="function.stristr.php" class="function">stristr()</a></span>.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you only want to determine if a particular <code class="parameter">needle</code>    occurs within <code class="parameter">haystack</code>, use the faster and less memory    intensive function <span class="function"><a href="function.strpos.php" class="function">strpos()</a></span> instead.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="strtok" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtok</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$token</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtok</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$token</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>strtok()</strong></span> splits a string (<code class="parameter">str</code>)   into smaller strings (tokens), with each token being delimited by any   character from <code class="parameter">token</code>.   That is, if you have a string like &quot;This is an example string&quot; you   could tokenize this string into its individual words by using the   space character as the token.  </p>  <p class="para">   Note that only the first call to strtok uses the string argument.   Every subsequent call to strtok only needs the token to use, as   it keeps track of where it is in the current string.  To start   over, or to tokenize a new string you simply call strtok with the   string argument again to initialize it.  Note that you may put   multiple tokens in the token parameter.  The string will be   tokenized when any one of the characters in the argument are   found.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="token"/>
	</params>
</keyword>
<keyword name="strtok" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtok</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$token</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtok</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$token</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>strtok()</strong></span> splits a string (<code class="parameter">str</code>)   into smaller strings (tokens), with each token being delimited by any   character from <code class="parameter">token</code>.   That is, if you have a string like &quot;This is an example string&quot; you   could tokenize this string into its individual words by using the   space character as the token.  </p>  <p class="para">   Note that only the first call to strtok uses the string argument.   Every subsequent call to strtok only needs the token to use, as   it keeps track of where it is in the current string.  To start   over, or to tokenize a new string you simply call strtok with the   string argument again to initialize it.  Note that you may put   multiple tokens in the token parameter.  The string will be   tokenized when any one of the characters in the argument are   found.  </p>]]></desc>
	<params>
		<param type="string" name="token"/>
	</params>
</keyword>
<keyword name="strtolower" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtolower</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">string</code> with all alphabetic characters   converted to lowercase.  </p>  <p class="para">   Note that &#039;alphabetic&#039; is determined by the current locale. This means   that in i.e. the default &quot;C&quot; locale, characters such as umlaut-A   (�) will not be converted.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strtotime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strtotime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$time</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$now</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="simpara">   The function expects to be given a string containing an English date format   and will try to parse that format into a Unix timestamp (the number of   seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given   in <code class="parameter">now</code>, or the current time if   <code class="parameter">now</code> is not supplied.  </p>  <p class="para">   Each parameter of this function uses the default time zone unless a   time zone is specified in that parameter.  Be careful not to use   different time zones in each parameter unless that is intended.   See <span class="function"><a href="function.date-default-timezone-get.php" class="function">date_default_timezone_get()</a></span> on the various   ways to define the default time zone.  </p>]]></desc>
	<params>
		<param type="string" name="time"/>
		<param type="int" name="now "/>
	</params>
</keyword>
<keyword name="strtotime" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>strtotime</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$time</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$now</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="simpara">   The function expects to be given a string containing an English date format   and will try to parse that format into a Unix timestamp (the number of   seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given   in <code class="parameter">now</code>, or the current time if   <code class="parameter">now</code> is not supplied.  </p>  <p class="para">   Each parameter of this function uses the default time zone unless a   time zone is specified in that parameter.  Be careful not to use   different time zones in each parameter unless that is intended.   See <span class="function"><a href="function.date-default-timezone-get.php" class="function">date_default_timezone_get()</a></span> on the various   ways to define the default time zone.  </p>]]></desc>
	<params>
		<param type="string" name="time"/>
	</params>
</keyword>
<keyword name="strtotitle" type="function" returnType="string">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strtoupper" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtoupper</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   )</div>  <p class="para rdfs-comment">   Returns <code class="parameter">string</code> with all alphabetic characters   converted to uppercase.  </p>  <p class="para">   Note that &#039;alphabetic&#039; is determined by the current locale. For instance,   in the default &quot;C&quot; locale characters such as umlaut-a (�) will not be   converted.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="strtr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$from</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$replace_pairs</code></span>   )</div>  <p class="para rdfs-comment">   If given three arguments, this function returns a copy of   <code class="parameter">str</code> where all occurrences of each (single-byte)   character in <code class="parameter">from</code> have been translated to the   corresponding character in <code class="parameter">to</code>, i.e., every   occurrence of <em>$from[$n]</em> has been replaced with   <em>$to[$n]</em>, where <em>$n</em> is a valid   offset in both arguments.  </p>  <p class="para">   If <code class="parameter">from</code> and <code class="parameter">to</code> have   different lengths, the extra characters in the longer of the two   are ignored. The length of <code class="parameter">str</code> will be the same as   the return value&#039;s.  </p>  <p class="para">   If given two arguments, the second should be an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> in the   form <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em>. The return value is   a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> where all the occurrences of the array keys have been   replaced by the corresponding values. The longest keys will be tried first.   Once a substring has been replaced, its new value will not be searched   again.  </p>  <p class="para">   In this case, the keys and the values may have any length, provided that   there is no empty key; additionally, the length of the return value may   differ from that of <code class="parameter">str</code>.   However, this function will be the most efficient when all the keys have the   same size.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="from"/>
		<param type="string" name="to"/>
	</params>
</keyword>
<keyword name="strtr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$from</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$to</code></span>   )</div>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strtr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$replace_pairs</code></span>   )</div>  <p class="para rdfs-comment">   If given three arguments, this function returns a copy of   <code class="parameter">str</code> where all occurrences of each (single-byte)   character in <code class="parameter">from</code> have been translated to the   corresponding character in <code class="parameter">to</code>, i.e., every   occurrence of <em>$from[$n]</em> has been replaced with   <em>$to[$n]</em>, where <em>$n</em> is a valid   offset in both arguments.  </p>  <p class="para">   If <code class="parameter">from</code> and <code class="parameter">to</code> have   different lengths, the extra characters in the longer of the two   are ignored. The length of <code class="parameter">str</code> will be the same as   the return value&#039;s.  </p>  <p class="para">   If given two arguments, the second should be an <span class="type"><a href="language.types.array.php" class="type array">array</a></span> in the   form <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em>. The return value is   a <span class="type"><a href="language.types.string.php" class="type string">string</a></span> where all the occurrences of the array keys have been   replaced by the corresponding values. The longest keys will be tried first.   Once a substring has been replaced, its new value will not be searched   again.  </p>  <p class="para">   In this case, the keys and the values may have any length, provided that   there is no empty key; additionally, the length of the return value may   differ from that of <code class="parameter">str</code>.   However, this function will be the most efficient when all the keys have the   same size.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="from"/>
	</params>
</keyword>
<keyword name="strval" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>strval</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   )</div>  <p class="simpara">   Get the string value of a variable.   See the documentation on <span class="type"><a href="language.types.string.php" class="type string">string</a></span> for more information   on converting to string.  </p>  <p class="simpara">   This function performs no formatting on the returned value. If you   are looking for a way to format a numeric value as a string, please   see <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span> or <span class="function"><a href="function.number-format.php" class="function">number_format()</a></span>.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the portion of <code class="parameter">string</code> specified by the   <code class="parameter">start</code> and <code class="parameter">length</code> parameters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="substr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>substr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   Returns the portion of <code class="parameter">string</code> specified by the   <code class="parameter">start</code> and <code class="parameter">length</code> parameters.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="start"/>
	</params>
</keyword>
<keyword name="substr_compare" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$main_str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$case_insensitivity</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_compare()</strong></span> compares <code class="parameter">main_str</code>   from position <code class="parameter">offset</code> with <code class="parameter">str</code>   up to <code class="parameter">length</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="main_str"/>
		<param type="string" name="str"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
		<param type="bool" name="case_sensitivity"/>
	</params>
</keyword>
<keyword name="substr_compare" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$main_str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$case_insensitivity</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_compare()</strong></span> compares <code class="parameter">main_str</code>   from position <code class="parameter">offset</code> with <code class="parameter">str</code>   up to <code class="parameter">length</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="main_str"/>
		<param type="string" name="str"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="substr_compare" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$main_str</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$case_insensitivity</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_compare()</strong></span> compares <code class="parameter">main_str</code>   from position <code class="parameter">offset</code> with <code class="parameter">str</code>   up to <code class="parameter">length</code> characters.  </p>]]></desc>
	<params>
		<param type="string" name="main_str"/>
		<param type="string" name="str"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="substr_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_count()</strong></span> returns the number of times the   <code class="parameter">needle</code> substring occurs in the   <code class="parameter">haystack</code> string. Please note that   <code class="parameter">needle</code> is case sensitive.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function doesn&#039;t count overlapped substrings. See the example below!   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
		<param type="int" name="length"/>
	</params>
</keyword>
<keyword name="substr_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_count()</strong></span> returns the number of times the   <code class="parameter">needle</code> substring occurs in the   <code class="parameter">haystack</code> string. Please note that   <code class="parameter">needle</code> is case sensitive.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function doesn&#039;t count overlapped substrings. See the example below!   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="substr_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>substr_count</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$haystack</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$needle</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$offset</code><span class="initializer"> = 0</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_count()</strong></span> returns the number of times the   <code class="parameter">needle</code> substring occurs in the   <code class="parameter">haystack</code> string. Please note that   <code class="parameter">needle</code> is case sensitive.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    This function doesn&#039;t count overlapped substrings. See the example below!   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="haystack"/>
		<param type="string" name="needle"/>
	</params>
</keyword>
<keyword name="substr_replace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>substr_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_replace()</strong></span> replaces a copy of   <code class="parameter">string</code> delimited by the   <code class="parameter">start</code> and (optionally)   <code class="parameter">length</code> parameters with the string given in   <code class="parameter">replacement</code>.   </p>]]></desc>
	<params>
		<param type="mixed" name="str"/>
		<param type="mixed" name="repl"/>
		<param type="mixed" name="start"/>
		<param type="mixed" name="length"/>
	</params>
</keyword>
<keyword name="substr_replace" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>substr_replace</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$string</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$replacement</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$start</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$length</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>substr_replace()</strong></span> replaces a copy of   <code class="parameter">string</code> delimited by the   <code class="parameter">start</code> and (optionally)   <code class="parameter">length</code> parameters with the string given in   <code class="parameter">replacement</code>.   </p>]]></desc>
	<params>
		<param type="mixed" name="str"/>
		<param type="mixed" name="repl"/>
		<param type="mixed" name="start"/>
	</params>
</keyword>
<keyword name="swfaction::__construct" type="function" returnType="void">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swfbitmap::__construct" type="function" returnType="void">
	<params>
		<param type="mixed" name="file"/>
		<param type="mixed" name="maskfile"/>
	</params>
</keyword>
<keyword name="swfbitmap::__construct" type="function" returnType="void">
	<params>
		<param type="mixed" name="file"/>
	</params>
</keyword>
<keyword name="swfbitmap::getHeight" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfbitmap::getWidth" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfbutton::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfbutton::addAction" type="function" returnType="void">
	<params>
		<param type="object" name="SWFAction"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swfbutton::addASound" type="function" returnType="SWFSoundInstance">
	<params>
		<param type="SWFSound" name="sound"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swfbutton::addShape" type="function" returnType="void">
	<params>
		<param type="object" name="SWFCharacter"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swfbutton::setAction" type="function" returnType="void">
	<params>
		<param type="object" name="SWFAction"/>
	</params>
</keyword>
<keyword name="swfbutton::setDown" type="function" returnType="void">
	<params>
		<param type="object" name="SWFCharacter"/>
	</params>
</keyword>
<keyword name="swfbutton::setHit" type="function" returnType="void">
	<params>
		<param type="object" name="SWFCharacter"/>
	</params>
</keyword>
<keyword name="swfbutton::setMenu" type="function" returnType="void">
	<params>
		<param type="int" name="flag"/>
	</params>
</keyword>
<keyword name="swfbutton::setOver" type="function" returnType="void">
	<params>
		<param type="object" name="SWFCharacter"/>
	</params>
</keyword>
<keyword name="swfbutton::setUp" type="function" returnType="void">
	<params>
		<param type="object" name="SWFCharacter"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::addAction" type="function" returnType="void">
	<params>
		<param type="object" name="SWFAction"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::addColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::addColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::endMask" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::move" type="function" returnType="void">
	<params>
		<param type="float" name="dx"/>
		<param type="float" name="dy"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::moveTo" type="function" returnType="void">
	<params>
		<param type="int" name="x"/>
		<param type="int" name="y"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::multColor" type="function" returnType="void">
	<params>
		<param type="float" name="r"/>
		<param type="float" name="g"/>
		<param type="float" name="b"/>
		<param type="float" name="a"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::multColor" type="function" returnType="void">
	<params>
		<param type="float" name="r"/>
		<param type="float" name="g"/>
		<param type="float" name="b"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::rotate" type="function" returnType="void">
	<params>
		<param type="float" name="degrees"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::rotateTo" type="function" returnType="void">
	<params>
		<param type="float" name="degrees"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::scale" type="function" returnType="void">
	<params>
		<param type="float" name="xScale"/>
		<param type="float" name="yScale"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::scaleTo" type="function" returnType="void">
	<params>
		<param type="float" name="xScale"/>
		<param type="float" name="yScale"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::scaleTo" type="function" returnType="void">
	<params>
		<param type="float" name="xScale"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::setDepth" type="function" returnType="void">
	<params>
		<param type="int" name="depth"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::setMaskLevel" type="function" returnType="void">
	<params>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::setMatrix" type="function" returnType="void">
	<params>
		<param type="float" name="a"/>
		<param type="float" name="b"/>
		<param type="float" name="c"/>
		<param type="float" name="d"/>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::setName" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::setRatio" type="function" returnType="void">
	<params>
		<param type="float" name="ratio"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::skewX" type="function" returnType="void">
	<params>
		<param type="float" name="xSkew"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::skewXTo" type="function" returnType="void">
	<params>
		<param type="float" name="xSkew"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::skewY" type="function" returnType="void">
	<params>
		<param type="float" name="ySkew"/>
	</params>
</keyword>
<keyword name="swfdisplayitem::skewYTo" type="function" returnType="void">
	<params>
		<param type="float" name="ySkew"/>
	</params>
</keyword>
<keyword name="swffill::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swffill::moveTo" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swffill::rotateTo" type="function" returnType="void">
	<params>
		<param type="float" name="degrees"/>
	</params>
</keyword>
<keyword name="swffill::scaleTo" type="function" returnType="void">
	<params>
		<param type="float" name="xScale"/>
		<param type="float" name="yScale"/>
	</params>
</keyword>
<keyword name="swffill::scaleTo" type="function" returnType="void">
	<params>
		<param type="float" name="xScale"/>
	</params>
</keyword>
<keyword name="swffill::skewXTo" type="function" returnType="void">
	<params>
		<param type="float" name="xSkew"/>
	</params>
</keyword>
<keyword name="swffill::skewYTo" type="function" returnType="void">
	<params>
		<param type="float" name="ySkew"/>
	</params>
</keyword>
<keyword name="swffont::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="swffont::addChars" type="function" returnType="void">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swffont::getAscent" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swffont::getDescent" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swffont::getLeading" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swffont::getShape" type="function" returnType="string">
	<params>
		<param type="e"/>
	</params>
</keyword>
<keyword name="swffont::getWideWidth" type="function" returnType="int">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swffont::getWidth" type="function" returnType="float">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="swffontcha::raddChars" type="function" returnType="void">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swffontchar::addChars" type="function" returnType="void">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swfgradient::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfgradient::addEntry" type="function" returnType="void">
	<params>
		<param type="float" name="ratio"/>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swfgradient::addEntry" type="function" returnType="void">
	<params>
		<param type="float" name="ratio"/>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfmorph::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfmovie::__construct" type="function" returnType="void">
	<params>
		<param type="int" name="version"/>
	</params>
</keyword>
<keyword name="swfmovie::add" type="function" returnType="object">
	<params>
		<param type="object" name="SWFBlock"/>
	</params>
</keyword>
<keyword name="swfmovie::labelframe" type="function" returnType="void">
	<params>
		<param type="string" name="label"/>
	</params>
</keyword>
<keyword name="swfmovie::namedanchor" type="function" returnType="void">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="swfmovie::nextframe" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfmovie::output" type="function" returnType="int">
	<params>
		<param type="int" name="compression"/>
	</params>
</keyword>
<keyword name="swfmovie::output" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="swfmovie::protect" type="function" returnType="void">
	<params>
		<param type="string" name="pasword"/>
	</params>
</keyword>
<keyword name="swfmovie::protect" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="swfmovie::remove" type="function" returnType="void">
	<params>
		<param type="object" name="SWFBlock"/>
	</params>
</keyword>
<keyword name="swfmovie::save" type="function" returnType="int">
	<params>
		<param type="mixed" name="where"/>
		<param type="int" name="compression"/>
	</params>
</keyword>
<keyword name="swfmovie::save" type="function" returnType="int">
	<params>
		<param type="mixed" name="where"/>
	</params>
</keyword>
<keyword name="swfmovie::saveToFile" type="function" returnType="int">
	<params>
		<param type="stream" name="x"/>
		<param type="int" name="compression"/>
	</params>
</keyword>
<keyword name="swfmovie::saveToFile" type="function" returnType="int">
	<params>
		<param type="stream" name="x"/>
	</params>
</keyword>
<keyword name="swfmovie::setBackground" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfmovie::setDimension" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swfmovie::setFrames" type="function" returnType="void">
	<params>
		<param type="int" name="frames"/>
	</params>
</keyword>
<keyword name="swfmovie::setRate" type="function" returnType="void">
	<params>
		<param type="float" name="rate"/>
	</params>
</keyword>
<keyword name="swfprebuiltclip_init" type="function" returnType="void">
	<params>
		<param type="mixed" name="file"/>
	</params>
</keyword>
<keyword name="swfprebuiltclip_init" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="swfshape::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfshape::addfill" type="function" returnType="object">
	<params>
		<param type="mixed" name="arg1"/>
		<param type="int" name="arg2"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swfshape::addfill" type="function" returnType="object">
	<params>
		<param type="mixed" name="arg1"/>
		<param type="int" name="arg2"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfshape::addfill" type="function" returnType="object">
	<params>
		<param type="mixed" name="arg1"/>
		<param type="int" name="arg2"/>
	</params>
</keyword>
<keyword name="swfshape::drawarc" type="function" returnType="void">
	<params>
		<param type="float" name="r"/>
		<param type="float" name="startAngle"/>
		<param type="float" name="endAngle"/>
	</params>
</keyword>
<keyword name="swfshape::drawcircle" type="function" returnType="void">
	<params>
		<param type="float" name="r"/>
	</params>
</keyword>
<keyword name="swfshape::drawcubic" type="function" returnType="void">
	<params>
		<param type="float" name="bx"/>
		<param type="float" name="by"/>
		<param type="float" name="cx"/>
		<param type="float" name="cy"/>
		<param type="float" name="dx"/>
		<param type="float" name="dy"/>
	</params>
</keyword>
<keyword name="swfshape::drawcurve" type="function" returnType="void">
	<params>
		<param type="float" name="adx"/>
		<param type="float" name="ady"/>
		<param type="float" name="bdx"/>
		<param type="float" name="bdy"/>
		<param type="float" name="cdx"/>
		<param type="float" name="cdy"/>
	</params>
</keyword>
<keyword name="swfshape::drawcurve" type="function" returnType="void">
	<params>
		<param type="float" name="adx"/>
		<param type="float" name="ady"/>
		<param type="float" name="bdx"/>
		<param type="float" name="bdy"/>
	</params>
</keyword>
<keyword name="swfshape::drawcurveto" type="function" returnType="void">
	<params>
		<param type="float" name="ax"/>
		<param type="float" name="ay"/>
		<param type="float" name="bx"/>
		<param type="float" name="by"/>
		<param type="float" name="dx"/>
		<param type="float" name="dy"/>
	</params>
</keyword>
<keyword name="swfshape::drawcurveto" type="function" returnType="void">
	<params>
		<param type="float" name="ax"/>
		<param type="float" name="ay"/>
		<param type="float" name="bx"/>
		<param type="float" name="by"/>
	</params>
</keyword>
<keyword name="swfshape::drawglyph" type="function" returnType="void">
	<params>
		<param type="SWFFont" name="font"/>
		<param type="string" name="character"/>
		<param type="int" name="size"/>
	</params>
</keyword>
<keyword name="swfshape::drawglyph" type="function" returnType="void">
	<params>
		<param type="SWFFont" name="font"/>
		<param type="string" name="character"/>
	</params>
</keyword>
<keyword name="swfshape::drawline" type="function" returnType="void">
	<params>
		<param type="float" name="dx"/>
		<param type="float" name="dy"/>
	</params>
</keyword>
<keyword name="swfshape::drawlineto" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swfshape::movepen" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swfshape::movepento" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swfshape::setleftfill" type="function" returnType="void">
	<params>
		<param type="int" name="arg1"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swfshape::setleftfill" type="function" returnType="void">
	<params>
		<param type="int" name="arg1"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfshape::setleftfill" type="function" returnType="void">
	<params>
		<param type="int" name="arg1"/>
	</params>
</keyword>
<keyword name="swfshape::setline" type="function" returnType="void">
	<params>
		<param type="int" name="width"/>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swfshape::setline" type="function" returnType="void">
	<params>
		<param type="int" name="width"/>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swfsound::__construct" type="function" returnType="void">
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swfsprite::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfsprite::add" type="function" returnType="object">
	<params>
		<param type="object" name="SWFCharacter"/>
	</params>
</keyword>
<keyword name="swfsprite::labelFrame" type="function" returnType="void">
	<params>
		<param type="string" name="label"/>
	</params>
</keyword>
<keyword name="swfsprite::nextFrame" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swfsprite::remove" type="function" returnType="void">
	<params>
		<param type="object" name="SWFDisplayItem"/>
	</params>
</keyword>
<keyword name="swfsprite::setFrames" type="function" returnType="void">
	<params>
		<param type="int" name="frames"/>
	</params>
</keyword>
<keyword name="swftext::__construct" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swftext::addString" type="function" returnType="void">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="swftext::addWideString" type="function" returnType="void">
	<params>
		<param type="string" name="text"/>
	</params>
</keyword>
<keyword name="swftext::getAscent" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swftext::getDescent" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swftext::getLeading" type="function" returnType="float">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="swftext::getWideWidth" type="function" returnType="double">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swftext::getWidth" type="function" returnType="float">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="swftext::moveTo" type="function" returnType="void">
	<params>
		<param type="float" name="x"/>
		<param type="float" name="y"/>
	</params>
</keyword>
<keyword name="swftext::setColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swftext::setColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swftext::setFont" type="function" returnType="void">
	<params>
		<param type="object" name="font"/>
	</params>
</keyword>
<keyword name="swftext::setHeight" type="function" returnType="void">
	<params>
		<param type="float" name="height"/>
	</params>
</keyword>
<keyword name="swftext::setSpacing" type="function" returnType="void">
	<params>
		<param type="float" name="spacing"/>
	</params>
</keyword>
<keyword name="swftextfield::__construct" type="function" returnType="void">
	<params>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="swftextfield::__construct" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="swftextfield::addChars" type="function" returnType="void">
	<params>
		<param type="g"/>
	</params>
</keyword>
<keyword name="swftextfield::addString" type="function" returnType="void">
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="swftextfield::align" type="function" returnType="void">
	<params>
		<param type="int" name="alignment"/>
	</params>
</keyword>
<keyword name="swftextfield::setBounds" type="function" returnType="void">
	<params>
		<param type="float" name="width"/>
		<param type="float" name="height"/>
	</params>
</keyword>
<keyword name="swftextfield::setColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
		<param type="int" name="a"/>
	</params>
</keyword>
<keyword name="swftextfield::setColor" type="function" returnType="void">
	<params>
		<param type="int" name="r"/>
		<param type="int" name="g"/>
		<param type="int" name="b"/>
	</params>
</keyword>
<keyword name="swftextfield::setFont" type="function" returnType="void">
	<params>
		<param type="object" name="font"/>
	</params>
</keyword>
<keyword name="swftextfield::setHeight" type="function" returnType="void">
	<params>
		<param type="float" name="height"/>
	</params>
</keyword>
<keyword name="swftextfield::setIndentation" type="function" returnType="void">
	<params>
		<param type="float" name="indentation"/>
	</params>
</keyword>
<keyword name="swftextfield::setLeftMargin" type="function" returnType="void">
	<params>
		<param type="float" name="margin"/>
	</params>
</keyword>
<keyword name="swftextfield::setLineSpacing" type="function" returnType="void">
	<params>
		<param type="float" name="space"/>
	</params>
</keyword>
<keyword name="swftextfield::setMargins" type="function" returnType="void">
	<params>
		<param type="float" name="left"/>
		<param type="float" name="right"/>
	</params>
</keyword>
<keyword name="swftextfield::setName" type="function" returnType="void">
	<params>
		<param type="string" name="var_name"/>
	</params>
</keyword>
<keyword name="swftextfield::setPadding" type="function" returnType="void">
	<params>
		<param type="float" name="padding"/>
	</params>
</keyword>
<keyword name="swftextfield::setRightMargin" type="function" returnType="void">
	<params>
		<param type="float" name="margin"/>
	</params>
</keyword>
<keyword name="swfvideostream_init" type="function" returnType="void">
	<params>
		<param type="mixed" name="file"/>
	</params>
</keyword>
<keyword name="swfvideostream_init" type="function" returnType="void">
	<params>
	</params>
</keyword>
<keyword name="sybase_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sybase_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_affected_rows()</strong></span> returns the number of   rows affected by the last INSERT, UPDATE or DELETE query on the   server associated with the specified link identifier.    </p>  <p class="para">   This command is not effective for SELECT statements, only on   statements which modify records. To retrieve the number of rows   returned from a SELECT, use <span class="function"><a href="function.sybase-num-rows.php" class="function">sybase_num_rows()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="link_id"/>
	</params>
</keyword>
<keyword name="sybase_affected_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sybase_affected_rows</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_affected_rows()</strong></span> returns the number of   rows affected by the last INSERT, UPDATE or DELETE query on the   server associated with the specified link identifier.    </p>  <p class="para">   This command is not effective for SELECT statements, only on   statements which modify records. To retrieve the number of rows   returned from a SELECT, use <span class="function"><a href="function.sybase-num-rows.php" class="function">sybase_num_rows()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="sybase_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_close()</strong></span> closes the link to a Sybase   database that&#039;s associated with the specified link   <code class="parameter">link_identifier</code>.  </p>  <p class="para">   Note that this isn&#039;t usually necessary, as non-persistent   open links are automatically closed at the end of the script&#039;s   execution.  </p>  <p class="para">   <span class="function"><strong>sybase_close()</strong></span> will not close persistent links   generated by <span class="function"><a href="function.sybase-pconnect.php" class="function">sybase_pconnect()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="link_id"/>
	</params>
</keyword>
<keyword name="sybase_close" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_close</strong></span>    ([ <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_close()</strong></span> closes the link to a Sybase   database that&#039;s associated with the specified link   <code class="parameter">link_identifier</code>.  </p>  <p class="para">   Note that this isn&#039;t usually necessary, as non-persistent   open links are automatically closed at the end of the script&#039;s   execution.  </p>  <p class="para">   <span class="function"><strong>sybase_close()</strong></span> will not close persistent links   generated by <span class="function"><a href="function.sybase-pconnect.php" class="function">sybase_pconnect()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
		<param type="string" name="appname"/>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="sybase_connect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_connect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$new</code><span class="initializer"> = false</span></span>  ]]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_connect()</strong></span> establishes a connection to a   Sybase server.   </p>  <p class="para">   In case a second call is made to   <span class="function"><strong>sybase_connect()</strong></span> with the same arguments, no   new link will be established, but instead, the link identifier of   the already opened link will be returned.  </p>  <p class="para">   The link to the server will be closed as soon as the   execution of the script ends, unless it&#039;s closed earlier by   explicitly calling <span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span>.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="sybase_data_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_data_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result_identifier</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row_number</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_data_seek()</strong></span> moves the internal row   pointer of the Sybase result associated with the specified result   identifier to pointer to the specified row number.  The next call   to <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span> would return that row.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="sybase_deadlock_retry_count" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sybase_deadlock_retry_count</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$retry_count</code></span>   )</div>  <p class="para rdfs-comment">   Using <span class="function"><strong>sybase_deadlock_retry_count()</strong></span>, the number of retries   can be defined in cases of deadlocks. By default, every deadlock is retried   an infinite number of times or until the process is killed by Sybase, the   executing script is killed (for instance, by <span class="function"><a href="function.set-time-limit.php" class="function">set_time_limit()</a></span>)   or the query succeeds.  </p>]]></desc>
	<params>
		<param type="int" name="retry_count"/>
	</params>
</keyword>
<keyword name="sybase_fetch_array" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sybase_fetch_array</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_array()</strong></span> is an extended version of   <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span>.  In addition to storing the   data in the numeric indices of the result array, it also stores   the data in associative indices, using the field names as keys.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>sybase_fetch_array()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_fetch_assoc" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sybase_fetch_assoc</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_assoc()</strong></span> is a version of   <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span> that uses column names   instead of integers for indices in the result array. Columns from   different tables with the same names are returned as   name, name1, name2, ..., nameN.  </p>  <p class="para">   An important thing to note is that using   <span class="function"><strong>sybase_fetch_assoc()</strong></span> is NOT significantly   slower than using <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span>, while it   provides a significant added value.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sybase_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_field()</strong></span> can be used in order to   obtain information about fields in a certain query result.   </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="sybase_fetch_field" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sybase_fetch_field</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_field()</strong></span> can be used in order to   obtain information about fields in a certain query result.   </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_fetch_object" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">object</span> <span class="methodname"><strong>sybase_fetch_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$object</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_object()</strong></span> is similar to   <span class="function"><a href="function.sybase-fetch-assoc.php" class="function">sybase_fetch_assoc()</a></span>, with one difference - an object   is returned, instead of an array.  </p>  <p class="para">   Speed-wise, the function is identical to   <span class="function"><a href="function.sybase-fetch-array.php" class="function">sybase_fetch_array()</a></span>, and almost as quick as   <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span> (the difference is insignificant).  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_fetch_row" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sybase_fetch_row</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_fetch_row()</strong></span> fetches one row of data   from the result associated with the specified result identifier.  </p>  <p class="para">   Subsequent call to <span class="function"><strong>sybase_fetch_row()</strong></span> would   return the next row in the result set, or <strong><code>FALSE</code></strong> if there are no   more rows.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_field_seek" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_field_seek</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$field_offset</code></span>   )</div>  <p class="para rdfs-comment">   Seeks to the specified field offset.  If the next call to   <span class="function"><a href="function.sybase-fetch-field.php" class="function">sybase_fetch_field()</a></span> won&#039;t include a field   offset, this field would be returned.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="sybase_free_result" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_free_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_free_result()</strong></span> only needs to be called   if you are worried about using too much memory while your script   is running. All result memory will automatically be freed when   the script ends. You may call <span class="function"><strong>sybase_free_result()</strong></span>   with the result identifier as an argument and the associated   result memory will be freed.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_get_last_message" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sybase_get_last_message</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_get_last_message()</strong></span> returns the last   message reported by the server.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="sybase_min_client_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sybase_min_client_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_min_client_severity()</strong></span> sets the minimum   client severity level.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="sybase_min_error_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sybase_min_error_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_min_error_severity()</strong></span> sets the minimum   error severity level.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="sybase_min_message_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sybase_min_message_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_min_message_severity()</strong></span> sets the minimum   message severity level.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="sybase_min_server_severity" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>sybase_min_server_severity</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$severity</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_min_server_severity()</strong></span> sets the minimum   server severity level.  </p>]]></desc>
	<params>
		<param type="int" name="severity"/>
	</params>
</keyword>
<keyword name="sybase_num_fields" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sybase_num_fields</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_num_fields()</strong></span> returns the number of fields in a   result set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_num_rows" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>sybase_num_rows</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_num_rows()</strong></span> returns the number of rows in a   result set.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
		<param type="string" name="appname"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
		<param type="string" name="charset"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
		<param type="string" name="password"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
		<param type="string" name="user"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
		<param type="string" name="host"/>
	</params>
</keyword>
<keyword name="sybase_pconnect" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_pconnect</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$servername</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$username</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$password</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$charset</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$appname</code></span>  ]]]]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_pconnect()</strong></span> acts very much like   <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> with two major differences.  </p>  <p class="para">   First, when connecting, the function would first try to find a   (persistent) link that&#039;s already open with the same host,   username and password.  If one is found, an identifier for it   will be returned instead of opening a new connection.  </p>  <p class="para">   Second, the connection to the SQL server will not be closed when   the execution of the script ends.  Instead, the link will remain   open for future use (<span class="function"><a href="function.sybase-close.php" class="function">sybase_close()</a></span> will not   close links established by <span class="function"><strong>sybase_pconnect()</strong></span>).  </p>  <p class="para">   This type of links is therefore called &#039;persistent&#039;.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="sybase_query" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sybase_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_query()</strong></span> sends a query to the currently   active database on the server that&#039;s associated with the specified   link identifier.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="int" name="link_id"/>
	</params>
</keyword>
<keyword name="sybase_query" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>sybase_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_query()</strong></span> sends a query to the currently   active database on the server that&#039;s associated with the specified   link identifier.  </p>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="sybase_result" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sybase_result</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$result</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$row</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$field</code></span>   )</div>  <p class="para rdfs-comment">   Returns the contents of the cell at the row and offset in   the specified Sybase result set.  </p>  <p class="para">   When working on large result sets, you should consider using one   of the functions that fetch an entire row (specified below).  As   these functions return the contents of multiple cells in one   function call, they&#039;re MUCH quicker than sybase_result().  Also,   note that specifying a numeric offset for the field argument is   much quicker than specifying a fieldname or tablename.fieldname   argument.  </p>  <p class="para">   Recommended high-performance alternatives:   <span class="function"><a href="function.sybase-fetch-row.php" class="function">sybase_fetch_row()</a></span>,   <span class="function"><a href="function.sybase-fetch-array.php" class="function">sybase_fetch_array()</a></span> and   <span class="function"><a href="function.sybase-fetch-object.php" class="function">sybase_fetch_object()</a></span>.  </p>]]></desc>
	<params>
		<param type="int" name="result"/>
		<param type="int" name="row"/>
		<param type="mixed" name="field"/>
	</params>
</keyword>
<keyword name="sybase_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_select_db()</strong></span> sets the current active   database on the server that&#039;s associated with the specified link   identifier.    </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.sybase-query.php" class="function">sybase_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
		<param type="int" name="link_id"/>
	</params>
</keyword>
<keyword name="sybase_select_db" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_select_db</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$database_name</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_select_db()</strong></span> sets the current active   database on the server that&#039;s associated with the specified link   identifier.    </p>  <p class="para">   Every subsequent call to <span class="function"><a href="function.sybase-query.php" class="function">sybase_query()</a></span> will be   made on the active database.  </p>]]></desc>
	<params>
		<param type="string" name="database"/>
	</params>
</keyword>
<keyword name="sybase_set_message_handler" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_set_message_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_set_message_handler()</strong></span> sets a user function to   handle messages generated by the server. You may specify the name of a   global function, or use an array to specify an object reference and a   method name.  </p>]]></desc>
	<params>
		<param type="mixed" name="error_func"/>
		<param type="resource" name="connection"/>
	</params>
</keyword>
<keyword name="sybase_set_message_handler" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>sybase_set_message_handler</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_set_message_handler()</strong></span> sets a user function to   handle messages generated by the server. You may specify the name of a   global function, or use an array to specify an object reference and a   method name.  </p>]]></desc>
	<params>
		<param type="mixed" name="error_func"/>
	</params>
</keyword>
<keyword name="sybase_unbuffered_query" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$store_result</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_unbuffered_query()</strong></span> sends a query to the   currently active database on the server that&#039;s associated with the specified   link identifier.  If the link identifier isn&#039;t specified, the last   opened link is assumed.  If no link is open, the function tries to   establish a link as if <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> was   called, and use it.  </p>  <p class="para">   Unlike <span class="function"><a href="function.sybase-query.php" class="function">sybase_query()</a></span>,   <span class="function"><strong>sybase_unbuffered_query()</strong></span> reads only the first   row of the result set. <span class="function"><a href="function.sybase-fetch-array.php" class="function">sybase_fetch_array()</a></span> and similar   function read more rows as needed.  <span class="function"><a href="function.sybase-data-seek.php" class="function">sybase_data_seek()</a></span>   reads up to the target row.  The behavior may produce better performance   for large result sets.  </p>  <p class="para">   <span class="function"><a href="function.sybase-num-rows.php" class="function">sybase_num_rows()</a></span> will only return the correct number   of rows if all result sets have been read. To Sybase, the number of rows   is not known and is therefore computed by the client implementation.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you don&#039;t read all of the resultsets prior to executing the next query,    PHP will raise a warning and cancel all of the pending results. To get rid of    this, use <span class="function"><a href="function.sybase-free-result.php" class="function">sybase_free_result()</a></span> which will cancel pending    results of an unbuffered query.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
		<param type="int" name="link_id"/>
	</params>
</keyword>
<keyword name="sybase_unbuffered_query" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>sybase_unbuffered_query</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$query</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$link_identifier</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$store_result</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>sybase_unbuffered_query()</strong></span> sends a query to the   currently active database on the server that&#039;s associated with the specified   link identifier.  If the link identifier isn&#039;t specified, the last   opened link is assumed.  If no link is open, the function tries to   establish a link as if <span class="function"><a href="function.sybase-connect.php" class="function">sybase_connect()</a></span> was   called, and use it.  </p>  <p class="para">   Unlike <span class="function"><a href="function.sybase-query.php" class="function">sybase_query()</a></span>,   <span class="function"><strong>sybase_unbuffered_query()</strong></span> reads only the first   row of the result set. <span class="function"><a href="function.sybase-fetch-array.php" class="function">sybase_fetch_array()</a></span> and similar   function read more rows as needed.  <span class="function"><a href="function.sybase-data-seek.php" class="function">sybase_data_seek()</a></span>   reads up to the target row.  The behavior may produce better performance   for large result sets.  </p>  <p class="para">   <span class="function"><a href="function.sybase-num-rows.php" class="function">sybase_num_rows()</a></span> will only return the correct number   of rows if all result sets have been read. To Sybase, the number of rows   is not known and is therefore computed by the client implementation.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If you don&#039;t read all of the resultsets prior to executing the next query,    PHP will raise a warning and cancel all of the pending results. To get rid of    this, use <span class="function"><a href="function.sybase-free-result.php" class="function">sybase_free_result()</a></span> which will cancel pending    results of an unbuffered query.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="string" name="query"/>
	</params>
</keyword>
<keyword name="symlink" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>symlink</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$link</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>symlink()</strong></span> creates a symbolic link to the existing   <code class="parameter">target</code> with the specified name   <code class="parameter">link</code>.  </p>]]></desc>
	<params>
		<param type="string" name="target"/>
		<param type="string" name="link"/>
	</params>
</keyword>
<keyword name="sys_get_temp_dir" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>sys_get_temp_dir</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the path of the directory PHP stores temporary files in by   default.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="sys_getloadavg" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>sys_getloadavg</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns three samples representing the average system load   (the number of processes in the system run queue) over the last 1, 5 and 15   minutes, respectively.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tan" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>tan</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   <span class="function"><strong>tan()</strong></span> returns the tangent of the <code class="parameter">arg</code>   parameter.  The <code class="parameter">arg</code> parameter is in radians.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="tanh" type="function" returnType="float">
	<desc><![CDATA[<div class="methodsynopsis dc-description">    <span class="type">float</span> <span class="methodname"><strong>tanh</strong></span>     ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$arg</code></span>    )</div>  <p class="para rdfs-comment">   Returns the hyperbolic tangent of <code class="parameter">arg</code>,   defined as <em>sinh(arg)/cosh(arg)</em>.  </p>]]></desc>
	<params>
		<param type="float" name="number"/>
	</params>
</keyword>
<keyword name="tempnam" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>tempnam</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$dir</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   )</div>  <p class="para rdfs-comment">   Creates a file with a unique filename, with access permission set to 0600, in the specified directory.   If the directory does not exist, <span class="function"><strong>tempnam()</strong></span> may   generate a file in the system&#039;s temporary directory, and return   the full path to that file, including its name.  </p>]]></desc>
	<params>
		<param type="string" name="dir"/>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="textdomain" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">      <span class="type">string</span> <span class="methodname"><strong>textdomain</strong></span>       ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$text_domain</code></span>      )</div>    <p class="para rdfs-comment">     This function sets the domain to search within when calls are     made to <span class="function"><a href="function.gettext.php" class="function">gettext()</a></span>, usually the named after an     application.    </p>]]></desc>
	<params>
		<param type="string" name="domain"/>
	</params>
</keyword>
<keyword name="TextIterator::__construct" type="function" returnType="void">
	<params>
		<param type="unicode" name="text"/>
		<param type="int" name="flags"/>
		<param type="string" name="locale "/>
	</params>
</keyword>
<keyword name="TextIterator::__construct" type="function" returnType="void">
	<params>
		<param type="unicode" name="text"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="TextIterator::__construct" type="function" returnType="void">
	<params>
		<param type="unicode" name="text"/>
	</params>
</keyword>
<keyword name="TextIterator::current" type="function" returnType="unicode">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::first" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::following" type="function" returnType="int">
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="TextIterator::getAll" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::getAvailableLocales" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::getRuleStatus" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::getRuleStatusArray" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::isBoundary" type="function" returnType="bool">
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="TextIterator::key" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::last" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::next" type="function" returnType="int">
	<params>
		<param type="int" name="n"/>
	</params>
</keyword>
<keyword name="TextIterator::next" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="TextIterator::offset" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="TextIterator::preceding" type="function" returnType="int">
	<params>
		<param type="int" name="offset"/>
	</params>
</keyword>
<keyword name="TextIterator::previous" type="function" returnType="int">
	<params>
		<param type="int" name="n"/>
	</params>
</keyword>
<keyword name="TextIterator::previous" type="function" returnType="int">
	<params>
	</params>
</keyword>
<keyword name="TextIterator::valid" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_access_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>tidy_access_count</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>tidy_access_count()</strong></span> returns the number of   accessibility warnings found for the specified document.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_clean_repair" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_config_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>tidy_config_count</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of errors encountered in the configuration of the   specified tidy <code class="parameter">object</code>.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_diagnose" type="function" returnType="boolean">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>tidy::diagnose</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>tidy_diagnose</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Runs diagnostic tests on the given tidy <code class="parameter">object</code>,   adding some more information about the document in the error buffer.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_error_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>tidy_error_count</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of Tidy errors encountered for the specified document.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_body" type="function" returnType="TidyNode">
	<params>
		<param type="resource" name="tidy"/>
	</params>
</keyword>
<keyword name="tidy_get_config" type="function" returnType="array">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_error_buffer" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_head" type="function" returnType="TidyNode">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_html" type="function" returnType="TidyNode">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_html_ver" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_opt_doc" type="function" returnType="string">
	<params>
		<param type="tidy" name="resource"/>
		<param type="string" name="optname"/>
	</params>
</keyword>
<keyword name="tidy_get_output" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>tidy_get_output</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Gets a string with the repaired html.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_release" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_root" type="function" returnType="TidyNode">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_get_status" type="function" returnType="int">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_getopt" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>tidy::getOpt</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>tidy_getopt</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$option</code></span>   )</div>  <p class="para rdfs-comment">   Returns the value of the specified <code class="parameter">option</code> for the   specified tidy <code class="parameter">object</code>.    </p>]]></desc>
	<params>
		<param type="string" name="option"/>
	</params>
</keyword>
<keyword name="tidy_is_xhtml" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_is_xml" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidy_parse_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="config_options"/>
		<param type="string" name="encoding"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="tidy_parse_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="config_options"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="tidy_parse_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="file"/>
		<param type="mixed" name="config_options"/>
	</params>
</keyword>
<keyword name="tidy_parse_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="file"/>
	</params>
</keyword>
<keyword name="tidy_parse_string" type="function" returnType="bool">
	<params>
		<param type="string" name="input"/>
		<param type="mixed" name="config_options"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="tidy_parse_string" type="function" returnType="bool">
	<params>
		<param type="string" name="input"/>
		<param type="mixed" name="config_options"/>
	</params>
</keyword>
<keyword name="tidy_parse_string" type="function" returnType="bool">
	<params>
		<param type="string" name="input"/>
	</params>
</keyword>
<keyword name="tidy_repair_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
		<param type="mixed" name="config_file"/>
		<param type="string" name="encoding"/>
		<param type="bool" name="use_include_path"/>
	</params>
</keyword>
<keyword name="tidy_repair_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
		<param type="mixed" name="config_file"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="tidy_repair_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
		<param type="mixed" name="config_file"/>
	</params>
</keyword>
<keyword name="tidy_repair_file" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="tidy_repair_string" type="function" returnType="boolean">
	<params>
		<param type="string" name="data"/>
		<param type="mixed" name="config_file"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="tidy_repair_string" type="function" returnType="boolean">
	<params>
		<param type="string" name="data"/>
		<param type="mixed" name="config_file"/>
	</params>
</keyword>
<keyword name="tidy_repair_string" type="function" returnType="boolean">
	<params>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="tidy_warning_count" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>tidy_warning_count</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.tidy.php" class="type tidy">tidy</a></span> <code class="parameter">$object</code></span>   )</div>  <p class="para rdfs-comment">   Returns the number of Tidy warnings encountered for the specified document.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::getParent" type="function" returnType="tidyNode">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::hasChildren" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::hasSiblings" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isAsp" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isComment" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isHtml" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isJste" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isPhp" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="tidyNode::isText" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="time" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>time</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the current time measured in the number of seconds since   the Unix Epoch (January 1 1970 00:00:00 GMT).  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="time_nanosleep" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>time_nanosleep</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$seconds</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$nanoseconds</code></span>   )</div>  <p class="para rdfs-comment">   Delays program execution for the given number of   <code class="parameter">seconds</code> and <code class="parameter">nanoseconds</code>.  </p>]]></desc>
	<params>
		<param type="long" name="seconds"/>
		<param type="long" name="nanoseconds"/>
	</params>
</keyword>
<keyword name="time_sleep_until" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>time_sleep_until</strong></span>    ( <span class="methodparam"><span class="type">float</span> <code class="parameter">$timestamp</code></span>   )</div>  <p class="para rdfs-comment">   Makes the script sleep until the specified   <code class="parameter">timestamp</code>.   </p>]]></desc>
	<params>
		<param type="float" name="timestamp"/>
	</params>
</keyword>
<keyword name="timezone_abbreviations_list" type="function" returnType="array">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.listabbreviations.php" class="methodname">DateTimeZone::listAbbreviations()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="timezone_identifiers_list" type="function" returnType="array">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.listidentifiers.php" class="methodname">DateTimeZone::listIdentifiers()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="timezone_name_from_abbr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>timezone_name_from_abbr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$abbr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$gmtOffset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$isdst</code><span class="initializer"> = -1</span></span>  ]] )</div>]]></desc>
	<params>
		<param type="string" name="abbr"/>
		<param type="long" name="gmtOffset"/>
		<param type="long" name="isdst"/>
	</params>
</keyword>
<keyword name="timezone_name_from_abbr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>timezone_name_from_abbr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$abbr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$gmtOffset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$isdst</code><span class="initializer"> = -1</span></span>  ]] )</div>]]></desc>
	<params>
		<param type="string" name="abbr"/>
		<param type="long" name="gmtOffset"/>
	</params>
</keyword>
<keyword name="timezone_name_from_abbr" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>timezone_name_from_abbr</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$abbr</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$gmtOffset</code><span class="initializer"> = -1</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$isdst</code><span class="initializer"> = -1</span></span>  ]] )</div>]]></desc>
	<params>
		<param type="string" name="abbr"/>
	</params>
</keyword>
<keyword name="timezone_name_get" type="function" returnType="string">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.getname.php" class="methodname">DateTimeZone::getName()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTimeZone" name="object"/>
	</params>
</keyword>
<keyword name="timezone_offset_get" type="function" returnType="long">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.getoffset.php" class="methodname">DateTimeZone::getOffset()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTimeZone" name="object"/>
		<param type="DateTime" name="object"/>
	</params>
</keyword>
<keyword name="timezone_open" type="function" returnType="DateTimeZone">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.construct.php" class="methodname">DateTimeZone::__construct()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="string" name="timezone"/>
	</params>
</keyword>
<keyword name="timezone_transitions_get" type="function" returnType="array">
	<desc><![CDATA[<p class="para">   This function is an alias of:  <span class="methodname"><a href="datetimezone.gettransitions.php" class="methodname">DateTimeZone::getTransitions()</a></span>  </p> </div>]]></desc>
	<params>
		<param type="DateTimeZone" name="object"/>
	</params>
</keyword>
<keyword name="token_get_all" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>token_get_all</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$source</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>token_get_all()</strong></span> parses the given <code class="parameter">source</code>    string into PHP language tokens using the Zend engine&#039;s lexical scanner.  </p>  <p class="para">   For a list of parser tokens, see <a href="tokens.php" class="xref">List of Parser Tokens</a>, or use    <span class="function"><a href="function.token-name.php" class="function">token_name()</a></span> to translate a token value into its string   representation.  </p>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="token_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>token_name</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$token</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>token_name()</strong></span> gets the symbolic name for a PHP    <code class="parameter">token</code> value.   </p>]]></desc>
	<params>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="touch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>touch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$time</code><span class="initializer"> = time()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$atime</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to set the access and modification times of the file named in the   <code class="parameter">filename</code> parameter to the value given in   <code class="parameter">time</code>.    Note that the access time is always modified, regardless of the number   of parameters.  </p>  <p class="para">   If the file does not exist, it will be created.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="time"/>
		<param type="int" name="atime"/>
	</params>
</keyword>
<keyword name="touch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>touch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$time</code><span class="initializer"> = time()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$atime</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to set the access and modification times of the file named in the   <code class="parameter">filename</code> parameter to the value given in   <code class="parameter">time</code>.    Note that the access time is always modified, regardless of the number   of parameters.  </p>  <p class="para">   If the file does not exist, it will be created.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="int" name="time"/>
	</params>
</keyword>
<keyword name="touch" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>touch</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$time</code><span class="initializer"> = time()</span></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$atime</code></span>  ]] )</div>  <p class="para rdfs-comment">   Attempts to set the access and modification times of the file named in the   <code class="parameter">filename</code> parameter to the value given in   <code class="parameter">time</code>.    Note that the access time is always modified, regardless of the number   of parameters.  </p>  <p class="para">   If the file does not exist, it will be created.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="trigger_error" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>trigger_error</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$error_msg</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_type</code><span class="initializer"> = E_USER_NOTICE</span></span>  ] )</div>  <p class="para rdfs-comment">   Used to trigger a user error condition, it can be used in conjunction   with the built-in error handler, or with a user defined function that has   been set as the new error handler   (<span class="function"><a href="function.set-error-handler.php" class="function">set_error_handler()</a></span>).   </p>  <p class="para">   This function is useful when you need to generate a particular response to   an exception at runtime.  </p>]]></desc>
	<params>
		<param type="string" name="messsage"/>
		<param type="int" name="error_type"/>
	</params>
</keyword>
<keyword name="trigger_error" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>trigger_error</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$error_msg</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$error_type</code><span class="initializer"> = E_USER_NOTICE</span></span>  ] )</div>  <p class="para rdfs-comment">   Used to trigger a user error condition, it can be used in conjunction   with the built-in error handler, or with a user defined function that has   been set as the new error handler   (<span class="function"><a href="function.set-error-handler.php" class="function">set_error_handler()</a></span>).   </p>  <p class="para">   This function is useful when you need to generate a particular response to   an exception at runtime.  </p>]]></desc>
	<params>
		<param type="string" name="messsage"/>
	</params>
</keyword>
<keyword name="trim" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>trim</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_mask</code><span class="initializer"> = &quot; \t\n\r\0\x0B&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string with whitespace stripped from the   beginning and end of <code class="parameter">str</code>.   Without the second parameter,   <span class="function"><strong>trim()</strong></span> will strip these characters:      <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot; &quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>32</em>       (<em>0x20</em>)), an ordinary space.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\t&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>9</em>       (<em>0x09</em>)), a tab.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\n&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>10</em>       (<em>0x0A</em>)), a new line (line feed).     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\r&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>13</em>       (<em>0x0D</em>)), a carriage return.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\0&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>0</em>       (<em>0x00</em>)), the <em>NUL</em>-byte.     </span>    </li>    <li class="listitem">     <span class="simpara">       &quot;\x0B&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>11</em>       (<em>0x0B</em>)), a vertical tab.     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="string" name="character_mask"/>
	</params>
</keyword>
<keyword name="trim" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>trim</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$character_mask</code><span class="initializer"> = &quot; \t\n\r\0\x0B&quot;</span></span>  ] )</div>  <p class="para rdfs-comment">   This function returns a string with whitespace stripped from the   beginning and end of <code class="parameter">str</code>.   Without the second parameter,   <span class="function"><strong>trim()</strong></span> will strip these characters:      <ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      &quot; &quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>32</em>       (<em>0x20</em>)), an ordinary space.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\t&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>9</em>       (<em>0x09</em>)), a tab.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\n&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>10</em>       (<em>0x0A</em>)), a new line (line feed).     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\r&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>13</em>       (<em>0x0D</em>)), a carriage return.     </span>    </li>    <li class="listitem">     <span class="simpara">      &quot;\0&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>0</em>       (<em>0x00</em>)), the <em>NUL</em>-byte.     </span>    </li>    <li class="listitem">     <span class="simpara">       &quot;\x0B&quot; (<acronym title="American Standard Code for Information Interchange">ASCII</acronym> <em>11</em>       (<em>0x0B</em>)), a vertical tab.     </span>    </li>   </ul>  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="uasort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>uasort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   This function sorts an array such that array indices maintain their   correlation with the array elements they are associated with, using a   user-defined comparison function.  </p>  <p class="para">   This is used mainly when sorting associative arrays where the actual   element order is significant.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If two members compare as equal, their relative order in the sorted array is undefined.   </p>  </p></blockquote>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
		<param type="mixed" name="comparator"/>
	</params>
</keyword>
<keyword name="ucfirst" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ucfirst</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with the first character of   <code class="parameter">str</code> capitalized, if that character is   alphabetic.  </p>  <p class="para">   Note that &#039;alphabetic&#039; is determined by the current locale. For   instance, in the default &quot;C&quot; locale characters such as umlaut-a   (�) will not be converted.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="ucwords" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>ucwords</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Returns a string with the first character of each word in   <code class="parameter">str</code> capitalized, if that character is alphabetic.  </p>  <p class="para">   The definition of a word is any string of characters that is immediately   after a whitespace (These are: space, form-feed, newline, carriage return,   horizontal tab, and vertical tab).  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="uksort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>uksort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$key_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>uksort()</strong></span> will sort the keys of an array using a   user-supplied comparison function.  If the array you wish to sort   needs to be sorted by some non-trivial criteria, you should use   this function.  </p>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
		<param type="mixed" name="comparator"/>
	</params>
</keyword>
<keyword name="umask" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>umask</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$mask</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>umask()</strong></span> sets PHP&#039;s umask to   <code class="parameter">mask</code> &amp; 0777 and returns the old   umask. When PHP is being used as a server module, the umask   is restored when each request is finished.  </p>]]></desc>
	<params>
		<param type="int" name="mask"/>
	</params>
</keyword>
<keyword name="umask" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>umask</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$mask</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>umask()</strong></span> sets PHP&#039;s umask to   <code class="parameter">mask</code> &amp; 0777 and returns the old   umask. When PHP is being used as a server module, the umask   is restored when each request is finished.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="unchangeAll" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="unchangeIndex" type="function" returnType="bool">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="unchangeName" type="function" returnType="bool">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="unicode_decode" type="function" returnType="unicode">
	<params>
		<param type="binary" name="input"/>
		<param type="string" name="encoding"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="unicode_decode" type="function" returnType="unicode">
	<params>
		<param type="binary" name="input"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="unicode_encode" type="function" returnType="binary">
	<params>
		<param type="unicode" name="input"/>
		<param type="string" name="encoding"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="unicode_encode" type="function" returnType="binary">
	<params>
		<param type="unicode" name="input"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="unicode_get_error_mode" type="function" returnType="int">
	<params>
		<param type="int" name="direction"/>
	</params>
</keyword>
<keyword name="unicode_get_subst_char" type="function" returnType="string">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="unicode_restore_error_handler" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="unicode_semantics" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="unicode_set_error_handler" type="function" returnType="callback">
	<params>
		<param type="callback" name="new_callback"/>
	</params>
</keyword>
<keyword name="unicode_set_error_mode" type="function" returnType="bool">
	<params>
		<param type="int" name="direction"/>
		<param type="int" name="mode"/>
	</params>
</keyword>
<keyword name="unicode_set_subst_char" type="function" returnType="bool">
	<params>
		<param type="string" name="character"/>
	</params>
</keyword>
<keyword name="uniqid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>uniqid</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$more_entropy</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Gets a prefixed unique identifier based on the current time in   microseconds.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    This function does not create random nor unpredictable strings.    <em class="emphasis">This function must not be used for security purposes.</em>    Use a cryptographically secure random function/generator and    cryptographically secure hash functions to create unpredictable    secure IDs.   </p>  </div>]]></desc>
	<params>
		<param type="string" name="prefix"/>
		<param type="bool" name="more_entropy"/>
	</params>
</keyword>
<keyword name="uniqid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>uniqid</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code><span class="initializer"> = &quot;&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$more_entropy</code><span class="initializer"> = false</span></span>  ]] )</div>  <p class="para rdfs-comment">   Gets a prefixed unique identifier based on the current time in   microseconds.  </p>  <div class="warning"><strong class="warning">Warning</strong>   <p class="para">    This function does not create random nor unpredictable strings.    <em class="emphasis">This function must not be used for security purposes.</em>    Use a cryptographically secure random function/generator and    cryptographically secure hash functions to create unpredictable    secure IDs.   </p>  </div>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="unixtojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>unixtojd</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Return the Julian Day for a Unix <code class="parameter">timestamp</code>   (seconds since 1.1.1970), or for the current day if no   <code class="parameter">timestamp</code> is given.  </p>]]></desc>
	<params>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="unixtojd" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>unixtojd</strong></span>    ([ <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code><span class="initializer"> = time()</span></span>  ] )</div>  <p class="para rdfs-comment">   Return the Julian Day for a Unix <code class="parameter">timestamp</code>   (seconds since 1.1.1970), or for the current day if no   <code class="parameter">timestamp</code> is given.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="unlink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>unlink</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Deletes <code class="parameter">filename</code>.  Similar to the Unix C unlink()   function. A <strong><code>E_WARNING</code></strong> level error will be generated on   failure.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
		<param type="context" name="context"/>
	</params>
</keyword>
<keyword name="unlink" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>unlink</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   [, <span class="methodparam"><span class="type">resource</span> <code class="parameter">$context</code></span>  ] )</div>  <p class="para rdfs-comment">   Deletes <code class="parameter">filename</code>.  Similar to the Unix C unlink()   function. A <strong><code>E_WARNING</code></strong> level error will be generated on   failure.  </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="unpack" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>unpack</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   )</div>  <p class="para rdfs-comment">   Unpacks from a binary string into an array according to the given   <code class="parameter">format</code>.   </p>  <p class="para">   The unpacked data is stored in an associative array. To   accomplish this you have to name the different format codes and   separate them by a slash /. If a repeater argument is present,   then each of the array keys will have a sequence number behind   the given name.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="string" name="input"/>
	</params>
</keyword>
<keyword name="unregister_tick_function" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>unregister_tick_function</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$function_name</code></span>   )</div>  <p class="simpara">   De-registers the function named by <code class="parameter">function_name</code> so it is   no longer executed when a <a href="control-structures.declare.php" class="link">tick</a> is   called.  </p>]]></desc>
	<params>
		<param type="string" name="function_name"/>
	</params>
</keyword>
<keyword name="unserialize" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>unserialize</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="simpara">   <span class="function"><strong>unserialize()</strong></span> takes a single serialized variable and   converts it back into a PHP value.    </p>]]></desc>
	<params>
		<param type="string" name="variable_representation"/>
	</params>
</keyword>
<keyword name="urldecode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>urldecode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   Decodes any <em>%<span class="replaceable">##</span></em>   encoding in the given string. Plus symbols (&#039;<em>+</em>&#039;) are   decoded to a space character.  </p>]]></desc>
	<params>
		<param type="binary" name="str"/>
	</params>
</keyword>
<keyword name="urlencode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>urlencode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   )</div>  <p class="para rdfs-comment">   This function is convenient when encoding a string to be used in a query   part of a URL, as a convenient way to pass variables to the next page.  </p>]]></desc>
	<params>
		<param type="binary" name="str"/>
	</params>
</keyword>
<keyword name="user_filter_nop" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="usleep" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>usleep</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$micro_seconds</code></span>   )</div>  <p class="para rdfs-comment">   Delays program execution for the given number of micro seconds.  </p>]]></desc>
	<params>
		<param type="int" name="micro_seconds"/>
	</params>
</keyword>
<keyword name="usort" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>usort</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$array</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$value_compare_func</code></span>   )</div>  <p class="para rdfs-comment">   This function will sort an array by its values using a user-supplied   comparison function.  If the array you wish to sort needs to be sorted by   some non-trivial criteria, you should use this function.  </p>  <blockquote class="note"><p><strong class="note">Note</strong>:    <p class="para">    If two members compare as equal, their relative order in the sorted array is undefined.   </p>  </p></blockquote>  <blockquote class="note"><p><strong class="note">Note</strong>: <span class="simpara">This functionassigns new keys to the elements in <code class="parameter">array</code>.It will remove any existing keys that may have been assigned, ratherthan just reordering the keys.</span></p></blockquote>]]></desc>
	<params>
		<param type="array" name="array_arg"/>
		<param type="mixed" name="comparator"/>
	</params>
</keyword>
<keyword name="var_dump" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>var_dump</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="simpara">   This function displays structured information about one or more   expressions that includes its type and value. Arrays and objects are   explored recursively with values indented to show structure.  </p>  <p class="simpara">   In PHP 5 all public, private and protected properties of objects will be   returned in the output.  </p>  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">As with anything that outputsits result directly to the browser, the <a href="book.outcontrol.php" class="link">output-control functions</a> can be used to capturethe output of this function, and save it in a<span class="type"><a href="language.types.string.php" class="type string">string</a></span> (for example).</p></div>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="var_export" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>var_export</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>var_export()</strong></span> gets structured information about the    given variable. It is similar to <span class="function"><a href="function.var-dump.php" class="function">var_dump()</a></span>   with one exception: the returned representation is valid PHP code.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
		<param type="bool" name="return"/>
	</params>
</keyword>
<keyword name="var_export" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>var_export</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$expression</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$return</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="simpara">   <span class="function"><strong>var_export()</strong></span> gets structured information about the    given variable. It is similar to <span class="function"><a href="function.var-dump.php" class="function">var_dump()</a></span>   with one exception: the returned representation is valid PHP code.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="var_inspect" type="function" returnType="void">
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="variant_abs" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_abs</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$val</code></span>   )</div>  <p class="para rdfs-comment">   Returns the absolute value of a variant.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
	</params>
</keyword>
<keyword name="variant_add" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_add</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Adds <code class="parameter">left</code> to <code class="parameter">right</code> using   the following rules (taken from the MSDN library), which correspond to   those of Visual Basic:   <table class="doctable table">    <caption><strong>Variant Addition Rules</strong></caption>        <thead>     <tr>      <th>If</th>      <th>Then</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>Both expressions are of the string type</td>      <td>Concatenation</td>     </tr>     <tr>      <td>One expression is a string type and the other a      character</td>      <td>Addition</td>     </tr>     <tr>      <td>One expression is numeric and the other is a string</td>      <td>Addition</td>     </tr>     <tr>      <td>Both expressions are numeric</td>      <td>Addition</td>     </tr>     <tr>      <td>Either expression is NULL</td>      <td>NULL is returned</td>     </tr>     <tr>      <td>Both expressions are empty</td>      <td>Integer subtype is returned</td>     </tr>    </tbody>     </table> </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_and" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_and</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Performs a bitwise AND operation.   Note that this is slightly different from a regular AND operation.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_cast" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>variant_cast</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   )</div>  <p class="para rdfs-comment">   This function makes a copy of <code class="parameter">variant</code> and then   performs a variant cast operation to force the copy to have the type   given by <code class="parameter">type</code>.  </p>  <p class="para">   This function wraps VariantChangeType() in the COM library; consult MSDN   for more information.  </p>]]></desc>
	<params>
		<param type="object" name="variant"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="variant_cat" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_cat</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Concatenates <code class="parameter">left</code> with   <code class="parameter">right</code> and returns the result.  </p>  <p class="para">   This function is notionally equivalent to   <code class="parameter">$left</code> <em>.</em> <code class="parameter">$right</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_cmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>variant_cmp</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$lcid</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>  ]] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">left</code> with <code class="parameter">right</code>.  </p>  <p class="para">   This function will only compare scalar values, not arrays or variant records.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
		<param type="int" name="lcid"/>
		<param type="int" name="flags"/>
	</params>
</keyword>
<keyword name="variant_cmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>variant_cmp</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$lcid</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>  ]] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">left</code> with <code class="parameter">right</code>.  </p>  <p class="para">   This function will only compare scalar values, not arrays or variant records.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
		<param type="int" name="lcid"/>
	</params>
</keyword>
<keyword name="variant_cmp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>variant_cmp</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$lcid</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$flags</code></span>  ]] )</div>  <p class="para rdfs-comment">   Compares <code class="parameter">left</code> with <code class="parameter">right</code>.  </p>  <p class="para">   This function will only compare scalar values, not arrays or variant records.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_date_from_timestamp" type="function" returnType="object">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <span class="methodname"><strong>variant_date_from_timestamp</strong></span>    ( <span class="methodparam"><span class="type">int</span> <code class="parameter">$timestamp</code></span>   )</div>  <p class="para rdfs-comment">   Converts <code class="parameter">timestamp</code> from a unix timestamp value   into a variant of type <strong><code>VT_DATE</code></strong>.  This allows easier   interopability between the unix-ish parts of PHP and COM.  </p>]]></desc>
	<params>
		<param type="int" name="timestamp"/>
	</params>
</keyword>
<keyword name="variant_date_to_timestamp" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>variant_date_to_timestamp</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Converts <code class="parameter">variant</code> from a <strong><code>VT_DATE</code></strong>   (or similar) value into a Unix timestamp.  This allows easier   interopability between the Unix-ish parts of PHP and COM.  </p>]]></desc>
	<params>
		<param type="object" name="variant"/>
	</params>
</keyword>
<keyword name="variant_div" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_div</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Divides <code class="parameter">left</code> by <code class="parameter">right</code> and   returns the result.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_eqv" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_eqv</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Performs a bitwise equivalence on two variants.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_fix" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_fix</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Gets the integer portion of a variant.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
	</params>
</keyword>
<keyword name="variant_get_type" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>variant_get_type</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Returns the type of a variant object.  </p>]]></desc>
	<params>
		<param type="object" name="variant"/>
	</params>
</keyword>
<keyword name="variant_idiv" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_idiv</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Converts <code class="parameter">left</code> and <code class="parameter">right</code> to   integer values, and then performs integer division.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_imp" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_imp</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Performs a bitwise implication operation.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_int" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_int</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Gets the integer portion of a variant.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
	</params>
</keyword>
<keyword name="variant_mod" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_mod</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Divides <code class="parameter">left</code> by <code class="parameter">right</code> and   returns the remainder.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_mul" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_mul</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Multiplies <code class="parameter">left</code> by <code class="parameter">right</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_neg" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_neg</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Performs logical negation of <code class="parameter">variant</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
	</params>
</keyword>
<keyword name="variant_not" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_not</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>   )</div>  <p class="para rdfs-comment">   Performs bitwise not negation on <code class="parameter">variant</code> and   returns the result.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
	</params>
</keyword>
<keyword name="variant_or" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_or</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Performs a bitwise OR operation.   Note that this is slightly different from a regular OR operation.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_pow" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_pow</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Returns the result of <code class="parameter">left</code> to the power of   <code class="parameter">right</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_round" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_round</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$variant</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$decimals</code></span>   )</div>  <p class="para rdfs-comment">   Returns the value of <code class="parameter">variant</code> rounded to   <code class="parameter">decimals</code> decimal places.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="int" name="decimals"/>
	</params>
</keyword>
<keyword name="variant_set" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>variant_set</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Converts <code class="parameter">value</code> to a variant and assigns it to the   <code class="parameter">variant</code> object; no new variant object is created,   and the old value of <code class="parameter">variant</code> is freed/released.  </p>]]></desc>
	<params>
		<param type="object" name="variant"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="variant_set_type" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>variant_set_type</strong></span>    ( <span class="methodparam"><span class="type"><a href="class.variant.php" class="type variant">variant</a></span> <code class="parameter">$variant</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$type</code></span>   )</div>  <p class="para rdfs-comment">   This function is similar to <span class="function"><a href="function.variant-cast.php" class="function">variant_cast()</a></span> except that   the variant is modified &quot;in-place&quot;; no new variant is created. The   parameters for this function have identical meaning to those of   <span class="function"><a href="function.variant-cast.php" class="function">variant_cast()</a></span>.  </p>]]></desc>
	<params>
		<param type="object" name="variant"/>
		<param type="int" name="type"/>
	</params>
</keyword>
<keyword name="variant_sub" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_sub</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Subtracts <code class="parameter">right</code> from <code class="parameter">left</code>.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="variant_xor" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>variant_xor</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$left</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$right</code></span>   )</div>  <p class="para rdfs-comment">   Performs a logical exclusion.  </p>]]></desc>
	<params>
		<param type="mixed" name="left"/>
		<param type="mixed" name="right"/>
	</params>
</keyword>
<keyword name="version_compare" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>version_compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$version1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$version2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$operator</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>version_compare()</strong></span> compares two &quot;PHP-standardized&quot;   version number strings. This is useful if you would like to write programs   working only on some versions of PHP.  </p>  <p class="para">   The function first replaces <em>_</em>, <em>-</em> and   <em>+</em> with a dot <em>.</em> in the version   strings and also inserts dots <em>.</em> before and after any   non number so that for example &#039;4.3.2RC1&#039; becomes &#039;4.3.2.RC.1&#039;. Then it   splits the results like if you were using explode(&#039;.&#039;, $ver). Then it   compares the parts starting from left to right. If a part contains   special version strings these are handled in the following order:   <em>any string not found in this list</em> &lt;    <em>dev</em> &lt; <em>alpha</em> =   <em>a</em> &lt; <em>beta</em> =   <em>b</em> &lt; <em>RC</em> =     <em>rc</em> &lt; <em>#</em> &lt;   <em>pl</em> = <em>p</em>. This way not only versions   with different levels like &#039;4.1&#039; and &#039;4.1.2&#039; can be compared but also any   PHP specific version containing development state.  </p>]]></desc>
	<params>
		<param type="string" name="ver1"/>
		<param type="string" name="ver2"/>
		<param type="string" name="oper"/>
	</params>
</keyword>
<keyword name="version_compare" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>version_compare</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$version1</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$version2</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$operator</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>version_compare()</strong></span> compares two &quot;PHP-standardized&quot;   version number strings. This is useful if you would like to write programs   working only on some versions of PHP.  </p>  <p class="para">   The function first replaces <em>_</em>, <em>-</em> and   <em>+</em> with a dot <em>.</em> in the version   strings and also inserts dots <em>.</em> before and after any   non number so that for example &#039;4.3.2RC1&#039; becomes &#039;4.3.2.RC.1&#039;. Then it   splits the results like if you were using explode(&#039;.&#039;, $ver). Then it   compares the parts starting from left to right. If a part contains   special version strings these are handled in the following order:   <em>any string not found in this list</em> &lt;    <em>dev</em> &lt; <em>alpha</em> =   <em>a</em> &lt; <em>beta</em> =   <em>b</em> &lt; <em>RC</em> =     <em>rc</em> &lt; <em>#</em> &lt;   <em>pl</em> = <em>p</em>. This way not only versions   with different levels like &#039;4.1&#039; and &#039;4.1.2&#039; can be compared but also any   PHP specific version containing development state.  </p>]]></desc>
	<params>
		<param type="string" name="ver1"/>
		<param type="string" name="ver2"/>
	</params>
</keyword>
<keyword name="vfprintf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>vfprintf</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$handle</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   )</div>  <p class="para rdfs-comment">   Write a string produced according to <code class="parameter">format</code> to the   stream resource specified by <code class="parameter">handle</code>.  </p>  <p class="para">   Operates as <span class="function"><a href="function.fprintf.php" class="function">fprintf()</a></span> but accepts an array of   arguments, rather than a variable number of arguments.  </p>]]></desc>
	<params>
		<param type="resource" name="stream"/>
		<param type="string" name="format"/>
		<param type="array" name="args"/>
	</params>
</keyword>
<keyword name="virtual" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>virtual</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   <span class="function"><strong>virtual()</strong></span> is an Apache-specific function which   is similar to <em>&lt;!--#include virtual...--&gt;</em> in   <em>mod_include</em>.   It performs an Apache sub-request.  It is useful for including   CGI scripts or <var class="filename">.shtml</var> files, or anything else that you would   parse through Apache. Note that for a CGI script, the script   must generate valid CGI headers.  At the minimum that means it   must generate a <em>Content-Type</em> header.  </p>  <p class="para">   To run the sub-request, all buffers are terminated and flushed to the   browser, pending headers are sent too.  </p>  <p class="simpara">This function is only supported when PHPis installed as an Apache module.</p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="vprintf" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>vprintf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   )</div>  <p class="para rdfs-comment">   Display array values as a formatted string according to   <code class="parameter">format</code> (which is described in the documentation   for <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span>).  </p>  <p class="para">   Operates as <span class="function"><a href="function.printf.php" class="function">printf()</a></span> but accepts an array of   arguments, rather than a variable number of arguments.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="array" name="args"/>
	</params>
</keyword>
<keyword name="vsprintf" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>vsprintf</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$format</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$args</code></span>   )</div>  <p class="para rdfs-comment">   Operates as <span class="function"><a href="function.sprintf.php" class="function">sprintf()</a></span> but accepts an array of   arguments, rather than a variable number of arguments.  </p>]]></desc>
	<params>
		<param type="string" name="format"/>
		<param type="array" name="args"/>
	</params>
</keyword>
<keyword name="wddx_add_vars" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>wddx_add_vars</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$packet_id</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var_name</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Serializes the passed variables and add the result to the given packet.  </p>]]></desc>
	<params>
		<param type="int" name="packet_id"/>
		<param type="mixed" name="var_names"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="wddx_add_vars" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>wddx_add_vars</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$packet_id</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var_name</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Serializes the passed variables and add the result to the given packet.  </p>]]></desc>
	<params>
		<param type="int" name="packet_id"/>
		<param type="mixed" name="var_names"/>
	</params>
</keyword>
<keyword name="wddx_packet_end" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wddx_packet_end</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$packet_id</code></span>   )</div>  <p class="para rdfs-comment">   Ends and returns the given WDDX packet.  </p>]]></desc>
	<params>
		<param type="int" name="packet_id"/>
	</params>
</keyword>
<keyword name="wddx_packet_start" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>wddx_packet_start</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$comment</code></span>  ] )</div>  <p class="para rdfs-comment">   Start a new WDDX packet for incremental addition of variables.   It automatically creates a structure definition inside the packet to   contain the variables.  </p>]]></desc>
	<params>
		<param type="string" name="comment"/>
	</params>
</keyword>
<keyword name="wddx_packet_start" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>wddx_packet_start</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$comment</code></span>  ] )</div>  <p class="para rdfs-comment">   Start a new WDDX packet for incremental addition of variables.   It automatically creates a structure definition inside the packet to   contain the variables.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="wddx_serialize_value" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wddx_serialize_value</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$comment</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a WDDX packet from a single given value.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
		<param type="string" name="comment"/>
	</params>
</keyword>
<keyword name="wddx_serialize_value" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wddx_serialize_value</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$comment</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a WDDX packet from a single given value.  </p>]]></desc>
	<params>
		<param type="mixed" name="var"/>
	</params>
</keyword>
<keyword name="wddx_serialize_vars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wddx_serialize_vars</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var_name</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a WDDX packet with a structure that contains the serialized   representation of the passed variables.  </p>]]></desc>
	<params>
		<param type="mixed" name="var_name"/>
		<param type="mixed" name="..."/>
	</params>
</keyword>
<keyword name="wddx_serialize_vars" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wddx_serialize_vars</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$var_name</code></span>   [, <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$...</code></span>  ] )</div>  <p class="para rdfs-comment">   Creates a WDDX packet with a structure that contains the serialized   representation of the passed variables.  </p>]]></desc>
	<params>
		<param type="mixed" name="var_name"/>
	</params>
</keyword>
<keyword name="wddx_unserialize" type="function" returnType="mixed">
	<params>
		<param type="mixed" name="packet"/>
	</params>
</keyword>
<keyword name="wordwrap" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wordwrap</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code><span class="initializer"> = 75</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$break</code><span class="initializer"> = &quot;\n&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$cut</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Wraps a string to a given number of characters using a string break   character.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="width"/>
		<param type="string" name="break"/>
		<param type="boolean" name="cut"/>
	</params>
</keyword>
<keyword name="wordwrap" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wordwrap</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code><span class="initializer"> = 75</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$break</code><span class="initializer"> = &quot;\n&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$cut</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Wraps a string to a given number of characters using a string break   character.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="width"/>
		<param type="string" name="break"/>
	</params>
</keyword>
<keyword name="wordwrap" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wordwrap</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code><span class="initializer"> = 75</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$break</code><span class="initializer"> = &quot;\n&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$cut</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Wraps a string to a given number of characters using a string break   character.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
		<param type="int" name="width"/>
	</params>
</keyword>
<keyword name="wordwrap" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>wordwrap</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$str</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$width</code><span class="initializer"> = 75</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$break</code><span class="initializer"> = &quot;\n&quot;</span></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$cut</code><span class="initializer"> = false</span></span>  ]]] )</div>  <p class="para rdfs-comment">   Wraps a string to a given number of characters using a string break   character.  </p>]]></desc>
	<params>
		<param type="string" name="str"/>
	</params>
</keyword>
<keyword name="xml_get_current_byte_index" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_get_current_byte_index</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   )</div>  <p class="para rdfs-comment">   Gets the current byte index of the given XML parser.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
	</params>
</keyword>
<keyword name="xml_get_current_column_number" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_get_current_column_number</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   )</div>  <p class="para rdfs-comment">   Gets the current column number of the given XML parser.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
	</params>
</keyword>
<keyword name="xml_get_current_line_number" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_get_current_line_number</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   )</div>  <p class="para rdfs-comment">   Gets the current line number for the given XML parser.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
	</params>
</keyword>
<keyword name="xml_get_error_code" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_get_error_code</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   )</div>  <p class="para rdfs-comment">   Gets the XML parser error code.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
	</params>
</keyword>
<keyword name="xml_parse" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_parse</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_final</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parse()</strong></span> parses an XML document. The handlers for   the configured events are called as many times as necessary.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="data"/>
		<param type="int" name="isFinal"/>
	</params>
</keyword>
<keyword name="xml_parse" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_parse</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$is_final</code><span class="initializer"> = false</span></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parse()</strong></span> parses an XML document. The handlers for   the configured events are called as many times as necessary.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="data"/>
	</params>
</keyword>
<keyword name="xml_parse_into_struct" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xml_parse_into_struct</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$values</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter reference">&$index</code></span>  ] )</div>  <p class="para rdfs-comment">   This function parses an XML string into 2 parallel array structures, one   (<code class="parameter">index</code>) containing pointers to the location of the   appropriate values in the <code class="parameter">values</code> array. These last   two parameters must be passed by reference.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="data"/>
		<param type="array" name="&amp;struct"/>
		<param type="array" name="&amp;index"/>
	</params>
</keyword>
<keyword name="xml_parser_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parser_create()</strong></span> creates a new XML parser   and returns a resource handle referencing it to be used by the   other XML functions.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="xml_parser_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parser_create()</strong></span> creates a new XML parser   and returns a resource handle referencing it to be used by the   other XML functions.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="xml_parser_create_ns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create_ns</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$separator</code><span class="initializer"> = &quot;:&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parser_create_ns()</strong></span> creates a new XML parser   with XML namespace support and returns a resource handle referencing    it to be used by the other XML functions.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
		<param type="string" name="sep"/>
	</params>
</keyword>
<keyword name="xml_parser_create_ns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create_ns</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$separator</code><span class="initializer"> = &quot;:&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parser_create_ns()</strong></span> creates a new XML parser   with XML namespace support and returns a resource handle referencing    it to be used by the other XML functions.  </p>]]></desc>
	<params>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="xml_parser_create_ns" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xml_parser_create_ns</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$separator</code><span class="initializer"> = &quot;:&quot;</span></span>  ]] )</div>  <p class="para rdfs-comment">   <span class="function"><strong>xml_parser_create_ns()</strong></span> creates a new XML parser   with XML namespace support and returns a resource handle referencing    it to be used by the other XML functions.  </p>]]></desc>
	<params>
	</params>
</keyword>
<keyword name="xml_parser_free" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_parser_free</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   )</div>  <p class="para rdfs-comment">   Frees the given XML <code class="parameter">parser</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
	</params>
</keyword>
<keyword name="xml_parser_get_option" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xml_parser_get_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   )</div>  <p class="para rdfs-comment">   Gets an option value from an XML parser.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="int" name="option"/>
	</params>
</keyword>
<keyword name="xml_parser_set_option" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_parser_set_option</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">int</span> <code class="parameter">$option</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Sets an option in an XML parser.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="int" name="option"/>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="xml_set_character_data_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_character_data_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the character data handler function for the XML parser   <code class="parameter">parser</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_default_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_default_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the default handler function for the XML parser   <code class="parameter">parser</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_element_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_element_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$start_element_handler</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$end_element_handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the element handler functions for the XML <code class="parameter">parser</code>.   <code class="parameter">start_element_handler</code> and   <code class="parameter">end_element_handler</code> are strings containing   the names of functions that must exist when <span class="function"><a href="function.xml-parse.php" class="function">xml_parse()</a></span>   is called for <code class="parameter">parser</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="shdl"/>
		<param type="string" name="ehdl"/>
	</params>
</keyword>
<keyword name="xml_set_end_namespace_decl_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_end_namespace_decl_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Set a handler to be called when leaving the scope of a namespace   declaration. This will be called, for each namespace declaration, after   the handler for the end tag of the element in which the namespace was   declared.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_external_entity_ref_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_external_entity_ref_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the external entity reference handler function for the XML parser   <code class="parameter">parser</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_notation_decl_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_notation_decl_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the notation declaration handler function for the XML parser   <code class="parameter">parser</code>.  </p>  <p class="para">   A notation declaration is part of the document&#039;s DTD and has the   following format:       <div class="example-contents"><div class="xmlcode"><pre class="xmlcode">&lt;!NOTATION &lt;parameter&gt;name&lt;/parameter&gt;{ &lt;parameter&gt;systemId&lt;/parameter&gt; | &lt;parameter&gt;publicId&lt;/parameter&gt;?&gt;</pre></div>   </div>   See <a href="http://www.w3.org/TR/1998/REC-xml-19980210#Notations" class="link external">&raquo;&nbsp;section 4.7 of the XML 1.0   spec</a> for the definition of notation declarations.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_object" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_object</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type">object</span> <code class="parameter reference">&$object</code></span>   )</div>  <p class="para rdfs-comment">   This function allows to use <code class="parameter">parser</code> inside   <code class="parameter">object</code>. All callback functions could be set with   <span class="function"><a href="function.xml-set-element-handler.php" class="function">xml_set_element_handler()</a></span> etc and assumed to be   methods of <code class="parameter">object</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="object" name="&amp;obj"/>
	</params>
</keyword>
<keyword name="xml_set_processing_instruction_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_processing_instruction_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Sets the processing instruction (PI) handler function for the XML parser   <code class="parameter">parser</code>.  </p>  <p class="para">   A processing instruction has the following format:   <div class="informalexample">    <div class="example-contents"><div class="cdata"><pre>&lt;?</pre></div><span class="replaceable">target</span>      <span class="replaceable">data</span><div class="cdata"><pre>?&gt;    </pre></div></div>   </div>   You can put PHP code into such a tag, but be aware of one limitation: in   an XML PI, the PI end tag (<em>?&gt;</em>) can not be quoted,   so this character sequence should not appear in the PHP code you embed   with PIs in XML documents.If it does, the rest of the PHP code, as well   as the &quot;real&quot; PI end tag, will be treated as character data.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="xml_set_start_namespace_decl_handler" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xml_set_start_namespace_decl_handler</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$parser</code></span>   , <span class="methodparam"><span class="type"><a href="language.types.callable.php" class="type callable">callable</a></span> <code class="parameter">$handler</code></span>   )</div>  <p class="para rdfs-comment">   Set a handler to be called when a namespace is declared. Namespace   declarations occur inside start tags. But the namespace declaration start   handler is called before the start tag handler for each namespace declared   in that start tag.  </p>]]></desc>
	<params>
		<param type="resource" name="parser"/>
		<param type="string" name="hdl"/>
	</params>
</keyword>
<keyword name="XMLReader::close" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::expand" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::getAttribute" type="function" returnType="string">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="XMLReader::getAttributeNo" type="function" returnType="string">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="XMLReader::getAttributeNs" type="function" returnType="string">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="namespaceURI"/>
	</params>
</keyword>
<keyword name="XMLReader::getParserProperty" type="function" returnType="boolean">
	<params>
		<param type="int" name="property"/>
	</params>
</keyword>
<keyword name="XMLReader::isValid" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::lookupNamespace" type="function" returnType="string">
	<params>
		<param type="string" name="prefix"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToAttribute" type="function" returnType="boolean">
	<params>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToAttributeNo" type="function" returnType="boolean">
	<params>
		<param type="int" name="index"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToAttributeNs" type="function" returnType="boolean">
	<params>
		<param type="string" name="name"/>
		<param type="string" name="namespaceURI"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToElement" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToFirstAttribute" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::moveToNextAttribute" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::next" type="function" returnType="boolean">
	<params>
		<param type="string" name="localname"/>
	</params>
</keyword>
<keyword name="XMLReader::next" type="function" returnType="boolean">
	<params>
	</params>
</keyword>
<keyword name="XMLReader::open" type="function" returnType="boolean">
	<params>
		<param type="string" name="URI"/>
		<param type="string" name="encoding"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="XMLReader::open" type="function" returnType="boolean">
	<params>
		<param type="string" name="URI"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="XMLReader::open" type="function" returnType="boolean">
	<params>
		<param type="string" name="URI"/>
	</params>
</keyword>
<keyword name="XMLReader::read" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::readInnerXml" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::readOuterXml" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::readString" type="function" returnType="boolean">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="XMLReader::setParserProperty" type="function" returnType="boolean">
	<params>
		<param type="int" name="property"/>
		<param type="boolean" name="value"/>
	</params>
</keyword>
<keyword name="XMLReader::setRelaxNGSchema" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="XMLReader::setRelaxNGSchemaSource" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="XMLReader::setSchema" type="function" returnType="boolean">
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="XMLReader::XML" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
		<param type="string" name="encoding"/>
		<param type="int" name="options"/>
	</params>
</keyword>
<keyword name="XMLReader::XML" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="XMLReader::XML" type="function" returnType="boolean">
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="xmlrpc_decode" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlrpc_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;iso-8859-1&quot;</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>]]></desc>
	<params>
		<param type="string" name="xml"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="xmlrpc_decode" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlrpc_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = &quot;iso-8859-1&quot;</span></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>]]></desc>
	<params>
		<param type="string" name="xml"/>
	</params>
</keyword>
<keyword name="xmlrpc_decode_request" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlrpc_decode_request</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$method</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="string" name="xml"/>
		<param type="string&amp;" name="method"/>
		<param type="string" name="encoding"/>
	</params>
</keyword>
<keyword name="xmlrpc_decode_request" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlrpc_decode_request</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$method</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="string" name="xml"/>
		<param type="string&amp;" name="method"/>
	</params>
</keyword>
<keyword name="xmlrpc_encode" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlrpc_encode</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="xmlrpc_encode_request" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlrpc_encode_request</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$method</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$params</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$output_options</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>]]></desc>
	<params>
		<param type="string" name="method"/>
		<param type="mixed" name="params"/>
	</params>
</keyword>
<keyword name="xmlrpc_get_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlrpc_get_type</strong></span>    ( <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$value</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <p class="para">   This function is especially useful for base64 and datetime strings.  </p>]]></desc>
	<params>
		<param type="mixed" name="value"/>
	</params>
</keyword>
<keyword name="xmlrpc_is_fault" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlrpc_is_fault</strong></span>    ( <span class="methodparam"><span class="type">array</span> <code class="parameter">$arg</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>]]></desc>
	<params>
		<param type="y"/>
	</params>
</keyword>
<keyword name="xmlrpc_parse_method_descriptions" type="function" returnType="array">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">array</span> <span class="methodname"><strong>xmlrpc_parse_method_descriptions</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="string" name="xml"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_add_introspection_data" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xmlrpc_server_add_introspection_data</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   , <span class="methodparam"><span class="type">array</span> <code class="parameter">$desc</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
		<param type="array" name="desc"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_call_method" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlrpc_server_call_method</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$user_data</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$output_options</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
		<param type="string" name="xml"/>
		<param type="mixed" name="user_data"/>
		<param type="array" name="output_options"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_call_method" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlrpc_server_call_method</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$xml</code></span>   , <span class="methodparam"><span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <code class="parameter">$user_data</code></span>   [, <span class="methodparam"><span class="type">array</span> <code class="parameter">$output_options</code></span>  ] )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
		<param type="string" name="xml"/>
		<param type="mixed" name="user_data"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_create" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xmlrpc_server_create</strong></span>    ( <span class="methodparam">void</span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_destroy" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>xmlrpc_server_destroy</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_register_introspection_callback" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlrpc_server_register_introspection_callback</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
		<param type="string" name="function"/>
	</params>
</keyword>
<keyword name="xmlrpc_server_register_method" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlrpc_server_register_method</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$server</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$method_name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$function</code></span>   )</div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div> </div>]]></desc>
	<params>
		<param type="resource" name="server"/>
		<param type="string" name="method_name"/>
		<param type="string" name="function"/>
	</params>
</keyword>
<keyword name="xmlrpc_set_type" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlrpc_set_type</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter reference">&$value</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$type</code></span>   )</div>  <p class="para rdfs-comment">   Sets xmlrpc type, base64 or datetime, for a PHP string value.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function is<em class="emphasis">EXPERIMENTAL</em>. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</p></div>]]></desc>
	<params>
		<param type="string" name="value"/>
		<param type="string" name="type"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_attribute" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endAttribute</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_attribute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current attribute.    </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_cdata" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endCData</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_cdata</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current CDATA section.    </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_comment" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endComment</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_comment</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current comment.    </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_document" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endDocument</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_document</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current document.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_dtd" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endDTD</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_dtd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the DTD of the document.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_dtd_attlist" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endDTDAttlist</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_dtd_attlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current DTD attribute list.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_dtd_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endDTDElement</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_dtd_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current DTD element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endDTDEntity</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endElement</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_end_pi" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::endPI</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_end_pi</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Ends the current processing instruction.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_flush" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>XMLWriter::flush</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$empty</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlwriter_flush</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$empty</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Flushes the current buffer.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="bool" name="empty"/>
	</params>
</keyword>
<keyword name="xmlwriter_flush" type="function" returnType="mixed">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>XMLWriter::flush</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$empty</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type"><a href="language.pseudo-types.php#language.types.mixed" class="type mixed">mixed</a></span> <span class="methodname"><strong>xmlwriter_flush</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$empty</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Flushes the current buffer.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_full_end_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::fullEndElement</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_full_end_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   End the current xml element. Writes an end tag even if the element is empty.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_open_memory" type="function" returnType="resource">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::openMemory</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xmlwriter_open_memory</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Creates a new <strong class="classname">XMLWriter</strong> using memory for string output.    </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="xmlwriter_open_uri" type="function" returnType="resource">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::openURI</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>xmlwriter_open_uri</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">   Creates a new <strong class="classname">XMLWriter</strong> using    <code class="parameter">uri</code> for the output.    </p>]]></desc>
	<params>
		<param type="string" name="source"/>
	</params>
</keyword>
<keyword name="xmlwriter_output_memory" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>XMLWriter::outputMemory</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flush</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlwriter_output_memory</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flush</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the current buffer.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="bool" name="flush"/>
	</params>
</keyword>
<keyword name="xmlwriter_output_memory" type="function" returnType="string">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>XMLWriter::outputMemory</strong></span>    ([ <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flush</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>xmlwriter_output_memory</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   [, <span class="methodparam"><span class="type">bool</span> <code class="parameter">$flush</code><span class="initializer"> = true</span></span>  ] )</div>  <p class="para rdfs-comment">   Returns the current buffer.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_set_indent" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::setIndent</strong></span>    ( <span class="methodparam"><span class="type">bool</span> <code class="parameter">$indent</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_set_indent</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$indent</code></span>   )</div>  <p class="para rdfs-comment">   Toggles indentation on or off.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="bool" name="indent"/>
	</params>
</keyword>
<keyword name="xmlwriter_set_indent_string" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::setIndentString</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$indentString</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_set_indent_string</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$indentString</code></span>   )</div>  <p class="para rdfs-comment">   Sets the string which will be used to indent each element/attribute of the   resulting xml.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="indentString"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_attribute" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startAttribute</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_attribute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Starts an attribute.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_attribute_ns" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startAttributeNS</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_attribute_ns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">   Starts a namespaced attribute.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="prefix"/>
		<param type="string" name="name"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_cdata" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startCData</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_cdata</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Starts a CDATA.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_comment" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startComment</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_comment</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   )</div>  <p class="para rdfs-comment">   Starts a comment.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_document" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startDocument</strong></span>    ([ <span class="methodparam"><span class="type">string</span> <code class="parameter">$version</code><span class="initializer"> = 1.0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$standalone</code></span>  ]]] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_document</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$version</code><span class="initializer"> = 1.0</span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code><span class="initializer"> = <strong><code>NULL</code></strong></span></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$standalone</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Starts a document.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="version"/>
		<param type="string" name="encoding"/>
		<param type="string" name="standalone"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_dtd" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startDTD</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifiedName</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$publicId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$systemId</code></span>  ]] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_dtd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifiedName</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$publicId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$systemId</code></span>  ]] )</div>  <p class="para rdfs-comment">   Starts a DTD.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="pubid"/>
		<param type="string" name="sysid"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_dtd_attlist" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startDTDAttlist</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_dtd_attlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Starts a DTD attribute list.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_dtd_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startDTDElement</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifiedName</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_dtd_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$qualifiedName</code></span>   )</div>  <p class="para rdfs-comment">   Starts a DTD element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$isparam</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$isparam</code></span>   )</div>  <p class="para rdfs-comment">   Starts a DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="bool" name="isparam"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startElement</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   )</div>  <p class="para rdfs-comment">   Starts an element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_element_ns" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startElementNS</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_element_ns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   )</div>  <p class="para rdfs-comment">   Starts a namespaced element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="prefix"/>
		<param type="string" name="name"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="xmlwriter_start_pi" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::startPI</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_start_pi</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>   )</div>  <p class="para rdfs-comment">   Starts a processing instruction tag.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="target"/>
	</params>
</keyword>
<keyword name="xmlwriter_text" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::text</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_text</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a text.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_attribute" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeAttribute</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_attribute</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$value</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full attribute.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_attribute_ns" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeAttributeNS</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_attribute_ns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full namespaced attribute.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="prefix"/>
		<param type="string" name="name"/>
		<param type="string" name="uri"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_cdata" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeCData</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_cdata</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full CDATA.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_comment" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeComment</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_comment</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full comment.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTD</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$publicId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$systemId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$subset</code></span>  ]]] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$publicId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$systemId</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$subset</code></span>  ]]] )</div>  <p class="para rdfs-comment">   Writes a full DTD.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="pubid"/>
		<param type="string" name="sysid"/>
		<param type="string" name="subset"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_attlist" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDAttlist</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_attlist</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a DTD attribute list.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDElement</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD element.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
		<param type="int" name="pe"/>
		<param type="string" name="pubid"/>
		<param type="string" name="sysid"/>
		<param type="string" name="ndataid"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
		<param type="int" name="pe"/>
		<param type="string" name="pubid"/>
		<param type="string" name="sysid"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
		<param type="int" name="pe"/>
		<param type="string" name="pubid"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
		<param type="int" name="pe"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_dtd_entity" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeDTDEntity</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_dtd_entity</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   , <span class="methodparam"><span class="type">bool</span> <code class="parameter">$pe</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$pubid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$sysid</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$ndataid</code></span>   )</div>  <p class="para rdfs-comment">   Writes a full DTD entity.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeElement</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes a full element tag.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_element" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeElement</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_element</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes a full element tag.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_element_ns" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeElementNS</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_element_ns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes a full namespaced element tag.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="prefix"/>
		<param type="string" name="name"/>
		<param type="string" name="uri"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_element_ns" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeElementNS</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_element_ns</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$prefix</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$name</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$uri</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>  ] )</div>  <p class="para rdfs-comment">   Writes a full namespaced element tag.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="prefix"/>
		<param type="string" name="name"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_pi" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writePI</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_pi</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$target</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a processing instruction.    </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="target"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xmlwriter_write_raw" type="function" returnType="bool">
	<desc><![CDATA[<p class="para">Object oriented style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>XMLWriter::writeRaw</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">Procedural style</p>  <div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>xmlwriter_write_raw</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$xmlwriter</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$content</code></span>   )</div>  <p class="para rdfs-comment">   Writes a raw xml text.  </p>]]></desc>
	<params>
		<param type="resource" name="xmlwriter"/>
		<param type="string" name="content"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_get_parameter" type="function" returnType="string">
	<params>
		<param type="string" name="namespace"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_has_exslt_support" type="function" returnType="bool">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_import_stylesheet" type="function" returnType="void">
	<params>
		<param type="domdocument" name="doc"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_register_php_functions" type="function" returnType="void">
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_remove_parameter" type="function" returnType="bool">
	<params>
		<param type="string" name="namespace"/>
		<param type="string" name="name"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_set_parameter" type="function" returnType="bool">
	<params>
		<param type="string" name="namespace"/>
		<param type="mixed" name="name"/>
		<param type="string" name="value"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_set_parameter" type="function" returnType="bool">
	<params>
		<param type="string" name="namespace"/>
		<param type="mixed" name="name"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_transform_to_doc" type="function" returnType="domdocument">
	<params>
		<param type="domnode" name="doc"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_transform_to_uri" type="function" returnType="int">
	<params>
		<param type="domdocument" name="doc"/>
		<param type="string" name="uri"/>
	</params>
</keyword>
<keyword name="xsl_xsltprocessor_transform_to_xml" type="function" returnType="string">
	<params>
		<param type="domdocument" name="doc"/>
	</params>
</keyword>
<keyword name="zend_logo_guid" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zend_logo_guid</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function returns the ID which can be used to display the Zend logo   using the built-in image.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function has been<em class="emphasis">DEPRECATED</em> and <em class="emphasis">REMOVED</em> as of PHP 5.5.0.</p></div>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="zend_test_func" type="function" returnType="void">
	<params>
		<param type="mixed" name="arg1"/>
		<param type="mixed" name="arg2"/>
	</params>
</keyword>
<keyword name="zend_thread_id" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>zend_thread_id</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   This function returns a unique identifier for the current thread.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="zend_version" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zend_version</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns a string containing the version of the currently running   Zend Engine.  </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
<keyword name="zip_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type"><span class="type void">void</span></span> <span class="methodname"><strong>zip_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip</code></span>   )</div>  <p class="para rdfs-comment">   Closes the given ZIP file archive.  </p>]]></desc>
	<params>
		<param type="resource" name="zip"/>
	</params>
</keyword>
<keyword name="zip_entry_close" type="function" returnType="void">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>zip_entry_close</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   )</div>  <p class="para rdfs-comment">   Closes the specified directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_ent"/>
	</params>
</keyword>
<keyword name="zip_entry_compressedsize" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>zip_entry_compressedsize</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   )</div>  <p class="para rdfs-comment">   Returns the compressed size of the specified directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_entry_compressionmethod" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zip_entry_compressionmethod</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   )</div>  <p class="para rdfs-comment">   Returns the compression method of the directory entry specified   by <code class="parameter">zip_entry</code>.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_entry_filesize" type="function" returnType="int">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">int</span> <span class="methodname"><strong>zip_entry_filesize</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   )</div>  <p class="para rdfs-comment">   Returns the actual size of the specified directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_entry_name" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zip_entry_name</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   )</div>  <p class="para rdfs-comment">   Returns the name of the specified directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_entry_open" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>zip_entry_open</strong></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens a directory entry in a zip file for reading.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_dp"/>
		<param type="resource" name="zip_entry"/>
		<param type="string" name="mode"/>
	</params>
</keyword>
<keyword name="zip_entry_open" type="function" returnType="bool">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">bool</span> <span class="methodname"><strong>zip_entry_open</strong></span>          ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip</code></span>   , <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$mode</code></span>  ] )</div>  <p class="para rdfs-comment">   Opens a directory entry in a zip file for reading.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_dp"/>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_entry_read" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zip_entry_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 1024</span></span>  ] )</div>  <p class="para rdfs-comment">   Reads from an open directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
		<param type="int" name="len"/>
	</params>
</keyword>
<keyword name="zip_entry_read" type="function" returnType="mixed">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zip_entry_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip_entry</code></span>   [, <span class="methodparam"><span class="type">int</span> <code class="parameter">$length</code><span class="initializer"> = 1024</span></span>  ] )</div>  <p class="para rdfs-comment">   Reads from an open directory entry.  </p>]]></desc>
	<params>
		<param type="resource" name="zip_entry"/>
	</params>
</keyword>
<keyword name="zip_open" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>zip_open</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$filename</code></span>   )</div>  <p class="para rdfs-comment">   Opens a new zip archive for reading.   </p>]]></desc>
	<params>
		<param type="string" name="filename"/>
	</params>
</keyword>
<keyword name="zip_read" type="function" returnType="resource">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">resource</span> <span class="methodname"><strong>zip_read</strong></span>    ( <span class="methodparam"><span class="type">resource</span> <code class="parameter">$zip</code></span>   )</div>  <p class="para rdfs-comment">   Reads the next entry in a zip file archive.  </p>]]></desc>
	<params>
		<param type="resource" name="zip"/>
	</params>
</keyword>
<keyword name="zlib_decode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zlib_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$max_decoded_len</code></span>  ] )</div>  <p class="para rdfs-comment">   Uncompress any raw/gzip/zlib encoded data.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="max_decoded_len"/>
	</params>
</keyword>
<keyword name="zlib_decode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zlib_decode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$max_decoded_len</code></span>  ] )</div>  <p class="para rdfs-comment">   Uncompress any raw/gzip/zlib encoded data.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="binary" name="data"/>
	</params>
</keyword>
<keyword name="zlib_encode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zlib_encode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Compress data with the specified encoding.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="encoding"/>
		<param type="int" name="level"/>
	</params>
</keyword>
<keyword name="zlib_encode" type="function" returnType="binary">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zlib_encode</strong></span>    ( <span class="methodparam"><span class="type">string</span> <code class="parameter">$data</code></span>   , <span class="methodparam"><span class="type">string</span> <code class="parameter">$encoding</code></span>   [, <span class="methodparam"><span class="type">string</span> <code class="parameter">$level</code><span class="initializer"> = -1</span></span>  ] )</div>  <p class="para rdfs-comment">   Compress data with the specified encoding.  </p>  <div class="warning"><strong class="warning">Warning</strong><p class="simpara">This function iscurrently not documented; only its argument list is available.</p></div>]]></desc>
	<params>
		<param type="binary" name="data"/>
		<param type="int" name="encoding"/>
	</params>
</keyword>
<keyword name="zlib_get_coding_type" type="function" returnType="string">
	<desc><![CDATA[<div class="methodsynopsis dc-description">   <span class="type">string</span> <span class="methodname"><strong>zlib_get_coding_type</strong></span>    ( <span class="methodparam">void</span>   )</div>  <p class="para rdfs-comment">   Returns the coding type used for output compression.    </p>]]></desc>
	<params>
		<param type="d"/>
	</params>
</keyword>
	</keywords>

</api>
