package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


































































public class CSSTokenMaker
  extends AbstractJFlexCTokenMaker
{
  public static final int YYEOF = -1;
  public static final int CSS_C_STYLE_COMMENT = 5;
  public static final int LESS_EOL_COMMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int CSS_STRING = 3;
  public static final int CSS_VALUE = 2;
  public static final int CSS_PROPERTY = 1;
  public static final int CSS_CHAR_LITERAL = 4;
  private static final String ZZ_CMAP_PACKED = "\t\000\001!\0014\025\000\001!\001+\0010\001\037\001-\001&\001(\0011\001$\0015\001\005\001,\001/\001\004\001\006\001\"\n\001\001\007\001 \001\000\001,\0013\001)\001\035\006'\024\002\001*\001#\001*\0013\001\003\001\000\001\021\001\034\001\r\001\020\001\026\001\023\001\033\001\f\001\016\001\002\001\030\001\017\001\027\001\013\001\t\001\025\001\002\001\b\001\022\001\n\001\032\001\031\001\036\001%\001\024\001\002\001.\0013\0012\001,ﾁ\000";
  private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001!\0014\025\000\001!\001+\0010\001\037\001-\001&\001(\0011\001$\0015\001\005\001,\001/\001\004\001\006\001\"\n\001\001\007\001 \001\000\001,\0013\001)\001\035\006'\024\002\001*\001#\001*\0013\001\003\001\000\001\021\001\034\001\r\001\020\001\026\001\023\001\033\001\f\001\016\001\002\001\030\001\017\001\027\001\013\001\t\001\025\001\002\001\b\001\022\001\n\001\032\001\031\001\036\001%\001\024\001\002\001.\0013\0012\001,ﾁ\000");



  
  private static final int[] ZZ_ACTION = zzUnpackAction();






  
  private static final String ZZ_ACTION_PACKED_0 = "\002\000\001\001\004\000\001\002\001\003\002\004\001\005\002\002\001\006\001\007\001\002\001\b\001\t\001\001\001\n\001\013\001\f\001\r\001\016\001\017\002\020\001\021\003\016\001\022\001\023\001\024\001\025\001\026\002\001\002\025\001\027\001\001\001\030\001\025\001\031\001\032\001\033\001\034\001\035\001\036\001\033\001\037\001 \005\033\001!\004\033\001\"\002\000\001\003\003\000\001\004\r\000\n#\001\003\001$\001\003\001%\001&\002\000\001'\001(\001)\002\000\001\026\003\000\001\026\001*\001\000\001\034\001+\033\000\t#\r\000\001\017\016\000\001\017\f\000\t#\026\000\001,\002\000\001-\f\000\005#\001.\002#\005\000\001\020\031\000\006#\021\000\003#\f\000\002#\007\000\001#\t\000\001/\003\000";







  
  private static int[] zzUnpackAction() {
    int[] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction("\002\000\001\001\004\000\001\002\001\003\002\004\001\005\002\002\001\006\001\007\001\002\001\b\001\t\001\001\001\n\001\013\001\f\001\r\001\016\001\017\002\020\001\021\003\016\001\022\001\023\001\024\001\025\001\026\002\001\002\025\001\027\001\001\001\030\001\025\001\031\001\032\001\033\001\034\001\035\001\036\001\033\001\037\001 \005\033\001!\004\033\001\"\002\000\001\003\003\000\001\004\r\000\n#\001\003\001$\001\003\001%\001&\002\000\001'\001(\001)\002\000\001\026\003\000\001\026\001*\001\000\001\034\001+\033\000\t#\r\000\001\017\016\000\001\017\f\000\t#\026\000\001,\002\000\001-\f\000\005#\001.\002#\005\000\001\020\031\000\006#\021\000\003#\f\000\002#\007\000\001#\t\000\001/\003\000", offset, result);
    return result;
  }
  
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }




  
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();





















  
  private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\0006\000l\000¢\000Ø\000Ď\000ń\000ź\000ư\000Ǧ\000Ȝ\000ɒ\000ʈ\000ʾ\000ź\000˴\000̪\000ź\000ź\000ź\000ź\000ź\000ź\000ź\000ź\000͠\000Ζ\000ό\000ź\000Ђ\000и\000Ѯ\000ź\000ź\000ź\000ź\000Ҥ\000Ӛ\000Ԑ\000Ђ\000Ն\000ź\000ռ\000ź\000ֲ\000ź\000ź\000ר\000؞\000ź\000ź\000ٔ\000ź\000ź\000ڊ\000ۀ\000۶\000ܬ\000ݢ\000ź\000ޘ\000ߎ\000ࠄ\000࠺\000ź\000ࡰ\000ࢦ\000ź\000ࣜ\000ऒ\000ै\000ॾ\000঴\000৪\000ਠ\000੖\000ઌ\000ૂ\000૸\000ମ\000୤\000ச\000ௐ\000ఆ\000఼\000౲\000ನ\000ೞ\000ഔ\000ൊ\000඀\000බ\000෬\000ย\000๘\000ຎ\000ໄ\000໺\000ź\000ź\000༰\000ས\000ྜ\000ź\000࿒\000ဈ\000ှ\000ź\000ၴ\000Ⴊ\000რ\000Ն\000Ӛ\000ᄖ\000ź\000ź\000ᅌ\000ᆂ\000ᆸ\000ᇮ\000ሤ\000ቚ\000ነ\000዆\000ዼ\000ጲ\000፨\000᎞\000Ꮤ\000ᐊ\000ᑀ\000ᑶ\000ᒬ\000ᓢ\000ᔘ\000ᕎ\000ᖄ\000ᖺ\000ᗰ\000ᘦ\000ᙜ\000ᚒ\000ᛈ\000᛾\000᜴\000ᝪ\000ហ\000៖\000᠌\000ᡂ\000ᡸ\000᢮\000ᣤ\000ᤚ\000ᥐ\000ᦆ\000ᦼ\000᧲\000ᨨ\000ᩞ\000᪔\000᫊\000ᬀ\000ᬶ\000᭬\000ᮢ\000ᯘ\000ᰎ\000᱄\000ᱺ\000Ჰ\000᳦\000ᴜ\000ᵒ\000ᶈ\000ᶾ\000ᷴ\000Ḫ\000Ṡ\000ẖ\000ź\000Ọ\000ἂ\000Ἰ\000Ὦ\000ᾤ\000Ὶ\000‐\000⁆\000⁼\000₲\000⃨\000℞\000⅔\000↊\000⇀\000⇶\000∬\000≢\000⊘\000⋎\000⌄\000⌺\000⍰\000⎦\000⏜\000␒\000⑈\000⑾\000⒴\000⓪\000┠\000╖\000▌\000◂\000◸\000☮\000♤\000⚚\000⛐\000✆\000✼\000❲\000➨\000⟞\000⠔\000⡊\000⢀\000⢶\000⣬\000⤢\000⥘\000⦎\000⧄\000⧺\000⨰\000⩦\000⪜\000⫒\000⬈\000⬾\000⭴\000⮪\000⯠\000Ⱆ\000౲\000ⱌ\000Ⲃ\000Ⲹ\000ⳮ\000ⴤ\000ⵚ\000ⶐ\000ⷆ\000ⷼ\000⸲\000⹨\000⺞\000⻔\000⼊\000⽀\000⽶\000⾬\000⿢\000〘\000ぎ\000や\000ズ\000⟞\000ヰ\000⢀\000ㄦ\000ㅜ\000㆒\000㇈\000ㇾ\000㈴\000㉪\000㊠\000㋖\000㌌\000㍂\000㍸\000㎮\000㏤\000㐚\000㑐\000㒆\000㒼\000㓲\000㔨\000㕞\000㖔\000㗊\000㘀\000㘶\000㙬\000㚢\000㛘\000㜎\000㝄\000㝺\000㞰\000㟦\000㠜\000㡒\000㢈\000㢾\000㣴\000㤪\000㥠\000㦖\000㧌\000㨂\000㨸\000㩮\000㪤\000㫚\000㬐\000㭆\000㭼\000㮲\000㯨\000㰞\000㱔\000㲊\000㳀\000㳶\000㴬\000㵢\000㶘\000㷎\000㸄\000㸺\000㹰\000㺦\000ź\000㻜\000㼒\000㽈";






















  
  private static int[] zzUnpackRowMap() {
    int[] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap("\000\000\0006\000l\000¢\000Ø\000Ď\000ń\000ź\000ư\000Ǧ\000Ȝ\000ɒ\000ʈ\000ʾ\000ź\000˴\000̪\000ź\000ź\000ź\000ź\000ź\000ź\000ź\000ź\000͠\000Ζ\000ό\000ź\000Ђ\000и\000Ѯ\000ź\000ź\000ź\000ź\000Ҥ\000Ӛ\000Ԑ\000Ђ\000Ն\000ź\000ռ\000ź\000ֲ\000ź\000ź\000ר\000؞\000ź\000ź\000ٔ\000ź\000ź\000ڊ\000ۀ\000۶\000ܬ\000ݢ\000ź\000ޘ\000ߎ\000ࠄ\000࠺\000ź\000ࡰ\000ࢦ\000ź\000ࣜ\000ऒ\000ै\000ॾ\000঴\000৪\000ਠ\000੖\000ઌ\000ૂ\000૸\000ମ\000୤\000ச\000ௐ\000ఆ\000఼\000౲\000ನ\000ೞ\000ഔ\000ൊ\000඀\000බ\000෬\000ย\000๘\000ຎ\000ໄ\000໺\000ź\000ź\000༰\000ས\000ྜ\000ź\000࿒\000ဈ\000ှ\000ź\000ၴ\000Ⴊ\000რ\000Ն\000Ӛ\000ᄖ\000ź\000ź\000ᅌ\000ᆂ\000ᆸ\000ᇮ\000ሤ\000ቚ\000ነ\000዆\000ዼ\000ጲ\000፨\000᎞\000Ꮤ\000ᐊ\000ᑀ\000ᑶ\000ᒬ\000ᓢ\000ᔘ\000ᕎ\000ᖄ\000ᖺ\000ᗰ\000ᘦ\000ᙜ\000ᚒ\000ᛈ\000᛾\000᜴\000ᝪ\000ហ\000៖\000᠌\000ᡂ\000ᡸ\000᢮\000ᣤ\000ᤚ\000ᥐ\000ᦆ\000ᦼ\000᧲\000ᨨ\000ᩞ\000᪔\000᫊\000ᬀ\000ᬶ\000᭬\000ᮢ\000ᯘ\000ᰎ\000᱄\000ᱺ\000Ჰ\000᳦\000ᴜ\000ᵒ\000ᶈ\000ᶾ\000ᷴ\000Ḫ\000Ṡ\000ẖ\000ź\000Ọ\000ἂ\000Ἰ\000Ὦ\000ᾤ\000Ὶ\000‐\000⁆\000⁼\000₲\000⃨\000℞\000⅔\000↊\000⇀\000⇶\000∬\000≢\000⊘\000⋎\000⌄\000⌺\000⍰\000⎦\000⏜\000␒\000⑈\000⑾\000⒴\000⓪\000┠\000╖\000▌\000◂\000◸\000☮\000♤\000⚚\000⛐\000✆\000✼\000❲\000➨\000⟞\000⠔\000⡊\000⢀\000⢶\000⣬\000⤢\000⥘\000⦎\000⧄\000⧺\000⨰\000⩦\000⪜\000⫒\000⬈\000⬾\000⭴\000⮪\000⯠\000Ⱆ\000౲\000ⱌ\000Ⲃ\000Ⲹ\000ⳮ\000ⴤ\000ⵚ\000ⶐ\000ⷆ\000ⷼ\000⸲\000⹨\000⺞\000⻔\000⼊\000⽀\000⽶\000⾬\000⿢\000〘\000ぎ\000や\000ズ\000⟞\000ヰ\000⢀\000ㄦ\000ㅜ\000㆒\000㇈\000ㇾ\000㈴\000㉪\000㊠\000㋖\000㌌\000㍂\000㍸\000㎮\000㏤\000㐚\000㑐\000㒆\000㒼\000㓲\000㔨\000㕞\000㖔\000㗊\000㘀\000㘶\000㙬\000㚢\000㛘\000㜎\000㝄\000㝺\000㞰\000㟦\000㠜\000㡒\000㢈\000㢾\000㣴\000㤪\000㥠\000㦖\000㧌\000㨂\000㨸\000㩮\000㪤\000㫚\000㬐\000㭆\000㭼\000㮲\000㯨\000㰞\000㱔\000㲊\000㳀\000㳶\000㴬\000㵢\000㶘\000㷎\000㸄\000㸺\000㹰\000㺦\000ź\000㻜\000㼒\000㽈", offset, result);
    return result;
  }
  
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    } 
    return j;
  }



  
  private static final int[] ZZ_TRANS = zzUnpackTrans();










































  
  private static final String ZZ_TRANS_PACKED_0 = "\001\b\001\t\002\n\001\013\002\n\001\f\025\n\001\r\001\n\001\016\001\017\001\020\001\021\001\b\001\017\001\n\001\b\001\n\002\b\001\017\001\b\002\022\001\023\001\024\001\025\001\026\001\027\001\022\001\030\001\017\002\031\003\032\001\033\001\034\001\035\025\032\001\036\001\032\002\031\001\020\001\037\002\031\001\032\001\031\001\032\001 \005\031\001!\003\031\001\"\001\031\001#\001\031\001$\001%\002&\001'\001$\001\024\001$\025&\001(\001&\001)\001*\001\020\001+\001&\001,\001&\001$\001&\003$\001-\003$\001\024\001\025\001\026\001\"\001$\001.\001/#0\0011\f0\0012\0030\0013\0010#4\0011\r4\0015\0024\0016\0014\0057\0018\0067\0019\0067\001:\n7\001;\0257\001<\0017\f=\001>\006=\001?\n=\001@\025=\001A\001=7\000\001\t\004\000\001\t\006\000\001B\001C\003\000\001D\002\000\001E\001F\001G\016\000\001D\020\000\004\n\001\000\001\n\001\000\025\n\001\000\001\n\006\000\001\n\001\000\001\n\017\000\001H\003\n\001\000\001\n\001\000\025\n\001\000\001\n\006\000\001\n\001\000\001\n\025\000\001I\001J\001K\001L\001M\001N\001O\001\000\001P\001Q\001R\001\000\001S\002\000\001T\002\000\001U\036\000\003V\003\000\003V\001W\001V\001X\001Y\001V\001Z\002V\001[\001V\001\\\001V\001]\001^\001_\003V\001\000\001V\006\000\001V\001\000\001V\017\000\001`\005a\001\000\005a\001b\002a\002b\001a\001b\002a\001b\005a\001b\001\000\001a\006\000\001a\001\000\001b/\000\001\020\031\000\001c\034\000\001d\024\000\004\032\001\000\001\034\001e\025\032\001\000\001\032\006\000\001\032\001\000\001\032\017\000\001\034\003\032\001\000\001\034\001f\025\032\001\000\001\032\006\000\001\032\001\000\001\032\017\000\004\034\001\000\001\034\001f\025\034\001\000\001\034\006\000\001\034\001\000\001\034\020\000\003g\003\000\025g\001\000\001g\006\000\001g\001\000\001g\023\000\001c\034\000\001h\025\000\005i\001\000\025i\001\000\001i\006\000\001i\001\000\001i\017\000\001%\004\000\001%\006\000\001j\001k\003\000\001l\002\000\001m\001n\001o\016\000\001l\021\000\003&\003\000\025&\001\000\001&\003\000\002&\001,\001&\001\000\001&\017\000\001%\003&\003\000\025&\001\000\001&\003\000\002&\001,\001&\001\000\001&\017\000\001p\013\000\001p\002\000\002p\001\000\001p\002\000\001p\005\000\001p\n\000\001p\020\000\003&\001c\002\000\025&\001\000\001&\003\000\001q\001&\001,\001&\001\000\001&\034\000\001r'\000#0\001\000\f0\001\000\0030\001\000\00104s\001\000\001s#4\001\000\r4\001\000\0024\001\000\0014\0057\001\000\0067\001\000\0067\001\000\n7\001\000\0257\001\000\0017\"\000\001t\035\000\001u5\000\001v\003\000\001wE\000\001x\027\000\f=\001\000\006=\001\000\n=\001\000\025=\001\000\001=\n\000\001y5\000\001z\003\000\001{E\000\001|.\000\001D)\000\001D4\000\001D\002\000\001D\027\000\001D'\000\001D\r\000\001D\"\000\001D\004\000\001D\037\000\001H\003\n\001\000\001H\001\000\025\n\001\000\001\n\006\000\001\n\001D\001\n\037\000\001}\001\000\001~\b\000\001\"\000\0017\000\001;\000\001-\000\001\0014\000\0018\000\0017\000\001\002\000\0012\000\0014\000\0011\000\001\004\000\0012\000\001\013\000\001,\000\001(\000\004V\001\000\001V\001\000\025V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\004V\001\020V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001\005V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\006V\001\016V\001\000\001V\006\000\001V\001\000\001V\017\000\001`\013\000\001`\002\000\002`\001\000\001`\002\000\001`\005\000\001`\n\000\001`\017\000\004a\001\000\001a\001\000\025a\001\000\001a\006\000\001a\001\000\001a\017\000\001b\003a\001\000\001a\001\000\005a\001b\002a\002b\001a\001b\002a\001b\005a\001b\001\000\001a\006\000\001a\001\000\001b\025\000\001\001\001\001\001\001\001\001\000\001 \001¡\001¢\001\000\001£\002\000\001¤\002\000\001¥\004\000\001¦\036\000\001\001\001\001\001\001\001\001\000\001 \001¡\001¢\001\000\001£\002\000\001¤\002\000\001¥\035\000\004g\001\000\001g\001\000\025g\001\000\001g\006\000\001g\001\000\001g\017\000\004i\001\000\001i\001\000\025i\001\000\001i\006\000\001i\001\000\001i%\000\001l)\000\001l4\000\001l\002\000\001l\027\000\001l'\000\001l\r\000\001l\"\000\001l\004\000\001l5\000\001§(\000\001¨@\000\001©/\000\001ªD\000\001«!\000\001¬@\000\001­/\000\001®D\000\001¯*\000\001°0\000\001±=\000\001²(\000\001;\000\001³.\000\001´7\000\001µ7\000\001¶B\000\001·2\000\001¸*\000\001¹5\000\001º\006\000\001»5\000\001-\000\001¼8\000\001½0\000\001¾>\000\001¿9\000\001À2\000\001Á$\000\004V\001\000\001V\001\000\017V\001Â\005V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001Ã\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\rV\001Ä\007V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\005V\001Å\017V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\003V\001Æ\021V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\023V\001Ç\001V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\bV\001È\fV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\fV\001É\bV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ê\006V\001\000\001V\006\000\001V\001\000\001V\037\000\001Ë\001\000\001Ì\b\000\001Í\"\000\001Î7\000\001Ï;\000\001Ð-\000\001Ñ\001Ò4\000\001Ó8\000\001Ô7\000\001Õ\002\000\001Ö2\000\001×4\000\001Ø1\000\001Ù\004\000\001Ú2\000\001Û\013\000\001Ü,\000\001ÝE\000\001¦,\000\001Þ5\000\001ß'\000\001àD\000\001©%\000\001áD\000\001â'\000\001ãD\000\001­%\000\001ä9\000\001·3\000\001å@\000\001æ6\000\001ç<\000\001è\036\000\001éG\000\001ê,\000\001ë@\000\001µ8\000\001µ$\000\001ç9\000\001ìA\000\001í-\000\001»?\000\001î#\000\001ï9\000\001ð(\000\004V\001\000\001V\001\000\016V\001ñ\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001ò\024V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001ó\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\022V\001ô\002V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\002V\001õ\022V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001ö\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\006V\001÷\016V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\013V\001ø\tV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\025V\001\000\001\006\000\001V\001\000\001V!\000\001ù0\000\001ú=\000\001û(\000\001Ñ;\000\001ü.\000\001ý7\000\001þ7\000\001ÿB\000\001Ā2\000\001ā*\000\001Ă5\000\001ă\006\000\001Ą5\000\001Û-\000\001ą8\000\001Ć0\000\001ć>\000\001Ĉ9\000\001ĉ2\000\001Ċ,\000\001ċ3\000\001à\n\000\001©E\000\001Č\024\000\002á\005č\025á\001č\001á\002č\001\000\001á\001\000\001č\001á\001č\001á\005č\001á\001\000\001č\001\000\001č\003\000\001č\007\000\001ã\n\000\001­E\000\001Ď\024\000\002ä\005ď\025ä\001ď\001ä\002ď\001\000\001ä\001\000\001ď\001ä\001ď\001ä\005ď\001ä\001\000\001ď\001\000\001ď\003\000\001ď\022\000\001Đ,\000\001đ0\000\001ĒG\000\001(\000\001ē\003\000\001Ĕ\001\000\001ĕ.\000\001µE\000\001Ė6\000\001ė.\000\001µ2\000\001Ė:\000\001µ+\000\001Ė,\000\004V\001\000\001V\001\000\nV\001Ę\nV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\nV\001ę\nV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001Ě\024V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001ě\005V\001\000\001V\006\000\001V\001\000\001V\017\000\003V\001Ĝ\001\000\001V\001\000\025V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001ö\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001ĝ\024V\001\000\001V\006\000\001V\001\000\001V\030\000\001Ā3\000\001Ğ@\000\001ğ6\000\001Ġ<\000\001ġ!\000\001f2\000\001ĢG\000\001ģ,\000\001Ĥ@\000\001þ8\000\001þ$\000\001Ġ9\000\001ĥA\000\001Ħ-\000\001Ą?\000\001ħ#\000\001Ĩ9\000\001ĩ/\000\001ĪO\000\001á5\000\001ä\035\000\001ī3\000\001ė6\000\001ē\003\000\001Ĕ;\000\001Ĭ.\000\001ĭ:\000\001¾:\000\001Į5\000\001µ \000\004V\001\000\001V\001\000\rV\001į\007V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ě\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\002V\001ö\022V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001İ\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\013V\001į\tV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001ı\013V\001\000\001V\006\000\001V\001\000\001V \000\001Ĳ,\000\001ĳ0\000\001ĴG\000\001Ñ(\000\001ĵ\003\000\001Ķ\001\000\001ķ.\000\001þE\000\001ĸ6\000\001Ĺ.\000\001þ2\000\001ĸ:\000\001þ+\000\001ĸ5\000\001ĺ/\000\001Ļ5\000\001ļ?\000\001Ľ7\000\001µ&\000\004V\001\000\001V\001\000\tV\001ľ\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\003V\001Ě\021V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001Ŀ\005V\001\000\001V\006\000\001V\001\000\001V\030\000\001ŀ3\000\001Ĺ6\000\001ĵ\003\000\001Ķ;\000\001Ł.\000\001ł:\000\001ć:\000\001Ń5\000\001þ0\000\001ń3\000\001Ņ0\000\001ņ:\000\001Į'\000\004V\001\000\001V\001\000\005V\001Ç\017V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ň\006V\001\000\001V\006\000\001V\001\000\001V\022\000\001ň5\000\001ŉ?\000\001Ŋ7\000\001þ0\000\001ŋ8\000\001Ō\007\000\001ō3\000\001Ŏ\"\000\004V\001\000\001V\001\000\nV\001ö\nV\001\000\001V\006\000\001V\001\000\001V\035\000\001ŏ0\000\001Ő:\000\001Ń0\000\001ő6\000\001ė4\000\001°@\000\001ė.\000\001Œ\007\000\001œ3\000\001Ŕ,\000\001Ĺ4\000\001ù@\000\001Ĺ \000";









































  
  private static final int ZZ_UNKNOWN_ERROR = 0;









































  
  private static final int ZZ_NO_MATCH = 1;









































  
  private static final int ZZ_PUSHBACK_2BIG = 2;










































  
  private static int[] zzUnpackTrans() {
    int[] result = new int[16254];
    int offset = 0;
    offset = zzUnpackTrans("\001\b\001\t\002\n\001\013\002\n\001\f\025\n\001\r\001\n\001\016\001\017\001\020\001\021\001\b\001\017\001\n\001\b\001\n\002\b\001\017\001\b\002\022\001\023\001\024\001\025\001\026\001\027\001\022\001\030\001\017\002\031\003\032\001\033\001\034\001\035\025\032\001\036\001\032\002\031\001\020\001\037\002\031\001\032\001\031\001\032\001 \005\031\001!\003\031\001\"\001\031\001#\001\031\001$\001%\002&\001'\001$\001\024\001$\025&\001(\001&\001)\001*\001\020\001+\001&\001,\001&\001$\001&\003$\001-\003$\001\024\001\025\001\026\001\"\001$\001.\001/#0\0011\f0\0012\0030\0013\0010#4\0011\r4\0015\0024\0016\0014\0057\0018\0067\0019\0067\001:\n7\001;\0257\001<\0017\f=\001>\006=\001?\n=\001@\025=\001A\001=7\000\001\t\004\000\001\t\006\000\001B\001C\003\000\001D\002\000\001E\001F\001G\016\000\001D\020\000\004\n\001\000\001\n\001\000\025\n\001\000\001\n\006\000\001\n\001\000\001\n\017\000\001H\003\n\001\000\001\n\001\000\025\n\001\000\001\n\006\000\001\n\001\000\001\n\025\000\001I\001J\001K\001L\001M\001N\001O\001\000\001P\001Q\001R\001\000\001S\002\000\001T\002\000\001U\036\000\003V\003\000\003V\001W\001V\001X\001Y\001V\001Z\002V\001[\001V\001\\\001V\001]\001^\001_\003V\001\000\001V\006\000\001V\001\000\001V\017\000\001`\005a\001\000\005a\001b\002a\002b\001a\001b\002a\001b\005a\001b\001\000\001a\006\000\001a\001\000\001b/\000\001\020\031\000\001c\034\000\001d\024\000\004\032\001\000\001\034\001e\025\032\001\000\001\032\006\000\001\032\001\000\001\032\017\000\001\034\003\032\001\000\001\034\001f\025\032\001\000\001\032\006\000\001\032\001\000\001\032\017\000\004\034\001\000\001\034\001f\025\034\001\000\001\034\006\000\001\034\001\000\001\034\020\000\003g\003\000\025g\001\000\001g\006\000\001g\001\000\001g\023\000\001c\034\000\001h\025\000\005i\001\000\025i\001\000\001i\006\000\001i\001\000\001i\017\000\001%\004\000\001%\006\000\001j\001k\003\000\001l\002\000\001m\001n\001o\016\000\001l\021\000\003&\003\000\025&\001\000\001&\003\000\002&\001,\001&\001\000\001&\017\000\001%\003&\003\000\025&\001\000\001&\003\000\002&\001,\001&\001\000\001&\017\000\001p\013\000\001p\002\000\002p\001\000\001p\002\000\001p\005\000\001p\n\000\001p\020\000\003&\001c\002\000\025&\001\000\001&\003\000\001q\001&\001,\001&\001\000\001&\034\000\001r'\000#0\001\000\f0\001\000\0030\001\000\00104s\001\000\001s#4\001\000\r4\001\000\0024\001\000\0014\0057\001\000\0067\001\000\0067\001\000\n7\001\000\0257\001\000\0017\"\000\001t\035\000\001u5\000\001v\003\000\001wE\000\001x\027\000\f=\001\000\006=\001\000\n=\001\000\025=\001\000\001=\n\000\001y5\000\001z\003\000\001{E\000\001|.\000\001D)\000\001D4\000\001D\002\000\001D\027\000\001D'\000\001D\r\000\001D\"\000\001D\004\000\001D\037\000\001H\003\n\001\000\001H\001\000\025\n\001\000\001\n\006\000\001\n\001D\001\n\037\000\001}\001\000\001~\b\000\001\"\000\0017\000\001;\000\001-\000\001\0014\000\0018\000\0017\000\001\002\000\0012\000\0014\000\0011\000\001\004\000\0012\000\001\013\000\001,\000\001(\000\004V\001\000\001V\001\000\025V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\004V\001\020V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001\005V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\006V\001\016V\001\000\001V\006\000\001V\001\000\001V\017\000\001`\013\000\001`\002\000\002`\001\000\001`\002\000\001`\005\000\001`\n\000\001`\017\000\004a\001\000\001a\001\000\025a\001\000\001a\006\000\001a\001\000\001a\017\000\001b\003a\001\000\001a\001\000\005a\001b\002a\002b\001a\001b\002a\001b\005a\001b\001\000\001a\006\000\001a\001\000\001b\025\000\001\001\001\001\001\001\001\001\000\001 \001¡\001¢\001\000\001£\002\000\001¤\002\000\001¥\004\000\001¦\036\000\001\001\001\001\001\001\001\001\000\001 \001¡\001¢\001\000\001£\002\000\001¤\002\000\001¥\035\000\004g\001\000\001g\001\000\025g\001\000\001g\006\000\001g\001\000\001g\017\000\004i\001\000\001i\001\000\025i\001\000\001i\006\000\001i\001\000\001i%\000\001l)\000\001l4\000\001l\002\000\001l\027\000\001l'\000\001l\r\000\001l\"\000\001l\004\000\001l5\000\001§(\000\001¨@\000\001©/\000\001ªD\000\001«!\000\001¬@\000\001­/\000\001®D\000\001¯*\000\001°0\000\001±=\000\001²(\000\001;\000\001³.\000\001´7\000\001µ7\000\001¶B\000\001·2\000\001¸*\000\001¹5\000\001º\006\000\001»5\000\001-\000\001¼8\000\001½0\000\001¾>\000\001¿9\000\001À2\000\001Á$\000\004V\001\000\001V\001\000\017V\001Â\005V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001Ã\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\rV\001Ä\007V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\005V\001Å\017V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\003V\001Æ\021V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\023V\001Ç\001V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\bV\001È\fV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\fV\001É\bV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ê\006V\001\000\001V\006\000\001V\001\000\001V\037\000\001Ë\001\000\001Ì\b\000\001Í\"\000\001Î7\000\001Ï;\000\001Ð-\000\001Ñ\001Ò4\000\001Ó8\000\001Ô7\000\001Õ\002\000\001Ö2\000\001×4\000\001Ø1\000\001Ù\004\000\001Ú2\000\001Û\013\000\001Ü,\000\001ÝE\000\001¦,\000\001Þ5\000\001ß'\000\001àD\000\001©%\000\001áD\000\001â'\000\001ãD\000\001­%\000\001ä9\000\001·3\000\001å@\000\001æ6\000\001ç<\000\001è\036\000\001éG\000\001ê,\000\001ë@\000\001µ8\000\001µ$\000\001ç9\000\001ìA\000\001í-\000\001»?\000\001î#\000\001ï9\000\001ð(\000\004V\001\000\001V\001\000\016V\001ñ\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001ò\024V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001V\001ó\023V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\022V\001ô\002V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\002V\001õ\022V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001ö\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\006V\001÷\016V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\013V\001ø\tV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\025V\001\000\001\006\000\001V\001\000\001V!\000\001ù0\000\001ú=\000\001û(\000\001Ñ;\000\001ü.\000\001ý7\000\001þ7\000\001ÿB\000\001Ā2\000\001ā*\000\001Ă5\000\001ă\006\000\001Ą5\000\001Û-\000\001ą8\000\001Ć0\000\001ć>\000\001Ĉ9\000\001ĉ2\000\001Ċ,\000\001ċ3\000\001à\n\000\001©E\000\001Č\024\000\002á\005č\025á\001č\001á\002č\001\000\001á\001\000\001č\001á\001č\001á\005č\001á\001\000\001č\001\000\001č\003\000\001č\007\000\001ã\n\000\001­E\000\001Ď\024\000\002ä\005ď\025ä\001ď\001ä\002ď\001\000\001ä\001\000\001ď\001ä\001ď\001ä\005ď\001ä\001\000\001ď\001\000\001ď\003\000\001ď\022\000\001Đ,\000\001đ0\000\001ĒG\000\001(\000\001ē\003\000\001Ĕ\001\000\001ĕ.\000\001µE\000\001Ė6\000\001ė.\000\001µ2\000\001Ė:\000\001µ+\000\001Ė,\000\004V\001\000\001V\001\000\nV\001Ę\nV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\nV\001ę\nV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001Ě\024V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001ě\005V\001\000\001V\006\000\001V\001\000\001V\017\000\003V\001Ĝ\001\000\001V\001\000\025V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001ö\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\001ĝ\024V\001\000\001V\006\000\001V\001\000\001V\030\000\001Ā3\000\001Ğ@\000\001ğ6\000\001Ġ<\000\001ġ!\000\001f2\000\001ĢG\000\001ģ,\000\001Ĥ@\000\001þ8\000\001þ$\000\001Ġ9\000\001ĥA\000\001Ħ-\000\001Ą?\000\001ħ#\000\001Ĩ9\000\001ĩ/\000\001ĪO\000\001á5\000\001ä\035\000\001ī3\000\001ė6\000\001ē\003\000\001Ĕ;\000\001Ĭ.\000\001ĭ:\000\001¾:\000\001Į5\000\001µ \000\004V\001\000\001V\001\000\rV\001į\007V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ě\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\002V\001ö\022V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001İ\006V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\013V\001į\tV\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\tV\001ı\013V\001\000\001V\006\000\001V\001\000\001V \000\001Ĳ,\000\001ĳ0\000\001ĴG\000\001Ñ(\000\001ĵ\003\000\001Ķ\001\000\001ķ.\000\001þE\000\001ĸ6\000\001Ĺ.\000\001þ2\000\001ĸ:\000\001þ+\000\001ĸ5\000\001ĺ/\000\001Ļ5\000\001ļ?\000\001Ľ7\000\001µ&\000\004V\001\000\001V\001\000\tV\001ľ\013V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\003V\001Ě\021V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\017V\001Ŀ\005V\001\000\001V\006\000\001V\001\000\001V\030\000\001ŀ3\000\001Ĺ6\000\001ĵ\003\000\001Ķ;\000\001Ł.\000\001ł:\000\001ć:\000\001Ń5\000\001þ0\000\001ń3\000\001Ņ0\000\001ņ:\000\001Į'\000\004V\001\000\001V\001\000\005V\001Ç\017V\001\000\001V\006\000\001V\001\000\001V\017\000\004V\001\000\001V\001\000\016V\001Ň\006V\001\000\001V\006\000\001V\001\000\001V\022\000\001ň5\000\001ŉ?\000\001Ŋ7\000\001þ0\000\001ŋ8\000\001Ō\007\000\001ō3\000\001Ŏ\"\000\004V\001\000\001V\001\000\nV\001ö\nV\001\000\001V\006\000\001V\001\000\001V\035\000\001ŏ0\000\001Ő:\000\001Ń0\000\001ő6\000\001ė4\000\001°@\000\001ė.\000\001Œ\007\000\001œ3\000\001Ŕ,\000\001Ĺ4\000\001ù@\000\001Ĺ \000", offset, result);
    return result;
  }
  
  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--; while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };







  
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  
  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\002\000\001\001\004\000\001\t\006\001\001\t\002\001\b\t\003\001\001\t\003\001\004\t\005\001\001\t\001\001\001\t\001\001\002\t\002\001\002\t\001\001\002\t\005\001\001\t\004\001\001\t\002\000\001\t\003\000\001\001\r\000\r\001\002\t\002\000\001\001\001\t\001\001\002\000\001\t\003\000\002\001\001\000\002\t\033\000\t\001\r\000\001\001\016\000\001\t\f\000\t\001\026\000\001\001\002\000\001\001\f\000\b\001\005\000\001\001\031\000\006\001\021\000\003\001\f\000\002\001\007\000\001\001\t\000\001\t\003\000";

  
  private Reader zzReader;

  
  private int zzState;


  
  private static int[] zzUnpackAttribute() {
    int[] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute("\002\000\001\001\004\000\001\t\006\001\001\t\002\001\b\t\003\001\001\t\003\001\004\t\005\001\001\t\001\001\001\t\001\001\002\t\002\001\002\t\001\001\002\t\005\001\001\t\004\001\001\t\002\000\001\t\003\000\001\001\r\000\r\001\002\t\002\000\001\001\001\t\001\001\002\000\001\t\003\000\002\001\001\000\002\t\033\000\t\001\r\000\001\001\016\000\001\t\f\000\t\001\026\000\001\001\002\000\001\001\f\000\b\001\005\000\001\001\031\000\006\001\021\000\003\001\f\000\002\001\007\000\001\001\t\000\001\t\003\000", offset, result);
    return result;
  }
  
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private int zzLexicalState = 0;




  
  private char[] zzBuffer;




  
  private int zzMarkedPos;



  
  private int zzCurrentPos;



  
  private int zzStartRead;



  
  private int zzEndRead;



  
  private boolean zzAtEOF;



  
  public static final int INTERNAL_CSS_PROPERTY = -1;



  
  public static final int INTERNAL_CSS_VALUE = -2;



  
  public static final int INTERNAL_CSS_STRING = -2048;



  
  public static final int INTERNAL_CSS_CHAR = -4096;



  
  public static final int INTERNAL_CSS_MLC = -6144;



  
  private int cssPrevState;



  
  private boolean highlightingLess;




  
  public CSSTokenMaker() {}




  
  private void addEndToken(int tokenType) {
    addToken(this.zzMarkedPos, this.zzMarkedPos, tokenType);
  }







  
  private void addHyperlinkToken(int start, int end, int tokenType) {
    int so = start + this.offsetShift;
    addToken(this.zzBuffer, start, end, tokenType, so, true);
  }






  
  private void addToken(int tokenType) {
    addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
  }






  
  private void addToken(int start, int end, int tokenType) {
    int so = start + this.offsetShift;
    addToken(this.zzBuffer, start, end, tokenType, so);
  }












  
  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    this.zzStartRead = this.zzMarkedPos;
  }






  
  public int getClosestStandardTokenTypeForInternalType(int type) {
    switch (type) {
      case -4096:
      case -2048:
        return 13;
      case -6144:
        return 2;
    } 
    return type;
  }






  
  public boolean getCurlyBracesDenoteCodeBlocks() {
    return true;
  }


  
  public String[] getLineCommentStartAndEnd(int languageIndex) {
    return new String[] { "/*", "*/" };
  }


  
  public boolean getMarkOccurrencesOfTokenType(int type) {
    return (type == 6);
  }


  
  public boolean getShouldIndentNextLineAfter(Token t) {
    if (t != null && t.length() == 1) {
      char ch = t.charAt(0);
      return (ch == '{' || ch == '(');
    } 
    return false;
  }














  
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;
    this.cssPrevState = 0;

    
    int state = 0;
    switch (initialTokenType) {
      case 13:
        state = 3;
        break;
      case 14:
        state = 4;
        break;
      case 2:
        state = 5;
        break;
      case -1:
        state = 1;
        break;
      case -2:
        state = 2;
        break;
      default:
        if (initialTokenType < -1024) {
          int main = -(-initialTokenType & 0xFFFFFF00);
          switch (main) {
            
            default:
              state = 3;
              break;
            case -4096:
              state = 4;
              break;
            case -6144:
              state = 5;
              break;
          } 
          this.cssPrevState = -initialTokenType & 0xFF;
          break;
        } 
        state = 0;
        break;
    } 
    
    this.start = text.offset;
    this.s = text;
    try {
      yyreset(this.zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return (Token)new TokenImpl();
    } 
  }






  
  public boolean isIdentifierChar(int languageIndex, char ch) {
    return (Character.isLetterOrDigit(ch) || ch == '-' || ch == '.' || ch == '_');
  }






  
  public void setHighlightingLess(boolean highlightingLess) {
    this.highlightingLess = highlightingLess;
  }







  
  private boolean zzRefill() {
    return (this.zzCurrentPos >= this.s.offset + this.s.count);
  }












  
  public final void yyreset(Reader reader) {
    this.zzBuffer = this.s.array;






    
    this.zzStartRead = this.s.offset;
    this.zzEndRead = this.zzStartRead + this.s.count - 1;
    this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
    this.zzLexicalState = 0;
    this.zzReader = reader;
    this.zzAtEOF = false;
  }









  
  public CSSTokenMaker(Reader in) {
    this.zzReader = in;
  }






  
  public CSSTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }






  
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[65536];
    int i = 0;
    int j = 0;
    label10: while (i < 134) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++); while (true)
      { map[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return map;
  }




  
  public final void yyclose() throws IOException {
    this.zzAtEOF = true;
    this.zzEndRead = this.zzStartRead;
    
    if (this.zzReader != null) {
      this.zzReader.close();
    }
  }



  
  public final int yystate() {
    return this.zzLexicalState;
  }






  
  public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }




  
  public final String yytext() {
    return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
  }












  
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead + pos];
  }




  
  public final int yylength() {
    return this.zzMarkedPos - this.zzStartRead;
  }















  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[0];
    } 
    
    throw new Error(message);
  }









  
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(2);
    }
    this.zzMarkedPos -= number;
  }














  
  public Token yylex() throws IOException {
    int zzEndReadL = this.zzEndRead;
    char[] zzBufferL = this.zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    
    while (true) {
      int zzInput, temp, zzMarkedPosL = this.zzMarkedPos;
      
      int zzAction = -1;
      
      int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
      
      this.zzState = this.zzLexicalState;



      
      while (true) {
        if (zzCurrentPosL < zzEndReadL)
        { zzInput = zzBufferL[zzCurrentPosL++]; }
        else { if (this.zzAtEOF) {
            int i = -1;
            
            break;
          } 
          
          this.zzCurrentPos = zzCurrentPosL;
          this.zzMarkedPos = zzMarkedPosL;
          boolean eof = zzRefill();
          
          zzCurrentPosL = this.zzCurrentPos;
          zzMarkedPosL = this.zzMarkedPos;
          zzBufferL = this.zzBuffer;
          zzEndReadL = this.zzEndRead;
          if (eof) {
            int i = -1;
            
            break;
          } 
          zzInput = zzBufferL[zzCurrentPosL++]; }

        
        int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)
          break;  this.zzState = zzNext;
        
        int zzAttributes = zzAttrL[this.zzState];
        if ((zzAttributes & 0x1) == 1) {
          zzAction = this.zzState;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 0x8) == 8) {
            break;
          }
        } 
      } 

      
      this.zzMarkedPos = zzMarkedPosL;
      
      switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
          addToken(20); continue;
        case 48:
          continue;
        case 2:
          addToken(20); continue;
        case 49:
          continue;
        case 25:
          addEndToken(-2); return (Token)this.firstToken;
        case 50:
          continue;
        case 16:
          addToken(this.highlightingLess ? 6 : 20);
          continue;
        case 51:
          continue;
        case 42:
          if (this.highlightingLess) {
            this.cssPrevState = this.zzLexicalState;
            this.start = this.zzMarkedPos - 2; yybegin(6);
            continue;
          } 
          temp = this.zzStartRead + 2;
          addToken(this.zzStartRead, this.zzStartRead + 1, 20);
          this.zzStartRead = temp;
          continue;
        case 52:
          continue;
        case 9:
          addToken(22); yybegin(1); continue;
        case 53:
          continue;
        case 29:
          addToken(this.start, this.zzStartRead, 13); yybegin(this.cssPrevState); continue;
        case 54:
          continue;
        case 32:
          addToken(this.start, this.zzStartRead - 1, 14); addEndToken(-4096 - this.cssPrevState); return (Token)this.firstToken;
        case 55:
          continue;
        case 37:
          this.start = this.zzMarkedPos - 2; this.cssPrevState = this.zzLexicalState; yybegin(5); continue;
        case 56:
          continue;
        case 34:
          addToken(this.start, this.zzStartRead - 1, 1);
          switch (this.cssPrevState)
          { case 1:
              addEndToken(-1);







              
              return (Token)this.firstToken;case 2: addEndToken(-2); return (Token)this.firstToken; }  addNullToken(); return (Token)this.firstToken;
        case 57:
          continue;
        case 31:
          addToken(this.start, this.zzStartRead, 14); yybegin(this.cssPrevState); continue;
        case 58:
          continue;
        case 43:
          addToken(this.start, this.zzStartRead + 1, 2); yybegin(this.cssPrevState); continue;
        case 59:
          continue;
        case 12:
          addToken(this.highlightingLess ? 22 : 20); continue;
        case 60:
          continue;
        case 10:
          this.start = this.zzMarkedPos - 1; this.cssPrevState = this.zzLexicalState; yybegin(3); continue;
        case 61:
          continue;
        case 17:
          addToken(23); yybegin(2); continue;
        case 62:
          continue;
        case 5:
          addToken(16); continue;
        case 63:
          continue;
        case 23:
          addToken(23); yybegin(1);
          continue;
        
        case 64:
        case 28:
        case 65:
          continue;
        case 46:
          addToken(18); continue;
        case 66:
          continue;
        case 36:
          addToken(this.highlightingLess ? 19 : 17); continue;
        case 67:
          continue;
        case 3:
          addToken(this.highlightingLess ? 10 : 20); continue;
        case 68:
          continue;
        case 20:
          addEndToken(-1); return (Token)this.firstToken;
        case 69:
          continue;
        case 7:
          addToken(21); continue;
        case 70:
          continue;
        case 19:
          addToken(22); yybegin(0); continue;
        case 71:
          continue;
        case 47:
          addToken(24); continue;
        case 72:
          continue;
        case 4:
          addToken(16); continue;
        case 73:
          continue;
        case 35:
          addToken(this.highlightingLess ? 17 : 18); continue;
        case 74:
          continue;
        case 24:
          temp = this.zzMarkedPos - 2;
          addToken(this.zzStartRead, temp, 8);
          addToken(this.zzMarkedPos - 1, this.zzMarkedPos - 1, 22);
          this.zzStartRead = this.zzCurrentPos = this.zzMarkedPos; continue;
        case 75:
          continue;
        case 18:
          addToken(22); continue;
        case 76:
          continue;
        case 22:
          addToken(10); continue;
        case 77:
          continue;
        case 30:
          addToken(this.start, this.zzStartRead - 1, 13); addEndToken(-2048 - this.cssPrevState); return (Token)this.firstToken;
        case 78:
          continue;
        case 41:
          if (this.highlightingLess) {



            
            addToken(6);
            continue;
          } 
          addToken(20);
          continue;
        case 79:
          continue;
        case 33:
          addToken(this.start, this.zzStartRead - 1, 2); addEndToken(-6144 - this.cssPrevState); return (Token)this.firstToken;
        case 80:
          continue;
        case 26:
          addToken(22); continue;
        case 81:
          continue;
        case 40:
          if (this.highlightingLess) {
            this.cssPrevState = this.zzLexicalState;
            this.start = this.zzMarkedPos - 2; yybegin(6);
            continue;
          } 
          temp = this.zzStartRead + 2;
          addToken(this.zzStartRead, this.zzStartRead + 1, 20);
          this.zzStartRead = temp;
          continue;
        case 82:
          continue;
        case 39:
          addToken(this.highlightingLess ? 17 : 20); continue;
        case 83:
          continue;
        case 14:
          addToken(20); continue;
        case 84:
          continue;
        case 15:
          addToken(6); continue;
        case 85:
          continue;
        case 44:
          temp = this.zzStartRead; addToken(this.start, this.zzStartRead - 1, 2); addHyperlinkToken(temp, this.zzMarkedPos - 1, 2); this.start = this.zzMarkedPos; continue;
        case 86:
          continue;
        case 11:
          this.start = this.zzMarkedPos - 1; this.cssPrevState = this.zzLexicalState; yybegin(4); continue;
        case 87:
          continue;
        case 6:
          addToken(22); continue;
        case 88:
          continue;
        case 13:
          addNullToken(); return (Token)this.firstToken;
        case 89:
          continue;
        case 38:
          if (this.highlightingLess) {
            this.start = this.zzMarkedPos - 2; yybegin(6);
            continue;
          } 
          temp = this.zzStartRead + 2;
          addToken(this.zzStartRead, this.zzStartRead + 1, 20);
          this.zzStartRead = temp;
          continue;
        case 90:
          continue;
        case 8:
          addToken(23); continue;
        case 91:
          continue;
        case 21:
          addToken(20); continue;
        case 92:
          continue;
        case 45:
          temp = this.zzStartRead; addToken(this.start, this.zzStartRead - 1, 1); addHyperlinkToken(temp, this.zzMarkedPos - 1, 1); this.start = this.zzMarkedPos;
          continue;
        
        case 93:
        case 27:
        case 94:
          continue;
      } 
      if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
        this.zzAtEOF = true;
        switch (this.zzLexicalState) {
          case 5:
            addToken(this.start, this.zzStartRead - 1, 2); addEndToken(-6144 - this.cssPrevState); return (Token)this.firstToken;
          case 341:
            continue;
          case 6:
            addToken(this.start, this.zzStartRead - 1, 1);
            switch (this.cssPrevState)
            { case 1:
                addEndToken(-1);







                
                return (Token)this.firstToken;case 2: addEndToken(-2); return (Token)this.firstToken; }  addNullToken(); return (Token)this.firstToken;
          case 342:
            continue;
          case 0:
            addNullToken(); return (Token)this.firstToken;
          case 343:
            continue;
          case 3:
            addToken(this.start, this.zzStartRead - 1, 13); addEndToken(-2048 - this.cssPrevState); return (Token)this.firstToken;
          case 344:
            continue;
          case 2:
            addEndToken(-2); return (Token)this.firstToken;
          case 345:
            continue;
          case 1:
            addEndToken(-1); return (Token)this.firstToken;
          case 346:
            continue;
          case 4:
            addToken(this.start, this.zzStartRead - 1, 14); addEndToken(-4096 - this.cssPrevState); return (Token)this.firstToken;
          case 347:
            continue;
        } 
        return null;
      } 

      
      zzScanError(1);
    } 
  }
}
