package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


































































public class FortranTokenMaker
  extends AbstractJFlexTokenMaker
{
  public static final int YYEOF = -1;
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 2;
  private static final String ZZ_CMAP_PACKED = "\t\000\001\002\001\001\001\000\001\002\023\000\001\002\001\005\001\b\001\000\001\006\001\000\001\f\001\t\002\000\001\003\003\000\001\016\001\r\001%\001(\001)\007\006\002\000\001\n\001\013\001\n\002\000\001\025\001\037\001\007\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'\004\000\001\006\001\000\001\025\001\037\001\034\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'ﾅ\000";
  private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001\002\001\001\001\000\001\002\023\000\001\002\001\005\001\b\001\000\001\006\001\000\001\f\001\t\002\000\001\003\003\000\001\016\001\r\001%\001(\001)\007\006\002\000\001\n\001\013\001\n\002\000\001\025\001\037\001\007\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'\004\000\001\006\001\000\001\025\001\037\001\034\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'ﾅ\000");



  
  private static final int[] ZZ_ACTION = zzUnpackAction();




  
  private static final String ZZ_ACTION_PACKED_0 = "\001\000\002\001\001\002\001\003\001\004\001\005\001\006\001\007\001\002\001\005\001\b\001\t\001\n\001\002\001\n\024\002\001\001\001\013\001\f\001\001\001\r\001\016\007\002\001\017\020\002\007\000!\002\001\017\027\002\001\017\b\002\001\017\003\002\004\000\002\017\003\002\002\017\020\002\001\017\b\002\002\017\003\002\001\017\002\002\001\017\006\002\001\017\002\000\003\002\001\017\004\002\001\017\026\002\001\000\020\002\001\020\n\002\001\017";




  
  private static int[] zzUnpackAction() {
    int[] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction("\001\000\002\001\001\002\001\003\001\004\001\005\001\006\001\007\001\002\001\005\001\b\001\t\001\n\001\002\001\n\024\002\001\001\001\013\001\f\001\001\001\r\001\016\007\002\001\017\020\002\007\000!\002\001\017\027\002\001\017\b\002\001\017\003\002\004\000\002\017\003\002\002\017\020\002\001\017\b\002\002\017\003\002\001\017\002\002\001\017\006\002\001\017\002\000\003\002\001\017\004\002\001\017\026\002\001\000\020\002\001\020\n\002\001\017", offset, result);
    return result;
  }
  
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }




  
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
















  
  private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000*\000T\000~\000~\000¨\000~\000Ò\000~\000ü\000Ħ\000~\000~\000Ő\000Ő\000~\000ź\000Ƥ\000ǎ\000Ǹ\000Ȣ\000Ɍ\000ɶ\000ʠ\000ˊ\000˴\000̞\000͈\000Ͳ\000Ħ\000Μ\000φ\000ϰ\000К\000ф\000Ѯ\000Ҙ\000~\000~\000ӂ\000~\000~\000Ӭ\000Ԗ\000Հ\000ժ\000֔\000־\000ר\000ؒ\000ؼ\000٦\000ڐ\000ں\000ۤ\000܎\000ܸ\000ݢ\000ތ\000޶\000ߠ\000ࠊ\000࠴\000࡞\000࢈\000ࢲ\000ࣜ\000आ\000र\000ग़\000঄\000ম\000৘\000ਂ\000ਬ\000੖\000઀\000પ\000૔\000૾\000ନ\000୒\000୼\000஦\000ௐ\000௺\000త\000౎\000౸\000ಢ\000ೌ\000೶\000ഠ\000ൊ\000൴\000ඞ\000෈\000ෲ\000ผ\000ๆ\000๰\000ບ\000ໄ\000໮\000༘\000ག\000ཬ\000ྖ\000࿀\000࿪\000န\000ှ\000ၨ\000႒\000Ⴜ\000ღ\000ᄐ\000ᄺ\000ᅤ\000ᆎ\000ᆸ\000ᇢ\000ሌ\000ሶ\000በ\000ኊ\000ኴ\000ዞ\000ገ\000ጲ\000፜\000ᎆ\000Ꮀ\000Ꮪ\000ᐄ\000ᐮ\000ᑘ\000ᒂ\000ᒬ\000ᓖ\000ᔀ\000ᔪ\000ᕔ\000ᕾ\000ᖨ\000ᗒ\000ᗼ\000ü\000ᘦ\000ᙐ\000ᙺ\000ᚤ\000ᛎ\000ᛸ\000ᜢ\000ᝌ\000᝶\000ហ\000៊\000៴\000᠞\000ᡈ\000ᡲ\000ᢜ\000ᣆ\000ᣰ\000ᤚ\000᥄\000᥮\000ᦘ\000ᧂ\000᧬\000ᨖ\000ᩀ\000ᩪ\000ᛸ\000᪔\000᪾\000᫨\000ᬒ\000ᬼ\000᭦\000ᮐ\000ᮺ\000ᯤ\000ᰎ\000᰸\000ᝌ\000ᱢ\000᲌\000Ჶ\000᳠\000ᴊ\000ᴴ\000ᵞ\000ᶈ\000ᶲ\000ᷜ\000Ḇ\000Ḱ\000Ṛ\000Ẅ\000Ắ\000Ộ\000ἂ\000Ἤ\000ᬒ\000ὖ\000ᾀ\000ᾪ\000῔\000῾\000 \000⁒\000⁼\000₦\000⃐\000⃺\000ℤ\000ⅎ\000ⅸ\000↢\000⇌\000⇶\000∠\000≊\000≴\000⊞\000⋈\000⋲\000⌜\000⍆\000⍰\000⎚\000⏄\000⏮\000␘\000⑂\000⑬\000⒖\000Ⓚ\000⓪\000└\000┾\000╨\000~\000▒\000▼\000◦\000☐\000☺\000♤\000⚎\000⚸\000⛢\000✌\000Ꮪ";

















  
  private static int[] zzUnpackRowMap() {
    int[] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap("\000\000\000*\000T\000~\000~\000¨\000~\000Ò\000~\000ü\000Ħ\000~\000~\000Ő\000Ő\000~\000ź\000Ƥ\000ǎ\000Ǹ\000Ȣ\000Ɍ\000ɶ\000ʠ\000ˊ\000˴\000̞\000͈\000Ͳ\000Ħ\000Μ\000φ\000ϰ\000К\000ф\000Ѯ\000Ҙ\000~\000~\000ӂ\000~\000~\000Ӭ\000Ԗ\000Հ\000ժ\000֔\000־\000ר\000ؒ\000ؼ\000٦\000ڐ\000ں\000ۤ\000܎\000ܸ\000ݢ\000ތ\000޶\000ߠ\000ࠊ\000࠴\000࡞\000࢈\000ࢲ\000ࣜ\000आ\000र\000ग़\000঄\000ম\000৘\000ਂ\000ਬ\000੖\000઀\000પ\000૔\000૾\000ନ\000୒\000୼\000஦\000ௐ\000௺\000త\000౎\000౸\000ಢ\000ೌ\000೶\000ഠ\000ൊ\000൴\000ඞ\000෈\000ෲ\000ผ\000ๆ\000๰\000ບ\000ໄ\000໮\000༘\000ག\000ཬ\000ྖ\000࿀\000࿪\000န\000ှ\000ၨ\000႒\000Ⴜ\000ღ\000ᄐ\000ᄺ\000ᅤ\000ᆎ\000ᆸ\000ᇢ\000ሌ\000ሶ\000በ\000ኊ\000ኴ\000ዞ\000ገ\000ጲ\000፜\000ᎆ\000Ꮀ\000Ꮪ\000ᐄ\000ᐮ\000ᑘ\000ᒂ\000ᒬ\000ᓖ\000ᔀ\000ᔪ\000ᕔ\000ᕾ\000ᖨ\000ᗒ\000ᗼ\000ü\000ᘦ\000ᙐ\000ᙺ\000ᚤ\000ᛎ\000ᛸ\000ᜢ\000ᝌ\000᝶\000ហ\000៊\000៴\000᠞\000ᡈ\000ᡲ\000ᢜ\000ᣆ\000ᣰ\000ᤚ\000᥄\000᥮\000ᦘ\000ᧂ\000᧬\000ᨖ\000ᩀ\000ᩪ\000ᛸ\000᪔\000᪾\000᫨\000ᬒ\000ᬼ\000᭦\000ᮐ\000ᮺ\000ᯤ\000ᰎ\000᰸\000ᝌ\000ᱢ\000᲌\000Ჶ\000᳠\000ᴊ\000ᴴ\000ᵞ\000ᶈ\000ᶲ\000ᷜ\000Ḇ\000Ḱ\000Ṛ\000Ẅ\000Ắ\000Ộ\000ἂ\000Ἤ\000ᬒ\000ὖ\000ᾀ\000ᾪ\000῔\000῾\000 \000⁒\000⁼\000₦\000⃐\000⃺\000ℤ\000ⅎ\000ⅸ\000↢\000⇌\000⇶\000∠\000≊\000≴\000⊞\000⋈\000⋲\000⌜\000⍆\000⍰\000⎚\000⏄\000⏮\000␘\000⑂\000⑬\000⒖\000Ⓚ\000⓪\000└\000┾\000╨\000~\000▒\000▼\000◦\000☐\000☺\000♤\000⚎\000⚸\000⛢\000✌\000Ꮪ", offset, result);
    return result;
  }
  
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    } 
    return j;
  }



  
  private static final int[] ZZ_TRANS = zzUnpackTrans();

















































  
  private static final String ZZ_TRANS_PACKED_0 = "\001\004\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\017\001\021\001\022\001\023\001\024\001\025\001\n\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\n\001\"\001\n\001#\002\n\001$\002\n\001%\001&\006%\001'!%\001(\001)\007(\001* (,\000\001\006+\000\001+\001\000\001\n\001,\007\000\001-\001.\001\n\001/\001\n\0010\0011\0012\0013\001\n\0014\0015\0016\001,\0017\0018\0019\n\n\004\000\001\n\001\000\002\n\007\000\033\n\004\000\001\n\001\000\001\n\001:\007\000\001;\002\n\001<\002\n\001=\001>\003\n\001?\001\n\001:\001\n\001@\002\n\001A\001\n\001B\006\n\013\000\001\020-\000\001C\001D\001C\001E\001\000\001F\001G\001H\002\000\001I\024\000\001\n\001\000\002\n\007\000\001J\001\n\001J\001K\003\n\001L\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\001\n\001N\t\n\001O\b\n\004\000\001\n\001\000\002\n\007\000\007\n\001P\023\n\004\000\001\n\001\000\002\n\007\000\001Q\004\n\001R\013\n\001S\t\n\004\000\001\n\001\000\002\n\007\000\007\n\001T\004\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001V\001W\003\n\0010\005\n\001X\001Y\001:\001\n\001Z\001[\n\n\004\000\001\n\001\000\002\n\007\000\016\n\001O\f\n\004\000\001\n\001\000\002\n\007\000\003\n\001\\\027\n\004\000\001\n\001\000\002\n\007\000\013\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001^\006\n\001_\001\n\001`\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001a\001\n\001b\001c\001d\003\n\001e\002\n\001f\016\n\004\000\001g\001\000\001\n\001h\007\000\005\n\001i\001j\003\n\001k\001l\001\n\001h\001\n\001m\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001n\001\n\001o\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001p\001q\004\n\001r\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001s\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001t\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001u\t\n\001v\b\n\004\000\001\n\001\000\002\n\007\000\003\n\001w\027\n\001%\001\000\006%\001\000!%\001(\001\000\007(\001\000 (\004\000\001\n\001\000\002\n\007\000\f\n\001x\016\n\004\000\001\n\001\000\002\n\007\000\007\n\001y\007\n\001@\013\n\004\000\001\n\001\000\002\n\007\000\007\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001{\003\n\001|\006\n\001}\t\n\004\000\001\n\001\000\002\n\007\000\f\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001\n\001~\t\n\001X\001\n\001:\002\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\t\n\001\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001f\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001]\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001[\023\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\n\001]\004\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\005\n\001\005\n\001\003\n\001\013\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\001\n\0019\007\000\r\n\0019\r\n\020\000\001\001\000\001.\000\001%\000\001(\000\001+\000\001,\000\001'\000\001\030\000\001\n\001\000\002\n\007\000\001\n\001\001\n\001\027\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001K\027\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\f\n\001\001\n\001\f\n\004\000\001\n\001\000\002\n\007\000\005\n\001]\025\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\001\006\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\001\n\001 \004\n\001¡\016\n\001\"\005\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001¢\023\n\004\000\001\n\001\000\002\n\007\000\b\n\001£\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001¤\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001}\023\n\004\000\001\n\001\000\002\n\007\000\001¥\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\020\n\001¦\n\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\002\n\001\025\n\004\000\001\n\001\000\002\n\007\000\005\n\0010\006\n\001§\016\n\004\000\001\n\001\000\002\n\007\000\022\n\001¨\b\n\004\000\001©\001\000\001\n\001ª\007\000\001\n\001«\002\n\001¬\b\n\001ª\r\n\004\000\001\n\001\000\002\n\007\000\020\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\f\n\001­\016\n\004\000\001\n\001\000\002\n\007\000\f\n\001®\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\007\n\001°\f\n\004\000\001\n\001\000\002\n\007\000\b\n\001±\001\032\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001²\003\n\001³\004\n\001U\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001´\t\n\004\000\001µ\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001´\025\n\004\000\001\n\001\000\001\n\001¶\007\000\r\n\001¶\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001·\016\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\b\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\017\n\001\013\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\002\n\001¹\030\n\004\000\001\n\001\000\002\n\007\000\001º\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001»\024\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001¼\024\n\004\000\001\n\001\000\002\n\007\000\020\n\0019\n\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\007\n\001½\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¾\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\021\n\001¿\t\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001¿\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\b\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001À\032\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001Á\025\n\001¯\003\n\004\000\001\n\001\000\002\n\007\000\022\n\001\b\n\004\000\001\n\001\000\002\n\007\000\016\n\001Â\f\n\004\000\001\n\001\000\002\n\007\000\001­\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001Ã\022\n\016\000\001\0203\000\001Ä\025\000\0014\000\001Å\036\000\001\n\001\000\002\n\007\000\f\n\001Æ\f\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\005\n\001È\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\003\n\001É\027\n\004\000\001\001\000\002\n\007\000\n\n\001Ê\001\n\001Ë\016\n\004\000\001\n\001\000\002\n\007\000\001Ì\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001Í\023\n\004\000\001\n\001\000\002\n\007\000\005\n\001Î\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\024\n\004\000\001\n\001\000\002\n\007\000\021\n\001Ï\t\n\004\000\001\n\001\000\002\n\007\000\005\n\001Ï\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ð\021\n\004\000\001\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001Ñ\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ò\b\n\001½\013\n\004\000\001\n\001\000\001\n\001Ó\007\000\r\n\001Ó\r\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ô\027\n\004\000\001\n\001\000\002\n\007\000\b\n\001Õ\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ñ\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001­\027\n\004\000\001\n\001\000\002\n\007\000\001Ö\032\n\004\000\001\n\001\000\002\n\007\000\003\n\001×\027\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ø\021\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\030\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ù\024\n\004\000\001\n\001\000\001\n\001Ú\007\000\r\n\001Ú\r\n\004\000\001\n\001\000\002\n\007\000\002\n\001Û\030\n\004\000\001\n\001\000\002\n\007\000\026\n\001\002\n\001\001\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ü\021\n\004\000\001\n\001\000\002\n\007\000\023\n\001Ý\007\n\004\000\001\n\001\000\002\n\007\000\001\n\001]\031\n\004\000\001\n\001\000\002\n\007\000\b\n\001]\022\n\004\000\001\n\001\000\002\n\007\000\031\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\001Þ\032\n\004\000\001\n\001\000\002\n\007\000\t\n\001ß\021\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\005\n\001à\025\n\004\000\001\n\001\000\002\n\007\000\031\n\001\001\n\004\000\001\n\001\000\002\n\007\000\f\n\001á\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001â\005\n\001ã\016\n\004\000\001\n\001\000\002\n\007\000\001©\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001ä\024\n\022\000\001å1\000\001Ä\023\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\026\n\001\004\n\004\000\001\n\001\000\002\n\007\000\013\n\001æ\017\n\004\000\001\n\001\000\002\n\007\000\f\n\001Ë\b\n\001ç\005\n\004\000\001\n\001\000\002\n\007\000\f\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\n\n\001\020\n\004\000\001\n\001\000\002\n\007\000\f\n\001è\016\n\004\000\001\n\001\000\001\n\001é\007\000\r\n\001é\r\n\004\000\001\n\001\000\002\n\007\000\032\n\001\004\000\001\n\001\000\002\n\007\000\b\n\001K\022\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001ê\031\n\004\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\007\n\001ë\023\n\004\000\001\n\001\000\002\n\007\000\t\n\001ì\021\n\004\000\001\n\001\000\002\n\007\000\002\n\001í\030\n\004\000\001\n\001\000\002\n\007\000\f\n\001¸\016\n\004\000\001\n\001\000\002\n\007\000\017\n\001î\013\n\004\000\001\n\001\000\002\n\007\000\f\n\001à\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001ï\022\n\004\000\001\n\001\000\002\n\007\000\001ð\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ñ\017\n\004\000\001\n\001\000\002\n\007\000\007\n\001ò\023\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ê\017\n\004\000\001\n\001\000\002\n\007\000\005\n\001¯\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001ó\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001ô\025\n\004\000\001\n\001\000\001\n\001õ\007\000\r\n\001õ\r\n\016\000\001ö\037\000\001\n\001\000\002\n\007\000\n\n\001í\020\n\004\000\001\n\001\000\002\n\007\000\022\n\001÷\b\n\004\000\001\n\001\000\001\n\001ø\007\000\r\n\001ø\r\n\004\000\001\n\001\000\002\n\007\000\006\n\001ù\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001ú\016\n\004\000\001\n\001\000\002\n\007\000\t\n\001û\021\n\004\000\001]\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ñ\027\n\004\000\001\n\001\000\002\n\007\000\003\n\001õ\027\n\004\000\001\n\001\000\002\n\007\000\006\n\001x\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001\003\n\001\023\n\004\000\001\n\001\000\002\n\007\000\016\n\001ü\f\n\004\000\001\n\001\000\001\n\001ý\007\000\r\n\001ý\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001[\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001]\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001í\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\027\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\001þ\031\n\004\000\001\n\001\000\002\n\007\000\007\n\001K\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001ÿ\031\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ā\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001·\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001ā\002\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001T\016\n\004\000\001\n\001\000\001\n\001]\007\000\r\n\001]\r\n";
















































  
  private static final int ZZ_UNKNOWN_ERROR = 0;
















































  
  private static final int ZZ_NO_MATCH = 1;
















































  
  private static final int ZZ_PUSHBACK_2BIG = 2;

















































  
  private static int[] zzUnpackTrans() {
    int[] result = new int[10038];
    int offset = 0;
    offset = zzUnpackTrans("\001\004\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\017\001\021\001\022\001\023\001\024\001\025\001\n\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\n\001\"\001\n\001#\002\n\001$\002\n\001%\001&\006%\001'!%\001(\001)\007(\001* (,\000\001\006+\000\001+\001\000\001\n\001,\007\000\001-\001.\001\n\001/\001\n\0010\0011\0012\0013\001\n\0014\0015\0016\001,\0017\0018\0019\n\n\004\000\001\n\001\000\002\n\007\000\033\n\004\000\001\n\001\000\001\n\001:\007\000\001;\002\n\001<\002\n\001=\001>\003\n\001?\001\n\001:\001\n\001@\002\n\001A\001\n\001B\006\n\013\000\001\020-\000\001C\001D\001C\001E\001\000\001F\001G\001H\002\000\001I\024\000\001\n\001\000\002\n\007\000\001J\001\n\001J\001K\003\n\001L\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\001\n\001N\t\n\001O\b\n\004\000\001\n\001\000\002\n\007\000\007\n\001P\023\n\004\000\001\n\001\000\002\n\007\000\001Q\004\n\001R\013\n\001S\t\n\004\000\001\n\001\000\002\n\007\000\007\n\001T\004\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001V\001W\003\n\0010\005\n\001X\001Y\001:\001\n\001Z\001[\n\n\004\000\001\n\001\000\002\n\007\000\016\n\001O\f\n\004\000\001\n\001\000\002\n\007\000\003\n\001\\\027\n\004\000\001\n\001\000\002\n\007\000\013\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001^\006\n\001_\001\n\001`\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001a\001\n\001b\001c\001d\003\n\001e\002\n\001f\016\n\004\000\001g\001\000\001\n\001h\007\000\005\n\001i\001j\003\n\001k\001l\001\n\001h\001\n\001m\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001n\001\n\001o\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001p\001q\004\n\001r\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001s\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001t\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001u\t\n\001v\b\n\004\000\001\n\001\000\002\n\007\000\003\n\001w\027\n\001%\001\000\006%\001\000!%\001(\001\000\007(\001\000 (\004\000\001\n\001\000\002\n\007\000\f\n\001x\016\n\004\000\001\n\001\000\002\n\007\000\007\n\001y\007\n\001@\013\n\004\000\001\n\001\000\002\n\007\000\007\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001{\003\n\001|\006\n\001}\t\n\004\000\001\n\001\000\002\n\007\000\f\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001\n\001~\t\n\001X\001\n\001:\002\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\t\n\001\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001f\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001]\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001[\023\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\n\001]\004\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\005\n\001\005\n\001\003\n\001\013\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\001\n\0019\007\000\r\n\0019\r\n\020\000\001\001\000\001.\000\001%\000\001(\000\001+\000\001,\000\001'\000\001\030\000\001\n\001\000\002\n\007\000\001\n\001\001\n\001\027\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001K\027\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\f\n\001\001\n\001\f\n\004\000\001\n\001\000\002\n\007\000\005\n\001]\025\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\001\006\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\001\n\001 \004\n\001¡\016\n\001\"\005\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001¢\023\n\004\000\001\n\001\000\002\n\007\000\b\n\001£\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001¤\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001}\023\n\004\000\001\n\001\000\002\n\007\000\001¥\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\020\n\001¦\n\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\002\n\001\025\n\004\000\001\n\001\000\002\n\007\000\005\n\0010\006\n\001§\016\n\004\000\001\n\001\000\002\n\007\000\022\n\001¨\b\n\004\000\001©\001\000\001\n\001ª\007\000\001\n\001«\002\n\001¬\b\n\001ª\r\n\004\000\001\n\001\000\002\n\007\000\020\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\f\n\001­\016\n\004\000\001\n\001\000\002\n\007\000\f\n\001®\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\007\n\001°\f\n\004\000\001\n\001\000\002\n\007\000\b\n\001±\001\032\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001²\003\n\001³\004\n\001U\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001´\t\n\004\000\001µ\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001´\025\n\004\000\001\n\001\000\001\n\001¶\007\000\r\n\001¶\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001·\016\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\b\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\017\n\001\013\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\002\n\001¹\030\n\004\000\001\n\001\000\002\n\007\000\001º\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001»\024\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001¼\024\n\004\000\001\n\001\000\002\n\007\000\020\n\0019\n\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\007\n\001½\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¾\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\021\n\001¿\t\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001¿\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\b\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001À\032\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001Á\025\n\001¯\003\n\004\000\001\n\001\000\002\n\007\000\022\n\001\b\n\004\000\001\n\001\000\002\n\007\000\016\n\001Â\f\n\004\000\001\n\001\000\002\n\007\000\001­\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001Ã\022\n\016\000\001\0203\000\001Ä\025\000\0014\000\001Å\036\000\001\n\001\000\002\n\007\000\f\n\001Æ\f\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\005\n\001È\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\003\n\001É\027\n\004\000\001\001\000\002\n\007\000\n\n\001Ê\001\n\001Ë\016\n\004\000\001\n\001\000\002\n\007\000\001Ì\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001Í\023\n\004\000\001\n\001\000\002\n\007\000\005\n\001Î\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\024\n\004\000\001\n\001\000\002\n\007\000\021\n\001Ï\t\n\004\000\001\n\001\000\002\n\007\000\005\n\001Ï\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ð\021\n\004\000\001\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001Ñ\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ò\b\n\001½\013\n\004\000\001\n\001\000\001\n\001Ó\007\000\r\n\001Ó\r\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ô\027\n\004\000\001\n\001\000\002\n\007\000\b\n\001Õ\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ñ\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001­\027\n\004\000\001\n\001\000\002\n\007\000\001Ö\032\n\004\000\001\n\001\000\002\n\007\000\003\n\001×\027\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ø\021\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\030\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ù\024\n\004\000\001\n\001\000\001\n\001Ú\007\000\r\n\001Ú\r\n\004\000\001\n\001\000\002\n\007\000\002\n\001Û\030\n\004\000\001\n\001\000\002\n\007\000\026\n\001\002\n\001\001\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ü\021\n\004\000\001\n\001\000\002\n\007\000\023\n\001Ý\007\n\004\000\001\n\001\000\002\n\007\000\001\n\001]\031\n\004\000\001\n\001\000\002\n\007\000\b\n\001]\022\n\004\000\001\n\001\000\002\n\007\000\031\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\001Þ\032\n\004\000\001\n\001\000\002\n\007\000\t\n\001ß\021\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\005\n\001à\025\n\004\000\001\n\001\000\002\n\007\000\031\n\001\001\n\004\000\001\n\001\000\002\n\007\000\f\n\001á\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001â\005\n\001ã\016\n\004\000\001\n\001\000\002\n\007\000\001©\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001ä\024\n\022\000\001å1\000\001Ä\023\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\026\n\001\004\n\004\000\001\n\001\000\002\n\007\000\013\n\001æ\017\n\004\000\001\n\001\000\002\n\007\000\f\n\001Ë\b\n\001ç\005\n\004\000\001\n\001\000\002\n\007\000\f\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\n\n\001\020\n\004\000\001\n\001\000\002\n\007\000\f\n\001è\016\n\004\000\001\n\001\000\001\n\001é\007\000\r\n\001é\r\n\004\000\001\n\001\000\002\n\007\000\032\n\001\004\000\001\n\001\000\002\n\007\000\b\n\001K\022\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001ê\031\n\004\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\007\n\001ë\023\n\004\000\001\n\001\000\002\n\007\000\t\n\001ì\021\n\004\000\001\n\001\000\002\n\007\000\002\n\001í\030\n\004\000\001\n\001\000\002\n\007\000\f\n\001¸\016\n\004\000\001\n\001\000\002\n\007\000\017\n\001î\013\n\004\000\001\n\001\000\002\n\007\000\f\n\001à\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001ï\022\n\004\000\001\n\001\000\002\n\007\000\001ð\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ñ\017\n\004\000\001\n\001\000\002\n\007\000\007\n\001ò\023\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ê\017\n\004\000\001\n\001\000\002\n\007\000\005\n\001¯\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001ó\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001ô\025\n\004\000\001\n\001\000\001\n\001õ\007\000\r\n\001õ\r\n\016\000\001ö\037\000\001\n\001\000\002\n\007\000\n\n\001í\020\n\004\000\001\n\001\000\002\n\007\000\022\n\001÷\b\n\004\000\001\n\001\000\001\n\001ø\007\000\r\n\001ø\r\n\004\000\001\n\001\000\002\n\007\000\006\n\001ù\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001ú\016\n\004\000\001\n\001\000\002\n\007\000\t\n\001û\021\n\004\000\001]\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ñ\027\n\004\000\001\n\001\000\002\n\007\000\003\n\001õ\027\n\004\000\001\n\001\000\002\n\007\000\006\n\001x\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001\003\n\001\023\n\004\000\001\n\001\000\002\n\007\000\016\n\001ü\f\n\004\000\001\n\001\000\001\n\001ý\007\000\r\n\001ý\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001[\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001]\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001í\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\027\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\001þ\031\n\004\000\001\n\001\000\002\n\007\000\007\n\001K\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001ÿ\031\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ā\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001·\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001ā\002\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001T\016\n\004\000\001\n\001\000\001\n\001]\007\000\r\n\001]\r\n", offset, result);
    return result;
  }
  
  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--; while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };







  
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  
  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\002\001\002\t\001\001\001\t\001\001\001\t\002\001\002\t\002\001\001\t\025\001\002\t\001\001\002\t\030\001\007\000F\001\004\0000\001\002\000\037\001\001\000\020\001\001\t\013\001";
  
  private Reader zzReader;
  
  private int zzState;
  
  private static int[] zzUnpackAttribute() {
    int[] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute("\001\000\002\001\002\t\001\001\001\t\001\001\001\t\002\001\002\t\002\001\001\t\025\001\002\t\001\001\002\t\030\001\007\000F\001\004\0000\001\002\000\037\001\001\000\020\001\001\t\013\001", offset, result);
    return result;
  }
  
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private int zzLexicalState = 0;



  
  private char[] zzBuffer;



  
  private int zzMarkedPos;



  
  private int zzCurrentPos;



  
  private int zzStartRead;



  
  private int zzEndRead;


  
  private boolean zzAtEOF;



  
  public FortranTokenMaker() {}



  
  private void addToken(int tokenType) {
    addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
  }






  
  private void addToken(int start, int end, int tokenType) {
    int so = start + this.offsetShift;
    addToken(this.zzBuffer, start, end, tokenType, so);
  }












  
  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    this.zzStartRead = this.zzMarkedPos;
  }





  
  public String[] getLineCommentStartAndEnd(int languageIndex) {
    return new String[] { "!", null };
  }















  
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;

    
    int state = 0;
    switch (initialTokenType) {
      case 13:
        state = 1;
        this.start = text.offset;
        break;
      case 14:
        state = 2;
        this.start = text.offset;
        break;
      default:
        state = 0;
        break;
    } 
    this.s = text;
    try {
      yyreset(this.zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return (Token)new TokenImpl();
    } 
  }








  
  private boolean zzRefill() {
    return (this.zzCurrentPos >= this.s.offset + this.s.count);
  }












  
  public final void yyreset(Reader reader) {
    this.zzBuffer = this.s.array;






    
    this.zzStartRead = this.s.offset;
    this.zzEndRead = this.zzStartRead + this.s.count - 1;
    this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
    this.zzLexicalState = 0;
    this.zzReader = reader;
    this.zzAtEOF = false;
  }









  
  public FortranTokenMaker(Reader in) {
    this.zzReader = in;
  }






  
  public FortranTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }






  
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[65536];
    int i = 0;
    int j = 0;
    label10: while (i < 168) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++); while (true)
      { map[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return map;
  }




  
  public final void yyclose() throws IOException {
    this.zzAtEOF = true;
    this.zzEndRead = this.zzStartRead;
    
    if (this.zzReader != null) {
      this.zzReader.close();
    }
  }



  
  public final int yystate() {
    return this.zzLexicalState;
  }







  
  public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }




  
  public final String yytext() {
    return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
  }












  
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead + pos];
  }




  
  public final int yylength() {
    return this.zzMarkedPos - this.zzStartRead;
  }















  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[0];
    } 
    
    throw new Error(message);
  }









  
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(2);
    }
    this.zzMarkedPos -= number;
  }














  
  public Token yylex() throws IOException {
    int zzEndReadL = this.zzEndRead;
    char[] zzBufferL = this.zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    
    while (true) {
      int zzInput, zzMarkedPosL = this.zzMarkedPos;
      
      int zzAction = -1;
      
      int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
      
      this.zzState = this.zzLexicalState;



      
      while (true) {
        if (zzCurrentPosL < zzEndReadL)
        { zzInput = zzBufferL[zzCurrentPosL++]; }
        else { if (this.zzAtEOF) {
            int i = -1;
            
            break;
          } 
          
          this.zzCurrentPos = zzCurrentPosL;
          this.zzMarkedPos = zzMarkedPosL;
          boolean eof = zzRefill();
          
          zzCurrentPosL = this.zzCurrentPos;
          zzMarkedPosL = this.zzMarkedPos;
          zzBufferL = this.zzBuffer;
          zzEndReadL = this.zzEndRead;
          if (eof) {
            int i = -1;
            
            break;
          } 
          zzInput = zzBufferL[zzCurrentPosL++]; }

        
        int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)
          break;  this.zzState = zzNext;
        
        int zzAttributes = zzAttrL[this.zzState];
        if ((zzAttributes & 0x1) == 1) {
          zzAction = this.zzState;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 0x8) == 8) {
            break;
          }
        } 
      } 

      
      this.zzMarkedPos = zzMarkedPosL;
      
      switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
        case 15:
          addToken(6); continue;
        case 17:
          continue;
        case 2:
          addToken(20); continue;
        case 18:
          continue;
        case 4:
          addToken(21); continue;
        case 19:
          continue;
        case 11:
          addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
        case 20:
          continue;
        case 13:
          addToken(this.start, this.zzStartRead - 1, 14); return (Token)this.firstToken;
        case 21:
          continue;
        case 10:
          addToken(23);
          continue;

        
        case 22:
          continue;
        
        case 5:
          if (this.zzStartRead == this.s.offset) {
            addToken(this.zzStartRead, this.zzEndRead, 1);
            addNullToken();
            return (Token)this.firstToken;
          } 
          
          addToken(20);
          continue;
        case 23:
          continue;
        case 16:
          addToken(9); continue;
        case 24:
          continue;
        case 8:
          this.start = this.zzMarkedPos - 1; yybegin(1); continue;
        case 25:
          continue;
        case 7:
          addToken(this.zzStartRead, this.zzEndRead, 1); addNullToken(); return (Token)this.firstToken;

        
        case 26:
          continue;

        
        case 6:
          if (this.zzStartRead == this.s.offset) {
            addToken(this.zzStartRead, this.zzEndRead, 3);
            addNullToken();
            return (Token)this.firstToken;
          } 
          
          addToken(20);
          continue;
        case 27:
          continue;
        case 9:
          this.start = this.zzMarkedPos - 1; yybegin(2); continue;
        case 28:
          continue;
        case 14:
          yybegin(0); addToken(this.start, this.zzStartRead, 14); continue;
        case 29:
          continue;
        case 12:
          yybegin(0); addToken(this.start, this.zzStartRead, 13); continue;
        case 30:
          continue;
        case 3:
          addNullToken(); return (Token)this.firstToken;
        
        case 31:
        case 1:
        case 32:
          continue;
      } 
      
      if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
        this.zzAtEOF = true;
        switch (this.zzLexicalState) {
          case 1:
            addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
          case 258:
            continue;
          case 0:
            addNullToken(); return (Token)this.firstToken;
          case 259:
            continue;
          case 2:
            addToken(this.start, this.zzStartRead - 1, 14); return (Token)this.firstToken;
          case 260:
            continue;
        } 
        return null;
      } 

      
      zzScanError(1);
    } 
  }
}
