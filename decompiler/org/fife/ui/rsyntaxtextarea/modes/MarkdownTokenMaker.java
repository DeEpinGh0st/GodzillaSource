package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.HtmlOccurrenceMarker;
import org.fife.ui.rsyntaxtextarea.OccurrenceMarker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;
import org.fife.ui.rsyntaxtextarea.TokenUtils;
































































public class MarkdownTokenMaker
  extends AbstractMarkupTokenMaker
{
  public static final int YYEOF = -1;
  public static final int CODE = 12;
  public static final int INTAG_CHECK_TAG_NAME = 2;
  public static final int STRIKETHROUGH = 11;
  public static final int BOLDITALIC2 = 6;
  public static final int BOLDITALIC1 = 5;
  public static final int ITALIC2 = 10;
  public static final int ITALIC1 = 9;
  public static final int BOLD2 = 8;
  public static final int BOLD1 = 7;
  public static final int SYNTAX_HIGHLIGHTING = 13;
  public static final int INATTR_SINGLE = 4;
  public static final int INATTR_DOUBLE = 3;
  public static final int YYINITIAL = 0;
  public static final int INTAG = 1;
  private static final String ZZ_CMAP_PACKED = "\t\000\001\004\001\002\001\000\001\001\023\000\001!\001#\001\007\001\b\001\022\001\f\001\005\001\017\001&\001'\001\016\001 \001\f\001\020\001\035\001\r\001\n\006>\003\n\001\033\001\006\001\003\001A\001\"\001\f\001\036\001(\001)\001+\0010\0011\0018\0019\001=\0016\001@\001:\0014\001/\001-\001,\0013\001;\001*\0012\0015\0017\001<\001\t\001?\001.\001\t\001$\001\000\001%\001\000\001\013\001\037\001(\001)\001+\0010\001\032\001\027\0019\001\023\001\030\001@\001:\001\031\001/\001-\001,\001\025\001;\001*\001\026\001\024\0017\001<\001\034\001?\001.\001\t\003\000\001\021ﾁ\000";
  private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001\004\001\002\001\000\001\001\023\000\001!\001#\001\007\001\b\001\022\001\f\001\005\001\017\001&\001'\001\016\001 \001\f\001\020\001\035\001\r\001\n\006>\003\n\001\033\001\006\001\003\001A\001\"\001\f\001\036\001(\001)\001+\0010\0011\0018\0019\001=\0016\001@\001:\0014\001/\001-\001,\0013\001;\001*\0012\0015\0017\001<\001\t\001?\001.\001\t\001$\001\000\001%\001\000\001\013\001\037\001(\001)\001+\0010\001\032\001\027\0019\001\023\001\030\001@\001:\001\031\001/\001-\001,\001\025\001;\001*\001\026\001\024\0017\001<\001\034\001?\001.\001\t\003\000\001\021ﾁ\000");



  
  private static final int[] ZZ_ACTION = zzUnpackAction();







  
  private static final String ZZ_ACTION_PACKED_0 = "\003\000\013\001\002\002\001\003\001\004\001\005\001\006\001\007\001\002\001\b\001\t\001\002\001\n\001\013\001\002\001\f\002\002\002\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\002\023\002\025\001\023\001\025\002\023\002\025\006\023\001\025\001\023\001\025\001\023\001\001\001\026\007\001\001\027\003\001\001\030\001\001\001\000\001\031\001\004\003\031\001\006\001\002\001\032\001\033\001\034\001\002\001\035\001\000\001\002\001\000\002\023\001\025\027\023\001\025\002\023\001\025$\023\002\000\001\036\001\037\002\000\001 \004\031\001!\001\"\001#\001$\001%\001\002\001\000/\023\001\025\017\023\001&\001'\001\000\004\031\001(\001\002\001\000\001\025\023\023\001\025\016\023\001\000\001\031\002\000\002)\003\023\001\025\021\023\004\000\001*\013\023\001+\003\000\003\023\001\000\001*\001\000\001\023\002\000\001*\001\023\001*";







  
  private static int[] zzUnpackAction() {
    int[] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction("\003\000\013\001\002\002\001\003\001\004\001\005\001\006\001\007\001\002\001\b\001\t\001\002\001\n\001\013\001\002\001\f\002\002\002\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\002\023\002\025\001\023\001\025\002\023\002\025\006\023\001\025\001\023\001\025\001\023\001\001\001\026\007\001\001\027\003\001\001\030\001\001\001\000\001\031\001\004\003\031\001\006\001\002\001\032\001\033\001\034\001\002\001\035\001\000\001\002\001\000\002\023\001\025\027\023\001\025\002\023\001\025$\023\002\000\001\036\001\037\002\000\001 \004\031\001!\001\"\001#\001$\001%\001\002\001\000/\023\001\025\017\023\001&\001'\001\000\004\031\001(\001\002\001\000\001\025\023\023\001\025\016\023\001\000\001\031\002\000\002)\003\023\001\025\021\023\004\000\001*\013\023\001+\003\000\003\023\001\000\001*\001\000\001\023\002\000\001*\001\023\001*", offset, result);
    return result;
  }
  
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }




  
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();





















  
  private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000B\000\000Æ\000Ĉ\000Ŋ\000ƌ\000ǎ\000Ȑ\000ɒ\000ʔ\000˖\000̘\000͚\000Μ\000Ϟ\000Р\000Ѣ\000Ҥ\000Ӧ\000Ԩ\000ժ\000֬\000׮\000ذ\000ٲ\000ڴ\000۶\000ܸ\000ݺ\000޼\000߾\000ࡀ\000Р\000ࢂ\000Р\000Р\000Р\000ࣄ\000Р\000आ\000ै\000ঊ\000ৌ\000਎\000੐\000઒\000૔\000ଖ\000୘\000ச\000௜\000ఞ\000ౠ\000ಢ\000೤\000ദ\000൨\000ࣄ\000ඪ\000෬\000Р\000ฮ\000๰\000າ\000໴\000༶\000ླྀ\000ྺ\000Р\000࿼\000ှ\000ႀ\000Р\000Ⴢ\000ᄄ\000ᅆ\000ᆈ\000ᇊ\000ሌ\000቎\000Р\000ነ\000ዒ\000ጔ\000Р\000ፖ\000Р\000᎘\000Ꮪ\000ᐜ\000ᑞ\000ᒠ\000ᓢ\000ᔤ\000ᕦ\000ᖨ\000ᗪ\000ᘬ\000᙮\000ᚰ\000ᛲ\000᜴\000᝶\000ី\000៺\000ᠼ\000᡾\000ᣀ\000ᤂ\000᥄\000ᦆ\000ᧈ\000ᨊ\000ᩌ\000᪎\000᫐\000ᬒ\000᭔\000ᮖ\000ᯘ\000ᰚ\000ᱜ\000Პ\000᳠\000ᴢ\000ᵤ\000ᶦ\000ᷨ\000Ḫ\000Ṭ\000Ắ\000Ự\000ἲ\000ὴ\000ᾶ\000Ὸ\000›\000⁼\000₾\000℀\000⅂\000ↄ\000⇆\000∈\000≊\000⊌\000⋎\000⌐\000⍒\000⎔\000⏖\000␘\000⑚\000⒜\000ⓞ\000┠\000╢\000▤\000Р\000Р\000◦\000☨\000ᆈ\000♪\000⚬\000⛮\000✰\000Р\000Р\000Р\000❲\000➴\000⟶\000⠸\000ദ\000⡺\000⢼\000⣾\000⥀\000⦂\000⧄\000⨆\000⩈\000⪊\000⫌\000⬎\000⭐\000⮒\000⯔\000Ⱆ\000ⱘ\000Ⲛ\000Ⳝ\000ⴞ\000ⵠ\000ⶢ\000ⷤ\000⸦\000⹨\000⺪\000⻬\000⼮\000⽰\000⾲\000⿴\000〶\000へ\000ズ\000ー\000ㄾ\000ㆀ\000㇂\000㈄\000㉆\000ᬒ\000㊈\000㋊\000㌌\000㍎\000㎐\000㏒\000㐔\000㑖\000㒘\000㓚\000㔜\000㕞\000㖠\000㗢\000㘤\000㙦\000㚨\000㛪\000㜬\000㝮\000㞰\000㟲\000Р\000Р\000㠴\000㡶\000㢸\000㣺\000㤼\000➴\000㥾\000㧀\000⿴\000㨂\000㩄\000㪆\000㫈\000㬊\000㭌\000㮎\000㯐\000㰒\000㱔\000㲖\000㳘\000㴚\000㵜\000㶞\000㷠\000㸢\000㹤\000㺦\000㻨\000㼪\000㽬\000㾮\000㿰\000䀲\000䁴\000䂶\000ᯘ\000䃸\000䄺\000䅼\000䆾\000䈀\000䉂\000䊄\000䋆\000䌈\000䍊\000Μ\000Р\000䎌\000䏎\000䐐\000䐐\000䑒\000䒔\000䓖\000䔘\000䕚\000䖜\000䗞\000䘠\000䙢\000䚤\000䛦\000䜨\000䝪\000䞬\000䟮\000䠰\000䡲\000䢴\000䣶\000䤸\000䥺\000ᄄ\000䦼\000䧾\000䩀\000䪂\000䫄\000䬆\000䭈\000䮊\000䯌\000䰎\000䱐\000䢴\000䲒\000䳔\000䴖\000䵘\000䶚\000䷜\000丞\000㠴\000习\000亢\000令\000伦\000Р\000佨\000䢴";






















  
  private static int[] zzUnpackRowMap() {
    int[] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap("\000\000\000B\000\000Æ\000Ĉ\000Ŋ\000ƌ\000ǎ\000Ȑ\000ɒ\000ʔ\000˖\000̘\000͚\000Μ\000Ϟ\000Р\000Ѣ\000Ҥ\000Ӧ\000Ԩ\000ժ\000֬\000׮\000ذ\000ٲ\000ڴ\000۶\000ܸ\000ݺ\000޼\000߾\000ࡀ\000Р\000ࢂ\000Р\000Р\000Р\000ࣄ\000Р\000आ\000ै\000ঊ\000ৌ\000਎\000੐\000઒\000૔\000ଖ\000୘\000ச\000௜\000ఞ\000ౠ\000ಢ\000೤\000ദ\000൨\000ࣄ\000ඪ\000෬\000Р\000ฮ\000๰\000າ\000໴\000༶\000ླྀ\000ྺ\000Р\000࿼\000ှ\000ႀ\000Р\000Ⴢ\000ᄄ\000ᅆ\000ᆈ\000ᇊ\000ሌ\000቎\000Р\000ነ\000ዒ\000ጔ\000Р\000ፖ\000Р\000᎘\000Ꮪ\000ᐜ\000ᑞ\000ᒠ\000ᓢ\000ᔤ\000ᕦ\000ᖨ\000ᗪ\000ᘬ\000᙮\000ᚰ\000ᛲ\000᜴\000᝶\000ី\000៺\000ᠼ\000᡾\000ᣀ\000ᤂ\000᥄\000ᦆ\000ᧈ\000ᨊ\000ᩌ\000᪎\000᫐\000ᬒ\000᭔\000ᮖ\000ᯘ\000ᰚ\000ᱜ\000Პ\000᳠\000ᴢ\000ᵤ\000ᶦ\000ᷨ\000Ḫ\000Ṭ\000Ắ\000Ự\000ἲ\000ὴ\000ᾶ\000Ὸ\000›\000⁼\000₾\000℀\000⅂\000ↄ\000⇆\000∈\000≊\000⊌\000⋎\000⌐\000⍒\000⎔\000⏖\000␘\000⑚\000⒜\000ⓞ\000┠\000╢\000▤\000Р\000Р\000◦\000☨\000ᆈ\000♪\000⚬\000⛮\000✰\000Р\000Р\000Р\000❲\000➴\000⟶\000⠸\000ദ\000⡺\000⢼\000⣾\000⥀\000⦂\000⧄\000⨆\000⩈\000⪊\000⫌\000⬎\000⭐\000⮒\000⯔\000Ⱆ\000ⱘ\000Ⲛ\000Ⳝ\000ⴞ\000ⵠ\000ⶢ\000ⷤ\000⸦\000⹨\000⺪\000⻬\000⼮\000⽰\000⾲\000⿴\000〶\000へ\000ズ\000ー\000ㄾ\000ㆀ\000㇂\000㈄\000㉆\000ᬒ\000㊈\000㋊\000㌌\000㍎\000㎐\000㏒\000㐔\000㑖\000㒘\000㓚\000㔜\000㕞\000㖠\000㗢\000㘤\000㙦\000㚨\000㛪\000㜬\000㝮\000㞰\000㟲\000Р\000Р\000㠴\000㡶\000㢸\000㣺\000㤼\000➴\000㥾\000㧀\000⿴\000㨂\000㩄\000㪆\000㫈\000㬊\000㭌\000㮎\000㯐\000㰒\000㱔\000㲖\000㳘\000㴚\000㵜\000㶞\000㷠\000㸢\000㹤\000㺦\000㻨\000㼪\000㽬\000㾮\000㿰\000䀲\000䁴\000䂶\000ᯘ\000䃸\000䄺\000䅼\000䆾\000䈀\000䉂\000䊄\000䋆\000䌈\000䍊\000Μ\000Р\000䎌\000䏎\000䐐\000䐐\000䑒\000䒔\000䓖\000䔘\000䕚\000䖜\000䗞\000䘠\000䙢\000䚤\000䛦\000䜨\000䝪\000䞬\000䟮\000䠰\000䡲\000䢴\000䣶\000䤸\000䥺\000ᄄ\000䦼\000䧾\000䩀\000䪂\000䫄\000䬆\000䭈\000䮊\000䯌\000䰎\000䱐\000䢴\000䲒\000䳔\000䴖\000䵘\000䶚\000䷜\000丞\000㠴\000习\000亢\000令\000伦\000Р\000佨\000䢴", offset, result);
    return result;
  }
  
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    } 
    return j;
  }



  
  private static final int[] ZZ_TRANS = zzUnpackTrans();




















































































































  
  private static final String ZZ_TRANS_PACKED_0 = "\001\017\001\020\001\021\001\022\001\023\001\024\002\017\001\025\001\017\001\026\001\027\002\017\001\030\001\017\001\031\001\032\r\017\001\033\001\034\001\023\001\035\001\036\001\037\031\017\001\026\003\017\001 \001!\001\000\001 \001\023\002 \001\"\005 \001#\001 \001$\021 \001\023\001%\036 \001&\002'\001\000\001'\001(\002'\001(\005'\001(\001'\001(\003'\001)\001*\001+\001,\001-\001.\001/\0010\006'\002(\005'\0011\0012\0013\0014\0015\0016\001'\0017\0018\0010\001,\001+\001/\001*\001.\0019\001-\001'\001:\001;\001<\001)\003'\001(\007=\001>:=\017?\001>2?\016@\001A3@\013B\001C6B\016@\001D3@\013B\001E6B\016@\001F3@\013B\001F6B\021G\001H0G\037I\001JAI\001K\"I\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000!\017\001\020\002\000\001\023\001\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\023 \017B\000\tL\002M\002L\001N\005L\001O\003M\001P\003M\001L\001Q\001L\001\000\tL\031M\001L\001\000\001\023\002\000\001\023\034\000\001\023 \000\004\024\001\000\001\024\001R\032\024\001\000 \024\002\025\001\000?\025\002\017\004\000\004\017\001\026\001\000\002\017\001\000\002\017\001\000\013\017\001S\001\017\001\000\001\017\001\000\034\017\001\026\003\017\013\000\001TD\000\001U\022\000\001V \000\002\017\004\000\005\017\001\000\002\017\001\000\001\017\001W\001\000\r\017\001\000\001\017\001V \017\021\000\001XO\000\001Y\"\000\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001V \017\002\035\001\000?\035\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000\002\017\001\037\035\017\002Z\004[\005Z\001[\002Z\001[\002Z\001[\rZ\001[\001Z\001[\003Z\001\017\034Z\002 \001\000\001 \001\000\002 \001\000\005 \001\000\001 \001\000\021 \002\000\036 \001\000\001 \001!\001\000\001 \001\023\002 \001\000\005 \001\000\001 \001\000\021 \001\023\001\000\036 #\000\001%\037\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\036'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001\\\005'\001]\006'\002\000\007'\001;\006'\001]\003'\001\\\b'\001;\002'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\003'\001^\001;\002'\001_\001`\001'\001a\006'\002\000\005'\001b\001c\001;\005'\001;\001a\003'\001;\001`\001'\001_\004'\001^\003'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001d\007'\002\000\005'\001e\001'\001f\t'\001d\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001g\001h\004'\001i\006'\002\000\005'\001j\003'\001k\002'\001l\001'\001i\001'\001h\001'\001g\001'\001m\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001n\b'\002\000\007'\001o\001'\001p\t'\001n\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001q\001r\001'\001s\007'\002\000\n'\001t\001'\001u\002'\001q\001'\001s\003'\001r\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001v\001'\001w\006'\002\000\005'\001x\b'\001w\004'\001v\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001y\f'\001z\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001{\001|\n'\002\000\006'\001}\001~\001\004'\001\001'\001|\001{\003'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001u\001\007'\002\000\005'\001\001'\001;\001'\001\003'\001\003'\001\001'\001u\001\001'\001\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\001'\001\006'\002\000\005'\001\003'\001\004'\001\004'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001\003'\001;\007'\002\000\006'\001\t'\001\001;\002'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001\003'\001\004'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001\b'\001\005'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001;\002'\001\001\001;\001\006'\002\000\005'\001\007'\001;\001\002'\002;\001\001'\001\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001;\007'\002\000\021'\001;\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\006'\001\007'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\005'\001\r'\001\n'\001\000\007=\001\000:=\017?\001\0002?\016@\001\0003@\016\000\0013\000\013B\001\0006B\013\000\001D\000\001 >\000\001 6\000\021G\001\0000G\021\000\001¡0\000\037I\001\000\"I\037\000\001¢\"\000\036L\001£,L\002M\bL\bM\001L\001M\001L\001£\tL\031M\nL\002¤\bL\b¤\001L\001¤\001L\001£\tL\031¤\nL\002M\bL\001M\001¥\006M\001L\001M\001L\001£\tL\031M\nL\002M\bL\001M\001¦\003M\001§\002M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001¨\001L\001£\tL\031M\001L\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001© \017\013\000\001ªD\000\001«3\000\002\017\004\000\005\017\001\000\002\017\001\000\001\017\001¬\001\000\r\017\001\000\001\017\001\000 \017\037\000\001­\"\000\002Z\004[\005Z\001[\002Z\001[\002Z\001[\rZ\001[\001Z\001[\003Z\001®\034Z%[\001¯\034[\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001°\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001±\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001²\006'\002\000\016'\001²\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001³\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001\f'\002\000\f'\001´\005'\001\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001µ\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001¶\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001·\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001;\006'\002\000\t'\001¸\004'\001;\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001¹\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001º\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001»\007'\002\000\007'\001¼\001½\b'\001»\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001¾\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001¿\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001À\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\006'\001;\t'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Á\006'\002\000\016'\001Á\007'\001Â\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ã\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ä\001'\001Å\001Æ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ç\b'\002\000\023'\001Ç\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001È\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001É\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ê\001;\n'\002\000\017'\001;\001Ê\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001;\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ë\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001Ì\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001Í\004'\001Î\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001Ï\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ð\006'\002\000\016'\001Ð\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ñ\013'\002\000\020'\001Ñ\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ò\b'\002\000\023'\001Ò\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ó\005'\001Ô\006'\002\000\016'\001Ô\003'\001Ó\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Õ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ö\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001×\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ø\b'\002\000\t'\001Ù\t'\001Ø\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ú\n'\002\000\017'\001Ú\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Û\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001;\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ü\f'\002\000\022'\001Ü\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ý\n'\002\000\017'\001Ý\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001´\007'\002\000\021'\001´\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001´\f'\002\000\022'\001´\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Å\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001½\013'\002\000\n'\001Þ\005'\001½\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ß\007'\002\000\f'\001à\001´\003'\001ß\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001á\f'\002\000\022'\001á\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\035'\001»\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001â\f'\002\000\022'\001â\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Æ\n'\002\000\017'\001Æ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001;\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001ã\001ä\001'\001s\001å\006'\002\000\006'\001\007'\001å\001ã\001'\001s\003'\001ä\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001æ\f'\002\000\n'\001ç\007'\001æ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\007'\001è\b'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001é\007'\002\000\021'\001é\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001;\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ê\001'\001;\021'\001;\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ë\004'\001;\007'\002\000\021'\001;\001ë\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ì\f'\002\000\022'\001ì\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001í\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001;\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001î\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001;\026'\017\000\001ï>\000\001ïU\000\001ð\"\000\036ñ\001\000#ñ\tL\002M\bL\001M\001ò\006M\001L\001M\001L\001£\tL\031M\nL\002M\bL\002M\001ó\005M\001L\001M\001L\001£\tL\031M\nL\002M\bL\006M\001ô\001M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001õ\001L\001£\tL\031M\001L\002¬\001\000?¬\t\000\002ö\005\000\001ö\002\000\bö\001\000\001ö\013\000\031ö\001\000\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000\004\017\001÷\033\017&\000\001ø\033\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001ù\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Æ\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001;\006'\002\000\016'\001;\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ú\f'\002\000\022'\001ú\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001û\b'\002\000\023'\001û\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ä\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001Ö\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ü\b'\002\000\t'\001ý\t'\001ü\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Î\001'\001;\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001þ\006'\002\000\016'\001þ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001Î\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ÿ\f'\002\000\022'\001ÿ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\020'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ā\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001°\007'\002\000\021'\001°\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ā\007'\002\000\021'\001ā\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ă\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ă\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001;\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Î\f'\002\000\022'\001Î\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001;\f'\002\000\022'\001;\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ą\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ą\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001Î\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Æ\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001;\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ć\006'\002\000\016'\001Ć\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001°\006'\002\000\016'\001°\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001ć\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ĉ\007'\002\000\021'\001Ĉ\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001´\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ĉ\b'\002\000\023'\001ĉ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001;\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Ċ\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ċ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Č\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001č\006'\002\000\016'\001č\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001;\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ď\f'\002\000\022'\001Ď\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001ď\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001Đ\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001đ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001Ē\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ď\b'\002\000\023'\001Ď\002'\001đ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ê\013'\002\000\020'\001Ê\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001ē\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ĕ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ĕ\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001;\b'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001;\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001;\001Ė\005'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ė\f'\002\000\022'\001ė\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ę\007'\002\000\021'\001Ę\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ę\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ě\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001ě\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\035ñ\001Ĝ\001\000#ñ\tL\002M\bL\002M\001ĝ\005M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001Ğ\001M\001L\001£\tL\031M\nL\002M\bL\007M\001ó\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001M\001ğ\001£\tL\031M\001L\002÷\004ø\005÷\001ø\002÷\001ø\002÷\001ø\r÷\001ø\001÷\001ø\005÷\001Ġ\032÷'ø\001ġ\032ø\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ģ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001ģ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001´\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001u\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Æ\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ď\b'\002\000\023'\001Ď\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001´\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ĥ\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001´\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ĥ\006'\002\000\016'\001ĥ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ħ\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001´\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ħ\f'\002\000\022'\001ħ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Æ\006'\002\000\016'\001Æ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ĩ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ĩ\006'\002\000\016'\001ĩ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001Ī\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\007'\001ī\t'\002\000\025'\001ī\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ć\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ĭ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ĭ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Į\006'\002\000\005'\001Ć\b'\001Į\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001į\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001İ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001ı\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ĳ\b'\002\000\023'\001Ĳ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001u\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ĳ\b'\002\000\023'\001ĳ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ĵ\004'\001ĵ\007'\002\000\021'\001ĵ\001Ĵ\003'\001Ķ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\036ķ\001\000#ķ\tL\002M\bL\003M\001ó\004M\001Ğ\001M\001L\001£\tL\031M\016L\001ĸ\020L\001£(L\002Ĺ\001L\001Ĺ\002ğ\002Ĺ\001ğ\004Ĺ\tğ\001Ĺ\001ğ\001Ĺ\001ĺ\001L\001Ĺ\001L\001Ļ\005Ĺ\031ğ\001Ĺ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ļ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ľ\f'\002\000\022'\001Ľ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ĉ\n'\002\000\017'\001Ĉ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ľ\006'\002\000\016'\001ľ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ŀ\n'\002\000\017'\001Ŀ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001Ä\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ĭ\n'\002\000\017'\001Ĭ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\030'\001ŀ\005'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Į\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001;\n'\002\000\017'\001;\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Ł\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Æ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ł\b'\002\000\023'\001ł\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001Ń\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001´\006'\002\000\016'\001´\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001ń\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ĭ\007'\002\000\021'\001Ĭ\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ņ\006'\002\000\016'\001Ņ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ņ\026'\001\000\036ķ\001\000\003ķ\001Ň\037ķ\rL\001ğ\020L\001£(L\002Ĺ\001L\001Ĺ\002ğ\002Ĺ\001ğ\004Ĺ\tğ\001Ĺ\001ğ\001Ĺ\001ĺ\001L\001Ĺ\002L\005Ĺ\031ğ\001Ĺ\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001ň\001Ŋ\001ñ\001ň\002ñ\005ň\031ŉ\001ň\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ô\006'\002\000\016'\001Ô\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ŋ\006'\002\000\016'\001ŋ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001;\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001k\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ō\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001¾\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Æ\013'\002\000\020'\001Æ\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ĭ\006'\002\000\016'\001Ĭ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001°\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ō\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001Ŏ\001Ŋ\001ñ\001ň\002ñ\005ň\031ŉ\001ň\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001Ŏ\001Ŋ\001ñ\001ň\001ñ\001ŏ\005ň\031ŉ\001ň\005\000\002Ŋ\001\000\001Ŋ\002Ő\002Ŋ\001Ő\004Ŋ\tŐ\001Ŋ\001Ő\002Ŋ\001\000\001Ŋ\002\000\005Ŋ\031Ő\001Ŋ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001Æ\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001ő\013'\002\000\020'\001ő\r'\001\000\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\002ķ\005Œ\031œ\001Œ\005\000\002Ŋ\001\000\001Ŋ\002Ő\002Ŋ\001Ő\004Ŋ\tŐ\001Ŋ\001Ő\002Ŋ\001\000\001Ŋ\001\000\001Ŕ\005Ŋ\031Ő\001Ŋ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ŕ\007'\002\000\021'\001ŕ\f'\001\000\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\001ķ\001Ň\005Œ\031œ\001Œ\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\001ķ\001Ŗ\005Œ\031œ\001Œ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001\030'\001\000";




















































































































  
  private static final int ZZ_UNKNOWN_ERROR = 0;




















































































































  
  private static final int ZZ_NO_MATCH = 1;



















































































































  
  private static final int ZZ_PUSHBACK_2BIG = 2;




















































































































  
  private static int[] zzUnpackTrans() {
    int[] result = new int[20394];
    int offset = 0;
    offset = zzUnpackTrans("\001\017\001\020\001\021\001\022\001\023\001\024\002\017\001\025\001\017\001\026\001\027\002\017\001\030\001\017\001\031\001\032\r\017\001\033\001\034\001\023\001\035\001\036\001\037\031\017\001\026\003\017\001 \001!\001\000\001 \001\023\002 \001\"\005 \001#\001 \001$\021 \001\023\001%\036 \001&\002'\001\000\001'\001(\002'\001(\005'\001(\001'\001(\003'\001)\001*\001+\001,\001-\001.\001/\0010\006'\002(\005'\0011\0012\0013\0014\0015\0016\001'\0017\0018\0010\001,\001+\001/\001*\001.\0019\001-\001'\001:\001;\001<\001)\003'\001(\007=\001>:=\017?\001>2?\016@\001A3@\013B\001C6B\016@\001D3@\013B\001E6B\016@\001F3@\013B\001F6B\021G\001H0G\037I\001JAI\001K\"I\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000!\017\001\020\002\000\001\023\001\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\023 \017B\000\tL\002M\002L\001N\005L\001O\003M\001P\003M\001L\001Q\001L\001\000\tL\031M\001L\001\000\001\023\002\000\001\023\034\000\001\023 \000\004\024\001\000\001\024\001R\032\024\001\000 \024\002\025\001\000?\025\002\017\004\000\004\017\001\026\001\000\002\017\001\000\002\017\001\000\013\017\001S\001\017\001\000\001\017\001\000\034\017\001\026\003\017\013\000\001TD\000\001U\022\000\001V \000\002\017\004\000\005\017\001\000\002\017\001\000\001\017\001W\001\000\r\017\001\000\001\017\001V \017\021\000\001XO\000\001Y\"\000\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001V \017\002\035\001\000?\035\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000\002\017\001\037\035\017\002Z\004[\005Z\001[\002Z\001[\002Z\001[\rZ\001[\001Z\001[\003Z\001\017\034Z\002 \001\000\001 \001\000\002 \001\000\005 \001\000\001 \001\000\021 \002\000\036 \001\000\001 \001!\001\000\001 \001\023\002 \001\000\005 \001\000\001 \001\000\021 \001\023\001\000\036 #\000\001%\037\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\036'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001\\\005'\001]\006'\002\000\007'\001;\006'\001]\003'\001\\\b'\001;\002'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\003'\001^\001;\002'\001_\001`\001'\001a\006'\002\000\005'\001b\001c\001;\005'\001;\001a\003'\001;\001`\001'\001_\004'\001^\003'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001d\007'\002\000\005'\001e\001'\001f\t'\001d\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001g\001h\004'\001i\006'\002\000\005'\001j\003'\001k\002'\001l\001'\001i\001'\001h\001'\001g\001'\001m\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001n\b'\002\000\007'\001o\001'\001p\t'\001n\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001q\001r\001'\001s\007'\002\000\n'\001t\001'\001u\002'\001q\001'\001s\003'\001r\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001v\001'\001w\006'\002\000\005'\001x\b'\001w\004'\001v\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001y\f'\001z\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001{\001|\n'\002\000\006'\001}\001~\001\004'\001\001'\001|\001{\003'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001u\001\007'\002\000\005'\001\001'\001;\001'\001\003'\001\003'\001\001'\001u\001\001'\001\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\001'\001\006'\002\000\005'\001\003'\001\004'\001\004'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001\003'\001;\007'\002\000\006'\001\t'\001\001;\002'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001\003'\001\004'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001\b'\001\005'\001\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001;\002'\001\001\001;\001\006'\002\000\005'\001\007'\001;\001\002'\002;\001\001'\001\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001;\007'\002\000\021'\001;\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\006'\001\007'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\005'\001\r'\001\n'\001\000\007=\001\000:=\017?\001\0002?\016@\001\0003@\016\000\0013\000\013B\001\0006B\013\000\001D\000\001 >\000\001 6\000\021G\001\0000G\021\000\001¡0\000\037I\001\000\"I\037\000\001¢\"\000\036L\001£,L\002M\bL\bM\001L\001M\001L\001£\tL\031M\nL\002¤\bL\b¤\001L\001¤\001L\001£\tL\031¤\nL\002M\bL\001M\001¥\006M\001L\001M\001L\001£\tL\031M\nL\002M\bL\001M\001¦\003M\001§\002M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001¨\001L\001£\tL\031M\001L\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001© \017\013\000\001ªD\000\001«3\000\002\017\004\000\005\017\001\000\002\017\001\000\001\017\001¬\001\000\r\017\001\000\001\017\001\000 \017\037\000\001­\"\000\002Z\004[\005Z\001[\002Z\001[\002Z\001[\rZ\001[\001Z\001[\003Z\001®\034Z%[\001¯\034[\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001°\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001±\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001²\006'\002\000\016'\001²\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001³\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001\f'\002\000\f'\001´\005'\001\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001µ\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001¶\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001·\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001;\006'\002\000\t'\001¸\004'\001;\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001¹\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001º\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001»\007'\002\000\007'\001¼\001½\b'\001»\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001¾\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001¿\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001À\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\006'\001;\t'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Á\006'\002\000\016'\001Á\007'\001Â\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ã\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ä\001'\001Å\001Æ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ç\b'\002\000\023'\001Ç\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001È\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001É\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ê\001;\n'\002\000\017'\001;\001Ê\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001;\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ë\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001Ì\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001Í\004'\001Î\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001Ï\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ð\006'\002\000\016'\001Ð\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ñ\013'\002\000\020'\001Ñ\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ò\b'\002\000\023'\001Ò\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\006'\001\027'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ó\005'\001Ô\006'\002\000\016'\001Ô\003'\001Ó\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Õ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ö\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001×\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ø\b'\002\000\t'\001Ù\t'\001Ø\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ú\n'\002\000\017'\001Ú\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Û\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001;\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ü\f'\002\000\022'\001Ü\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ý\n'\002\000\017'\001Ý\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001´\007'\002\000\021'\001´\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001´\f'\002\000\022'\001´\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Å\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001½\013'\002\000\n'\001Þ\005'\001½\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ß\007'\002\000\f'\001à\001´\003'\001ß\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001á\f'\002\000\022'\001á\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\035'\001»\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001â\f'\002\000\022'\001â\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Æ\n'\002\000\017'\001Æ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001;\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001ã\001ä\001'\001s\001å\006'\002\000\006'\001\007'\001å\001ã\001'\001s\003'\001ä\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001æ\f'\002\000\n'\001ç\007'\001æ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\007'\001è\b'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001é\007'\002\000\021'\001é\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001;\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ê\001'\001;\021'\001;\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ë\004'\001;\007'\002\000\021'\001;\001ë\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ì\f'\002\000\022'\001ì\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001í\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001;\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001î\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001;\026'\017\000\001ï>\000\001ïU\000\001ð\"\000\036ñ\001\000#ñ\tL\002M\bL\001M\001ò\006M\001L\001M\001L\001£\tL\031M\nL\002M\bL\002M\001ó\005M\001L\001M\001L\001£\tL\031M\nL\002M\bL\006M\001ô\001M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001õ\001L\001£\tL\031M\001L\002¬\001\000?¬\t\000\002ö\005\000\001ö\002\000\bö\001\000\001ö\013\000\031ö\001\000\002\017\004\000\005\017\001\000\002\017\001\000\002\017\001\000\r\017\001\000\001\017\001\000\004\017\001÷\033\017&\000\001ø\033\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001ù\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Æ\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001;\006'\002\000\016'\001;\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ú\f'\002\000\022'\001ú\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001û\b'\002\000\023'\001û\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ä\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001Ö\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ü\b'\002\000\t'\001ý\t'\001ü\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Î\001'\001;\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001þ\006'\002\000\016'\001þ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001Î\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ÿ\f'\002\000\022'\001ÿ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001;\013'\002\000\020'\001;\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ā\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001°\007'\002\000\021'\001°\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ā\007'\002\000\021'\001ā\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ă\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ă\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001;\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Î\f'\002\000\022'\001Î\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001;\f'\002\000\022'\001;\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ą\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ą\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001Î\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Æ\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001;\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ć\006'\002\000\016'\001Ć\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001°\006'\002\000\016'\001°\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001ć\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ĉ\007'\002\000\021'\001Ĉ\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001´\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ĉ\b'\002\000\023'\001ĉ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001;\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Ċ\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ċ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Č\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001č\006'\002\000\016'\001č\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001;\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ď\f'\002\000\022'\001Ď\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001ď\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\031'\001Đ\004'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001đ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001Ē\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ď\b'\002\000\023'\001Ď\002'\001đ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Ê\013'\002\000\020'\001Ê\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001ē\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001Ĕ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ĕ\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\005'\001;\b'\001\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001;\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001;\001Ė\005'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ė\f'\002\000\022'\001ė\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ę\007'\002\000\021'\001Ę\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001ę\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ě\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\026'\001ě\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\035ñ\001Ĝ\001\000#ñ\tL\002M\bL\002M\001ĝ\005M\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001Ğ\001M\001L\001£\tL\031M\nL\002M\bL\007M\001ó\001L\001M\001L\001£\tL\031M\nL\002M\bL\bM\001L\001M\001ğ\001£\tL\031M\001L\002÷\004ø\005÷\001ø\002÷\001ø\002÷\001ø\r÷\001ø\001÷\001ø\005÷\001Ġ\032÷'ø\001ġ\032ø\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ģ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001ģ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001´\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001u\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001Æ\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ď\b'\002\000\023'\001Ď\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001´\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ĥ\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001´\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ĥ\006'\002\000\016'\001ĥ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\r'\001Ħ\020'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001´\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001ħ\f'\002\000\022'\001ħ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Æ\006'\002\000\016'\001Æ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Ĩ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ĩ\006'\002\000\016'\001ĩ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\027'\001Ī\006'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\007'\001ī\t'\002\000\025'\001ī\b'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ć\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001Ĭ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ĭ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Į\006'\002\000\005'\001Ć\b'\001Į\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001į\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001İ\030'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001ı\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001Ĳ\b'\002\000\023'\001Ĳ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001u\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ĳ\b'\002\000\023'\001ĳ\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ĵ\004'\001ĵ\007'\002\000\021'\001ĵ\001Ĵ\003'\001Ķ\007'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001\006'\002\000\016'\001\017'\001\000\036ķ\001\000#ķ\tL\002M\bL\003M\001ó\004M\001Ğ\001M\001L\001£\tL\031M\016L\001ĸ\020L\001£(L\002Ĺ\001L\001Ĺ\002ğ\002Ĺ\001ğ\004Ĺ\tğ\001Ĺ\001ğ\001Ĺ\001ĺ\001L\001Ĺ\001L\001Ļ\005Ĺ\031ğ\001Ĺ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ļ\026'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\004'\001Ľ\f'\002\000\022'\001Ľ\013'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ĉ\n'\002\000\017'\001Ĉ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ľ\006'\002\000\016'\001ľ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ŀ\n'\002\000\017'\001Ŀ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\013'\001Ä\022'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001Ĭ\n'\002\000\017'\001Ĭ\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\030'\001ŀ\005'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Į\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\006'\001;\n'\002\000\017'\001;\016'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001Ł\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\n'\001Æ\023'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001ł\b'\002\000\023'\001ł\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001Ń\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001´\006'\002\000\016'\001´\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\b'\001ń\025'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001Ĭ\007'\002\000\021'\001Ĭ\f'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ņ\006'\002\000\016'\001Ņ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\007'\001ņ\026'\001\000\036ķ\001\000\003ķ\001Ň\037ķ\rL\001ğ\020L\001£(L\002Ĺ\001L\001Ĺ\002ğ\002Ĺ\001ğ\004Ĺ\tğ\001Ĺ\001ğ\001Ĺ\001ĺ\001L\001Ĺ\002L\005Ĺ\031ğ\001Ĺ\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001ň\001Ŋ\001ñ\001ň\002ñ\005ň\031ŉ\001ň\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ô\006'\002\000\016'\001Ô\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001ŋ\006'\002\000\016'\001ŋ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001;\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001k\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001Ō\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\024'\001¾\t'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001Æ\013'\002\000\020'\001Æ\r'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\n'\001Ĭ\006'\002\000\016'\001Ĭ\017'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001°\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\f'\001ō\021'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\b'\001\b'\002\000\023'\001\n'\001\000\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001Ŏ\001Ŋ\001ñ\001ň\002ñ\005ň\031ŉ\001ň\005ñ\002ň\001ñ\001ň\002ŉ\002ň\001ŉ\004ň\tŉ\001ň\001ŉ\001Ŏ\001Ŋ\001ñ\001ň\001ñ\001ŏ\005ň\031ŉ\001ň\005\000\002Ŋ\001\000\001Ŋ\002Ő\002Ŋ\001Ő\004Ŋ\tŐ\001Ŋ\001Ő\002Ŋ\001\000\001Ŋ\002\000\005Ŋ\031Ő\001Ŋ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\034'\001Æ\001'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\t'\001\024'\001\000\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\005'\001ő\013'\002\000\020'\001ő\r'\001\000\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\002ķ\005Œ\031œ\001Œ\005\000\002Ŋ\001\000\001Ŋ\002Ő\002Ŋ\001Ő\004Ŋ\tŐ\001Ŋ\001Ő\002Ŋ\001\000\001Ŋ\001\000\001Ŕ\005Ŋ\031Ő\001Ŋ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\t'\001ŕ\007'\002\000\021'\001ŕ\f'\001\000\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\001ķ\001Ň\005Œ\031œ\001Œ\005ķ\002Œ\001ķ\001Œ\002œ\002Œ\001œ\004Œ\tœ\001Œ\001œ\001Œ\001Ŋ\001ķ\001Œ\001ķ\001Ŗ\005Œ\031œ\001Œ\002'\001\000\001'\001\000\002'\001\000\005'\001\000\001'\001\000\021'\002\000\005'\001\030'\001\000", offset, result);
    return result;
  }
  
  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--; while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };







  
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  
  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\003\000\r\001\001\t\020\001\001\t\001\001\003\t\001\001\001\t\025\001\001\t\007\001\001\t\003\001\001\t\001\001\001\000\005\001\001\t\003\001\001\t\001\001\001\t\001\000\001\001\001\000B\001\002\000\002\t\002\000\005\001\003\t\003\001\001\000?\001\002\t\001\000\006\001\001\000#\001\001\000\001\001\002\000\001\001\001\t\025\001\004\000\r\001\003\000\003\001\001\000\001\001\001\000\001\001\002\000\001\t\002\001";

  
  private Reader zzReader;

  
  private int zzState;

  
  private static int[] zzUnpackAttribute() {
    int[] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute("\003\000\r\001\001\t\020\001\001\t\001\001\003\t\001\001\001\t\025\001\001\t\007\001\001\t\003\001\001\t\001\001\001\000\005\001\001\t\003\001\001\t\001\001\001\t\001\000\001\001\001\000B\001\002\000\002\t\002\000\005\001\003\t\003\001\001\000?\001\002\t\001\000\006\001\001\000#\001\001\000\001\001\002\000\001\001\001\t\025\001\004\000\r\001\003\000\003\001\001\000\001\001\001\000\001\001\002\000\001\t\002\001", offset, result);
    return result;
  }
  
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private int zzLexicalState = 0;





  
  private char[] zzBuffer;




  
  private int zzMarkedPos;




  
  private int zzCurrentPos;




  
  private int zzStartRead;




  
  private int zzEndRead;




  
  private boolean zzAtEOF;




  
  public static final int INTERNAL_ATTR_DOUBLE = -1;




  
  public static final int INTERNAL_ATTR_SINGLE = -2;




  
  public static final int INTERNAL_INTAG = -3;




  
  public static final int INTERNAL_IN_BOLDITALIC1 = -4;




  
  public static final int INTERNAL_IN_BOLDITALIC2 = -5;




  
  public static final int INTERNAL_IN_BOLD1 = -6;




  
  public static final int INTERNAL_IN_BOLD2 = -7;




  
  public static final int INTERNAL_IN_ITALIC1 = -8;




  
  public static final int INTERNAL_IN_ITALIC2 = -9;




  
  public static final int INTERNAL_IN_CODE = -10;




  
  public static final int INTERNAL_IN_SYNTAX_HIGHLIGHTING = -11;




  
  public static final int INTERNAL_IN_STRIKETHROUGH = -12;




  
  private static boolean completeCloseTags;





  
  public MarkdownTokenMaker() {}





  
  private void addEndToken(int tokenType) {
    addToken(this.zzMarkedPos, this.zzMarkedPos, tokenType);
  }






  
  private void addToken(int tokenType) {
    addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
  }






  
  private void addToken(int start, int end, int tokenType) {
    int so = start + this.offsetShift;
    addToken(this.zzBuffer, start, end, tokenType, so);
  }












  
  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    this.zzStartRead = this.zzMarkedPos;
  }


  
  protected OccurrenceMarker createOccurrenceMarker() {
    return (OccurrenceMarker)new HtmlOccurrenceMarker();
  }










  
  public boolean getCompleteCloseTags() {
    return completeCloseTags;
  }


  
  public boolean getCurlyBracesDenoteCodeBlocks(int languageIndex) {
    return false;
  }


  
  public String[] getLineCommentStartAndEnd(int languageIndex) {
    return null;
  }









  
  public boolean getMarkOccurrencesOfTokenType(int type) {
    return (type == 26);
  }















  
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;
    int languageIndex = 0;

    
    int state = 0;
    switch (initialTokenType) {
      case -3:
        state = 1;
        break;
      case -1:
        state = 3;
        break;
      case -2:
        state = 4;
        break;
      case -4:
        state = 5;
        break;
      case -5:
        state = 6;
        break;
      case -6:
        state = 7;
        break;
      case -7:
        state = 8;
        break;
      case -8:
        state = 9;
        break;
      case -9:
        state = 10;
        break;
      case -10:
        state = 12;
        break;
      case -11:
        state = 13;
        break;
      case -12:
        state = 11;
        break;
      default:
        state = 0;
        break;
    } 
    
    setLanguageIndex(languageIndex);
    this.start = text.offset;
    this.s = text;
    try {
      yyreset(this.zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return (Token)new TokenImpl();
    } 
  }






  
  public boolean isIdentifierChar(int languageIndex, char ch) {
    return (Character.isLetterOrDigit(ch) || ch == '-' || ch == '.' || ch == '_');
  }









  
  public static void setCompleteCloseTags(boolean complete) {
    completeCloseTags = complete;
  }







  
  private boolean zzRefill() {
    return (this.zzCurrentPos >= this.s.offset + this.s.count);
  }












  
  public final void yyreset(Reader reader) {
    this.zzBuffer = this.s.array;






    
    this.zzStartRead = this.s.offset;
    this.zzEndRead = this.zzStartRead + this.s.count - 1;
    this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
    this.zzLexicalState = 0;
    this.zzReader = reader;
    this.zzAtEOF = false;
  }









  
  public MarkdownTokenMaker(Reader in) {
    this.zzReader = in;
  }






  
  public MarkdownTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }






  
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[65536];
    int i = 0;
    int j = 0;
    label10: while (i < 186) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++); while (true)
      { map[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return map;
  }




  
  public final void yyclose() throws IOException {
    this.zzAtEOF = true;
    this.zzEndRead = this.zzStartRead;
    
    if (this.zzReader != null) {
      this.zzReader.close();
    }
  }



  
  public final int yystate() {
    return this.zzLexicalState;
  }






  
  public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }




  
  public final String yytext() {
    return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
  }












  
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead + pos];
  }




  
  public final int yylength() {
    return this.zzMarkedPos - this.zzStartRead;
  }















  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[0];
    } 
    
    throw new Error(message);
  }









  
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(2);
    }
    this.zzMarkedPos -= number;
  }














  
  public Token yylex() throws IOException {
    int zzEndReadL = this.zzEndRead;
    char[] zzBufferL = this.zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE; while (true) {
      int zzInput, m, k, j;
      boolean firstOnLine;
      int i, length, count, rBracket, zzMarkedPosL = this.zzMarkedPos;
      
      int zzAction = -1;
      
      int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
      
      this.zzState = this.zzLexicalState;



      
      while (true) {
        if (zzCurrentPosL < zzEndReadL)
        { zzInput = zzBufferL[zzCurrentPosL++]; }
        else { if (this.zzAtEOF) {
            int n = -1;
            
            break;
          } 
          
          this.zzCurrentPos = zzCurrentPosL;
          this.zzMarkedPos = zzMarkedPosL;
          boolean eof = zzRefill();
          
          zzCurrentPosL = this.zzCurrentPos;
          zzMarkedPosL = this.zzMarkedPos;
          zzBufferL = this.zzBuffer;
          zzEndReadL = this.zzEndRead;
          if (eof) {
            int n = -1;
            
            break;
          } 
          zzInput = zzBufferL[zzCurrentPosL++]; }

        
        int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)
          break;  this.zzState = zzNext;
        
        int zzAttributes = zzAttrL[this.zzState];
        if ((zzAttributes & 0x1) == 1) {
          zzAction = this.zzState;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 0x8) == 8) {
            break;
          }
        } 
      } 

      
      this.zzMarkedPos = zzMarkedPosL;
      
      switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
        case 2:
          addToken(20);
          continue;
        case 44:
          continue;
        case 12:
          if (TokenUtils.isBlankOrAllWhiteSpace((Token)this.firstToken)) {
            addToken(1);
            
            continue;
          } 
          m = yylength();
          addToken(this.zzStartRead, this.zzStartRead, 20);
          this.zzMarkedPos -= m - 1;
          continue;
        case 45:
          continue;
        case 27:
          this.start = this.zzMarkedPos - 2; yybegin(7); continue;
        case 46:
          continue;
        case 38:
          addToken(this.start, this.zzStartRead + 2, 8); yybegin(0); continue;
        case 47:
          continue;
        case 17:
          yybegin(0); addToken(25); continue;
        case 48:
          continue;
        case 11:
          this.start = this.zzMarkedPos - 1; yybegin(12); continue;
        case 49:
          continue;
        case 30:
          addToken(this.start, this.zzStartRead + 1, 7); yybegin(0);
          continue;
        case 50:
          continue;
        case 28:
          if (TokenUtils.isBlankOrAllWhiteSpace((Token)this.firstToken)) {
            this.start = this.zzStartRead;
            addToken(this.start, this.start, 10);
            addToken(this.start + 1, this.start + 1, 21);
            
            continue;
          } 
          this.start = this.zzStartRead;
          addToken(this.start, this.start, 20);
          addToken(this.start + 1, this.start + 1, 21);
          continue;
        case 51:
          continue;
        case 20:
          yypushback(1); yybegin(1); continue;
        case 52:
          continue;
        case 43:
          addToken(23); continue;
        case 53:
          continue;
        case 4:
          addToken(25); yybegin(1); continue;
        case 54:
          continue;
        case 8:
          this.start = this.zzMarkedPos - 1; yybegin(10); continue;
        case 55:
          continue;
        case 42:
          addToken(23); continue;
        case 56:
          continue;
        case 24:
          addToken(this.start, this.zzStartRead, 24); yybegin(0); continue;
        case 57:
          continue;
        case 25:
          m = yylength();
          addToken(this.zzStartRead, this.zzStartRead, 25);
          this.zzMarkedPos -= m - 1;
          yybegin(2);
          continue;
        case 58:
          continue;
        case 33:
          if (TokenUtils.isBlankOrAllWhiteSpace((Token)this.firstToken)) {
            this.start = this.zzStartRead;
            int n = yylength();
            addToken(this.start, this.start + n - 3, 10);
            addToken(this.start + n - 2, this.start + n - 2, 20);
            addToken(this.start + n - 1, this.start + n - 1, 21);
            
            continue;
          } 
          this.start = this.zzStartRead;
          k = yylength();
          addToken(this.start, this.start + k - 2, 20);
          addToken(this.start + k - 1, this.start + k - 1, 21);
          continue;
        case 59:
          continue;
        case 9:
          this.start = this.zzMarkedPos - 1; yybegin(9); continue;
        case 60:
          continue;
        case 22:
          yybegin(1); addToken(this.start, this.zzStartRead, 28); continue;
        case 61:
          continue;
        case 14:
          this.start = this.zzMarkedPos - 1; yybegin(3);
          continue;
        case 62:
          continue;
        case 7:
          if (getNoTokensIdentifiedYet()) {
            addToken(6);
            
            continue;
          } 
          j = yylength();
          addToken(this.zzStartRead, this.zzStartRead + 1, 20);
          this.zzMarkedPos -= j - 1;
          continue;
        case 63:
          continue;
        case 37:
          this.start = this.zzMarkedPos - 3; yybegin(13); continue;
        case 64:
          continue;
        case 34:
          this.start = this.zzMarkedPos - 3; yybegin(6);
          continue;
        case 65:
          continue;
        case 36:
          firstOnLine = getNoTokensIdentifiedYet();
          this.start = this.zzStartRead;
          if (firstOnLine) {
            if (yylength() == 3) {
              addToken(3);
              
              continue;
            } 
            addToken(this.start, this.start + 2, 20);
            this.zzMarkedPos = this.start + 3;
            
            continue;
          } 
          
          addToken(this.start, this.start + 2, 20);
          this.zzMarkedPos = this.start + 3;
          continue;
        case 66:
          continue;
        case 19:
          yypushback(yylength()); yybegin(1); continue;
        case 67:
          continue;
        case 5:
          addToken(21); continue;
        case 68:
          continue;
        case 21:
          addToken(26); continue;
        case 69:
          continue;
        case 35:
          this.start = this.zzMarkedPos - 3; yybegin(5); continue;
        case 70:
          continue;
        case 23:
          addToken(this.start, this.zzStartRead, 16); yybegin(0); continue;
        case 71:
          continue;
        case 16:
          this.start = this.zzMarkedPos - 1; yybegin(4); continue;
        case 72:
          continue;
        case 13:
          addToken(27); continue;
        case 73:
          continue;
        case 6:
          addToken(34);
          continue;
        case 74:
          continue;
        case 41:
          this.start = this.zzStartRead;
          i = yylength();
          rBracket = yytext().indexOf(']');
          addToken(this.start, this.start + rBracket, 18);
          addToken(this.start + rBracket + 1, this.start + i - 1, 19); continue;
        case 75:
          continue;
        case 39:
          addToken(this.start, this.zzStartRead + 2, 24); yybegin(0); continue;
        case 76:
          continue;
        case 31:
          addToken(this.start, this.zzStartRead + 1, 23); yybegin(0);
          continue;
        case 77:
          continue;
        case 40:
          this.start = this.zzStartRead;
          length = yylength();
          addToken(this.start, this.start + 2, 24);
          addToken(this.start + 3, this.start + length - 1, 17);
          this.start = this.zzMarkedPos;
          yybegin(13); continue;
        case 78:
          continue;
        case 32:
          count = yylength();
          addToken(this.zzStartRead, this.zzStartRead + 1, 25);
          this.zzMarkedPos -= count - 2;
          yybegin(2); continue;
        case 79:
          continue;
        case 3:
          addNullToken(); return (Token)this.firstToken;
        case 80:
          continue;
        case 10:
          addToken(23); continue;
        case 81:
          continue;
        case 29:
          this.start = this.zzMarkedPos - 2; yybegin(11); continue;
        case 82:
          continue;
        case 18:
          addToken(23); continue;
        case 83:
          continue;
        case 26:
          this.start = this.zzMarkedPos - 2; yybegin(8); continue;
        case 84:
          continue;
        case 15:
          addToken(25);
          continue;
        
        case 85:
        case 1:
        case 86:
          continue;
      } 
      if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
        this.zzAtEOF = true;
        switch (this.zzLexicalState) {
          case 12:
            addToken(this.start, this.zzStartRead - 1, 24); addEndToken(-10); return (Token)this.firstToken;
          case 343:
            continue;
          case 2:
            addToken(this.zzMarkedPos, this.zzMarkedPos, -3); return (Token)this.firstToken;
          case 344:
            continue;
          case 11:
            addToken(this.start, this.zzStartRead - 1, 23); addEndToken(-12); return (Token)this.firstToken;
          case 345:
            continue;
          case 6:
            addToken(this.start, this.zzStartRead - 1, 8); addEndToken(-5); return (Token)this.firstToken;
          case 346:
            continue;
          case 5:
            addToken(this.start, this.zzStartRead - 1, 8); addEndToken(-4); return (Token)this.firstToken;
          case 347:
            continue;
          case 10:
            addToken(this.start, this.zzStartRead - 1, 16); addEndToken(-9); return (Token)this.firstToken;
          case 348:
            continue;
          case 9:
            addToken(this.start, this.zzStartRead - 1, 16); addEndToken(-8); return (Token)this.firstToken;
          case 349:
            continue;
          case 8:
            addToken(this.start, this.zzStartRead - 1, 7); addEndToken(-7); return (Token)this.firstToken;
          case 350:
            continue;
          case 7:
            addToken(this.start, this.zzStartRead - 1, 7); addEndToken(-6); return (Token)this.firstToken;
          case 351:
            continue;
          case 13:
            addToken(this.start, this.zzStartRead - 1, 24); addEndToken(-11); return (Token)this.firstToken;
          case 352:
            continue;
          case 4:
            addToken(this.start, this.zzStartRead - 1, 28); addEndToken(-2); return (Token)this.firstToken;
          case 353:
            continue;
          case 3:
            addToken(this.start, this.zzStartRead - 1, 28); addEndToken(-1); return (Token)this.firstToken;
          case 354:
            continue;
          case 0:
            addNullToken(); return (Token)this.firstToken;
          case 355:
            continue;
          case 1:
            addToken(this.zzMarkedPos, this.zzMarkedPos, -3); return (Token)this.firstToken;
          case 356:
            continue;
        } 
        return null;
      } 

      
      zzScanError(1);
    } 
  }
}
