package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;




































































public class LuaTokenMaker
  extends AbstractJFlexTokenMaker
{
  public static final int YYEOF = -1;
  private static final int ZZ_BUFFERSIZE = 16384;
  public static final int YYINITIAL = 0;
  public static final int LONGSTRING = 2;
  public static final int LINECOMMENT = 3;
  public static final int MLC = 1;
  private static final String ZZ_CMAP_PACKED = "\t\000\001\004\001\003\001\000\001\004\023\000\001\004\001\000\001\007\001\027\001\000\001\027\001\000\001\005\002\026\001\027\001\r\001\000\001\n\001\013\001\027\n\002\002\000\001\030\001\032\001\031\002\000\004\001\001\f\001\001\001,\001\001\0010\002\001\001*\001\001\001(\0011\002\001\001.\001/\001\001\001)\001-\004\001\001\b\001\006\001\t\001\027\001+\001\000\001\023\001\037\001\"\001\035\001\021\001\022\001#\001%\001!\001\001\001 \001\024\001'\001\034\001\036\001$\0014\001\017\001\025\001\016\001\020\0012\001&\0013\0015\001\001\001\026\001\000\001\026\001\033ﾁ\000";
  private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001\004\001\003\001\000\001\004\023\000\001\004\001\000\001\007\001\027\001\000\001\027\001\000\001\005\002\026\001\027\001\r\001\000\001\n\001\013\001\027\n\002\002\000\001\030\001\032\001\031\002\000\004\001\001\f\001\001\001,\001\001\0010\002\001\001*\001\001\001(\0011\002\001\001.\001/\001\001\001)\001-\004\001\001\b\001\006\001\t\001\027\001+\001\000\001\023\001\037\001\"\001\035\001\021\001\022\001#\001%\001!\001\001\001 \001\024\001'\001\034\001\036\001$\0014\001\017\001\025\001\016\001\020\0012\001&\0013\0015\001\001\001\026\001\000\001\026\001\033ﾁ\000");



  
  private static final int[] ZZ_ACTION = zzUnpackAction();




  
  private static final String ZZ_ACTION_PACKED_0 = "\004\000\002\001\001\002\001\003\001\004\001\005\001\006\002\007\001\b\001\001\001\b\b\001\002\b\016\001\001\t\001\n\001\t\001\013\002\t\001\f\002\002\001\r\001\005\001\006\001\016\001\017\001\020\001\b\021\001\003\000\003\001\001\021\001\b\001\001\001\021\n\001\001\022\002\001\001\023\001\024\001\r\001\016\001\000\024\001\004\000\f\001\001\025\001\026\t\001\001\021\002\001\001\022\003\001\004\000\006\001\001\027\013\001\001\027\002\000\b\001\002\000\r\001";




  
  private static int[] zzUnpackAction() {
    int[] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction("\004\000\002\001\001\002\001\003\001\004\001\005\001\006\002\007\001\b\001\001\001\b\b\001\002\b\016\001\001\t\001\n\001\t\001\013\002\t\001\f\002\002\001\r\001\005\001\006\001\016\001\017\001\020\001\b\021\001\003\000\003\001\001\021\001\b\001\001\001\021\n\001\001\022\002\001\001\023\001\024\001\r\001\016\001\000\024\001\004\000\f\001\001\025\001\026\t\001\001\021\002\001\001\022\003\001\004\000\006\001\001\027\013\001\001\027\002\000\b\001\002\000\r\001", offset, result);
    return result;
  }
  
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }




  
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();













  
  private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\0006\000l\000¢\000Ø\000Ď\000ń\000Ø\000ź\000ư\000Ǧ\000Ȝ\000Ø\000ɒ\000ʈ\000Ø\000ʾ\000˴\000̪\000͠\000Ζ\000ό\000Ђ\000и\000Ѯ\000Ҥ\000Ҥ\000Ӛ\000Ԑ\000Ն\000ռ\000ֲ\000ר\000؞\000ٔ\000ڊ\000ۀ\000۶\000ܬ\000ݢ\000ޘ\000Ø\000ߎ\000Ø\000ࠄ\000࠺\000Ø\000ࡰ\000ࢦ\000Ø\000ࣜ\000ऒ\000Ø\000Ø\000ै\000ॾ\000঴\000৪\000ਠ\000੖\000ઌ\000ૂ\000૸\000ମ\000୤\000ச\000ௐ\000ఆ\000఼\000౲\000ನ\000ೞ\000ഔ\000ൊ\000඀\000බ\000෬\000ย\000๘\000ຎ\000Ď\000ໄ\000Ď\000໺\000༰\000ས\000ྜ\000࿒\000ဈ\000ှ\000ၴ\000Ⴊ\000რ\000Ď\000ᄖ\000ᅌ\000Ø\000Ø\000ư\000Ǧ\000ᆂ\000ᆸ\000ᇮ\000ሤ\000ቚ\000ነ\000዆\000ዼ\000ጲ\000፨\000᎞\000Ꮤ\000ᐊ\000ᑀ\000ᑶ\000ᒬ\000ᓢ\000ᔘ\000ᕎ\000ᖄ\000ᖺ\000ᗰ\000ᘦ\000ᙜ\000ᚒ\000ᛈ\000᛾\000᜴\000ᝪ\000ហ\000៖\000᠌\000ᡂ\000ᡸ\000᢮\000ᣤ\000ᤚ\000Ø\000Ď\000ᥐ\000ᦆ\000ᦼ\000᧲\000ᨨ\000ᩞ\000᪔\000᫊\000ᬀ\000ᬶ\000᭬\000ᮢ\000ᯘ\000ᰎ\000᱄\000ᱺ\000Ჰ\000᳦\000ᴜ\000ᵒ\000ᶈ\000ᶾ\000ᷴ\000Ḫ\000Ṡ\000ẖ\000Ď\000Ọ\000ἂ\000Ἰ\000Ὦ\000ᾤ\000Ὶ\000‐\000⁆\000⁼\000₲\000⃨\000Ø\000℞\000⅔\000↊\000⇀\000⇶\000∬\000≢\000⊘\000⋎\000⌄\000⌺\000⍰\000⎦\000⏜\000␒\000⑈\000⑾\000⒴\000⓪\000┠\000╖\000▌\000◂\000◸\000☮";













  
  private static int[] zzUnpackRowMap() {
    int[] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap("\000\000\0006\000l\000¢\000Ø\000Ď\000ń\000Ø\000ź\000ư\000Ǧ\000Ȝ\000Ø\000ɒ\000ʈ\000Ø\000ʾ\000˴\000̪\000͠\000Ζ\000ό\000Ђ\000и\000Ѯ\000Ҥ\000Ҥ\000Ӛ\000Ԑ\000Ն\000ռ\000ֲ\000ר\000؞\000ٔ\000ڊ\000ۀ\000۶\000ܬ\000ݢ\000ޘ\000Ø\000ߎ\000Ø\000ࠄ\000࠺\000Ø\000ࡰ\000ࢦ\000Ø\000ࣜ\000ऒ\000Ø\000Ø\000ै\000ॾ\000঴\000৪\000ਠ\000੖\000ઌ\000ૂ\000૸\000ମ\000୤\000ச\000ௐ\000ఆ\000఼\000౲\000ನ\000ೞ\000ഔ\000ൊ\000඀\000බ\000෬\000ย\000๘\000ຎ\000Ď\000ໄ\000Ď\000໺\000༰\000ས\000ྜ\000࿒\000ဈ\000ှ\000ၴ\000Ⴊ\000რ\000Ď\000ᄖ\000ᅌ\000Ø\000Ø\000ư\000Ǧ\000ᆂ\000ᆸ\000ᇮ\000ሤ\000ቚ\000ነ\000዆\000ዼ\000ጲ\000፨\000᎞\000Ꮤ\000ᐊ\000ᑀ\000ᑶ\000ᒬ\000ᓢ\000ᔘ\000ᕎ\000ᖄ\000ᖺ\000ᗰ\000ᘦ\000ᙜ\000ᚒ\000ᛈ\000᛾\000᜴\000ᝪ\000ហ\000៖\000᠌\000ᡂ\000ᡸ\000᢮\000ᣤ\000ᤚ\000Ø\000Ď\000ᥐ\000ᦆ\000ᦼ\000᧲\000ᨨ\000ᩞ\000᪔\000᫊\000ᬀ\000ᬶ\000᭬\000ᮢ\000ᯘ\000ᰎ\000᱄\000ᱺ\000Ჰ\000᳦\000ᴜ\000ᵒ\000ᶈ\000ᶾ\000ᷴ\000Ḫ\000Ṡ\000ẖ\000Ď\000Ọ\000ἂ\000Ἰ\000Ὦ\000ᾤ\000Ὶ\000‐\000⁆\000⁼\000₲\000⃨\000Ø\000℞\000⅔\000↊\000⇀\000⇶\000∬\000≢\000⊘\000⋎\000⌄\000⌺\000⍰\000⎦\000⏜\000␒\000⑈\000⑾\000⒴\000⓪\000┠\000╖\000▌\000◂\000◸\000☮", offset, result);
    return result;
  }
  
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    } 
    return j;
  }



  
  private static final int[] ZZ_TRANS = zzUnpackTrans();








































  
  private static final String ZZ_TRANS_PACKED_0 = "\001\005\001\006\001\007\001\b\001\t\001\n\001\005\001\013\001\f\001\r\001\016\001\017\001\006\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\r\001\020\001\031\001\032\002\033\001\034\001\035\001\036\001\037\001\006\001 \001!\001\"\001#\001\006\001$\001%\001&\002\006\001'\007\006\001(\002\006\003)\001*\005)\001+/)\001,\005)\001-,)\003.\001/2.7\000\002\006\t\000\001\006\001\000\b\006\006\000\032\006\001\000\0010\001\007\b\000\001\007\0011\001\000\0030\0011\0040\006\000\0320\004\000\001\t1\000\003\n\001\000\001\n\0012\0013/\n\003\013\001\000\002\013\0014\0015.\013\b\000\00167\000\0017-\000\001\007\b\000\0018+\000\002\006\t\000\001\006\001\000\001\006\0019\006\006\006\000\002\006\001:\006\006\001;\017\006\001<\001\000\002\006\t\000\001\006\001\000\003\006\001=\001\006\001>\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001?\031\006\001\000\002\006\t\000\001\006\001\000\001\006\001@\004\006\001A\001\006\006\000\001B\031\006\001\000\002\006\t\000\001\006\001\000\002\006\001C\002\006\001D\002\006\006\000\002\006\001E\027\006\001\000\002\006\t\000\001\006\001\000\007\006\001F\006\000\001G\031\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001H\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001I\004\006\006\000\032\006\021\000\001J\003\000\001K\004\000\001\020\001\000\001L3\000\001\020\034\000\002\006\t\000\001\006\001\000\003\006\001M\004\006\006\000\002\006\001N\002\006\001O\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001P\027\006\001\000\002\006\t\000\001\006\001\000\001\006\001Q\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001R\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001S\003\006\006\000\001S\007\006\001T\021\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001U\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001V\004\006\006\000\002\006\001W\027\006\001\000\002\006\t\000\001\006\001\000\001\006\001X\003\006\001Y\002\006\006\000\006\006\001Z\023\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\t\006\001[\020\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001\\\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\r\006\001]\f\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\020\006\001^\001_\b\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\b\006\001`\021\006\003)\001\000\005)\001\000,)\t\000\001a5\000\001b,\000\003.\001\0002.\001\000\0020\t\000\0010\001\000\b0\006\000\0320\001\000\0020\007\000\0010\001\000\n0\006\000\0320\003\n\001\000\001\n\001c\0013/\n\003\013\001\000\002\013\0014\001d.\013\b\000\001e8\000\001\020+\000\002\006\t\000\001\006\001\000\002\006\001f\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001g\006\000\001h\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001i\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\b\006\001j\021\006\001\000\002\006\t\000\001\006\001\000\001k\007\006\006\000\b\006\001l\017\006\001m\001\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\n\006\001n\017\006\001\000\002\006\t\000\001\006\001\000\001o\007\006\006\000\b\006\001p\021\006\001\000\002\006\t\000\001\006\001\000\001\006\001q\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001r\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001S\030\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001s\031\006\001\000\002\006\t\000\001\006\001\000\006\006\001t\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001S\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001u\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001Q\030\006\001\000\002\006\t\000\001\006\001\000\005\006\001v\002\006\006\000\006\006\001w\023\006\001\000\002\006\t\000\001\006\001\000\001x\005\006\001y\001\006\006\000\032\006\036\000\001z%\000\001{7\000\001|\002\000\001}#\000\002\006\t\000\001\006\001\000\b\006\006\000\027\006\001~\002\006\001\000\002\006\t\000\001\006\001\000\001Q\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001S\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\003\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001Y\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001x\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\005\006\001\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001\030\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\016\006\001\013\006\001\000\002\006\t\000\001\001\000\b\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001Z\023\006\b\000\001.\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001S\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001^\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\003\006\001\006\000\007\006\001\022\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001O\024\006\001\000\002\006\t\000\001\006\001\000\005\006\001\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001\023\006\001\000\002\006\t\000\001\006\001\000\007\006\001f\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001\030\006\001\000\002\006\t\000\001\006\001\000\005\006\001O\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\003\006\006\000\013\006\001\016\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\022\000\0012\000\001M\000\0015\000\001\017\000\002\006\t\000\001\006\001\000\001^\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001 \024\006\001\000\002\006\t\000\001\006\001\000\005\006\001¡\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¢\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001S\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001~\031\006\001\000\002\006\t\000\001\006\001\000\001\006\001£\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¤\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¥\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001 \005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\016\006\001¦\013\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\022\006\001§\007\006\001\000\002\006\t\000\001\006\001\000\001\006\001¨\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\013\006\001©\016\006\001\000\002\006\t\000\001\006\001\000\001\006\001i\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001ª\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001«\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\030\006\001¬\001\006\001\000\002\006\t\000\001\006\001\000\003\006\001~\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001­\023\006\001\000\002\006\t\000\001\006\001\000\001\006\001^\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001®\024\006\001\000\002\006\t\000\001\006\001\000\001¯\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001~\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\002\006\001g\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001°\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001±\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001~\023\006\031\000\001²=\000\001³3\000\001´'\000\001%\000\002\006\t\000\001\006\001\000\006\006\001j\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\004\006\001S\025\006\001\000\002\006\t\000\001\006\001\000\003\006\001µ\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001^\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001^\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001S\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\023\006\001¶\006\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001·\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001¸\026\006\001\000\002\006\t\000\001\006\001\000\001S\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001j\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001¹\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\004\006\001^\025\006\001\000\002\006\t\000\001\006\001\000\004\006\001S\003\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001º\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001»\031\006\001\000\002\006\t\000\001\006\001\000\001¼\007\006\006\000\032\006\034\000\001½*\000\001¾%\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001¿\023\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\024\006\001À\005\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001Á\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001¤\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001i\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\026\006\001^\003\006\001\000\002\006\t\000\001\006\001\000\005\006\001Â\002\006\006\000\032\006#\000\001!\000\001'\000\002\006\t\000\001\006\001\000\001Ã\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\025\006\001Ä\004\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001^\022\006\001\000\002\006\t\000\001\006\001\000\001Å\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001Æ\022\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\f\006\001^\r\006\001\000\002\006\t\000\001\006\001\000\005\006\001Ç\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001È\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001 \026\006\001\000\002\006\t\000\001\006\001\000\001\006\001É\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001Ê\026\006\001\000\002\006\t\000\001\006\001\000\005\006\001Ë\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001j\022\006";







































  
  private static final int ZZ_UNKNOWN_ERROR = 0;







































  
  private static final int ZZ_NO_MATCH = 1;







































  
  private static final int ZZ_PUSHBACK_2BIG = 2;








































  
  private static int[] zzUnpackTrans() {
    int[] result = new int[9828];
    int offset = 0;
    offset = zzUnpackTrans("\001\005\001\006\001\007\001\b\001\t\001\n\001\005\001\013\001\f\001\r\001\016\001\017\001\006\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\r\001\020\001\031\001\032\002\033\001\034\001\035\001\036\001\037\001\006\001 \001!\001\"\001#\001\006\001$\001%\001&\002\006\001'\007\006\001(\002\006\003)\001*\005)\001+/)\001,\005)\001-,)\003.\001/2.7\000\002\006\t\000\001\006\001\000\b\006\006\000\032\006\001\000\0010\001\007\b\000\001\007\0011\001\000\0030\0011\0040\006\000\0320\004\000\001\t1\000\003\n\001\000\001\n\0012\0013/\n\003\013\001\000\002\013\0014\0015.\013\b\000\00167\000\0017-\000\001\007\b\000\0018+\000\002\006\t\000\001\006\001\000\001\006\0019\006\006\006\000\002\006\001:\006\006\001;\017\006\001<\001\000\002\006\t\000\001\006\001\000\003\006\001=\001\006\001>\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001?\031\006\001\000\002\006\t\000\001\006\001\000\001\006\001@\004\006\001A\001\006\006\000\001B\031\006\001\000\002\006\t\000\001\006\001\000\002\006\001C\002\006\001D\002\006\006\000\002\006\001E\027\006\001\000\002\006\t\000\001\006\001\000\007\006\001F\006\000\001G\031\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001H\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001I\004\006\006\000\032\006\021\000\001J\003\000\001K\004\000\001\020\001\000\001L3\000\001\020\034\000\002\006\t\000\001\006\001\000\003\006\001M\004\006\006\000\002\006\001N\002\006\001O\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001P\027\006\001\000\002\006\t\000\001\006\001\000\001\006\001Q\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001R\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001S\003\006\006\000\001S\007\006\001T\021\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001U\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001V\004\006\006\000\002\006\001W\027\006\001\000\002\006\t\000\001\006\001\000\001\006\001X\003\006\001Y\002\006\006\000\006\006\001Z\023\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\t\006\001[\020\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001\\\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\r\006\001]\f\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\020\006\001^\001_\b\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\b\006\001`\021\006\003)\001\000\005)\001\000,)\t\000\001a5\000\001b,\000\003.\001\0002.\001\000\0020\t\000\0010\001\000\b0\006\000\0320\001\000\0020\007\000\0010\001\000\n0\006\000\0320\003\n\001\000\001\n\001c\0013/\n\003\013\001\000\002\013\0014\001d.\013\b\000\001e8\000\001\020+\000\002\006\t\000\001\006\001\000\002\006\001f\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001g\006\000\001h\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001i\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\b\006\001j\021\006\001\000\002\006\t\000\001\006\001\000\001k\007\006\006\000\b\006\001l\017\006\001m\001\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\n\006\001n\017\006\001\000\002\006\t\000\001\006\001\000\001o\007\006\006\000\b\006\001p\021\006\001\000\002\006\t\000\001\006\001\000\001\006\001q\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001r\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001S\030\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001s\031\006\001\000\002\006\t\000\001\006\001\000\006\006\001t\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001S\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001u\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001Q\030\006\001\000\002\006\t\000\001\006\001\000\005\006\001v\002\006\006\000\006\006\001w\023\006\001\000\002\006\t\000\001\006\001\000\001x\005\006\001y\001\006\006\000\032\006\036\000\001z%\000\001{7\000\001|\002\000\001}#\000\002\006\t\000\001\006\001\000\b\006\006\000\027\006\001~\002\006\001\000\002\006\t\000\001\006\001\000\001Q\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001S\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\003\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001Y\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001x\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\005\006\001\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001\030\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\016\006\001\013\006\001\000\002\006\t\000\001\001\000\b\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001Z\023\006\b\000\001.\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001S\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001^\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\003\006\001\006\000\007\006\001\022\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001O\024\006\001\000\002\006\t\000\001\006\001\000\005\006\001\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001\027\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001\023\006\001\000\002\006\t\000\001\006\001\000\007\006\001f\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001\006\001\030\006\001\000\002\006\t\000\001\006\001\000\005\006\001O\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\003\006\006\000\013\006\001\016\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\022\000\0012\000\001M\000\0015\000\001\017\000\002\006\t\000\001\006\001\000\001^\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001 \024\006\001\000\002\006\t\000\001\006\001\000\005\006\001¡\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¢\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001S\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001~\031\006\001\000\002\006\t\000\001\006\001\000\001\006\001£\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¤\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001¥\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001 \005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\016\006\001¦\013\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\022\006\001§\007\006\001\000\002\006\t\000\001\006\001\000\001\006\001¨\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\013\006\001©\016\006\001\000\002\006\t\000\001\006\001\000\001\006\001i\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001ª\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001«\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\030\006\001¬\001\006\001\000\002\006\t\000\001\006\001\000\003\006\001~\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001­\023\006\001\000\002\006\t\000\001\006\001\000\001\006\001^\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001®\024\006\001\000\002\006\t\000\001\006\001\000\001¯\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001~\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\004\006\001\002\006\001g\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001°\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001±\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001~\023\006\031\000\001²=\000\001³3\000\001´'\000\001%\000\002\006\t\000\001\006\001\000\006\006\001j\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\004\006\001S\025\006\001\000\002\006\t\000\001\006\001\000\003\006\001µ\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\007\006\001^\006\000\032\006\001\000\002\006\t\000\001\006\001\000\006\006\001^\001\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\003\006\001S\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\023\006\001¶\006\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001·\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001¸\026\006\001\000\002\006\t\000\001\006\001\000\001S\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\001\006\001j\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\002\006\001¹\005\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\004\006\001^\025\006\001\000\002\006\t\000\001\006\001\000\004\006\001S\003\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\005\006\001º\024\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001»\031\006\001\000\002\006\t\000\001\006\001\000\001¼\007\006\006\000\032\006\034\000\001½*\000\001¾%\000\002\006\t\000\001\006\001\000\b\006\006\000\006\006\001¿\023\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\024\006\001À\005\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\001Á\031\006\001\000\002\006\t\000\001\006\001\000\003\006\001\004\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001¤\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\002\006\001i\027\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\026\006\001^\003\006\001\000\002\006\t\000\001\006\001\000\005\006\001Â\002\006\006\000\032\006#\000\001!\000\001'\000\002\006\t\000\001\006\001\000\001Ã\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\025\006\001Ä\004\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001^\022\006\001\000\002\006\t\000\001\006\001\000\001Å\007\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001Æ\022\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\f\006\001^\r\006\001\000\002\006\t\000\001\006\001\000\005\006\001Ç\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\005\006\001È\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001 \026\006\001\000\002\006\t\000\001\006\001\000\001\006\001É\006\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\003\006\001Ê\026\006\001\000\002\006\t\000\001\006\001\000\005\006\001Ë\002\006\006\000\032\006\001\000\002\006\t\000\001\006\001\000\b\006\006\000\007\006\001j\022\006", offset, result);
    return result;
  }
  
  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--; while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };







  
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  
  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\004\000\001\t\002\001\001\t\004\001\001\t\002\001\001\t\031\001\001\t\001\001\001\t\002\001\001\t\002\001\001\t\002\001\002\t\023\001\003\000\024\001\002\t\002\001\001\000\024\001\004\000\f\001\001\t\021\001\004\000\022\001\001\t\002\000\b\001\002\000\r\001";
  
  private Reader zzReader;
  
  private int zzState;

  
  private static int[] zzUnpackAttribute() {
    int[] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute("\004\000\001\t\002\001\001\t\004\001\001\t\002\001\001\t\031\001\001\t\001\001\001\t\002\001\001\t\002\001\001\t\002\001\002\t\023\001\003\000\024\001\002\t\002\001\001\000\024\001\004\000\f\001\001\t\021\001\004\000\022\001\001\t\002\000\b\001\002\000\r\001", offset, result);
    return result;
  }
  
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;
    int j = offset;
    int l = packed.length();
    label10: while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++); while (true)
      { result[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return j;
  }







  
  private int zzLexicalState = 0;



  
  private char[] zzBuffer;



  
  private int zzMarkedPos;



  
  private int zzCurrentPos;



  
  private int zzStartRead;


  
  private int zzEndRead;


  
  private boolean zzAtEOF;



  
  public LuaTokenMaker() {}



  
  private void addToken(int tokenType) {
    addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
  }






  
  private void addToken(int start, int end, int tokenType) {
    int so = start + this.offsetShift;
    addToken(this.zzBuffer, start, end, tokenType, so);
  }












  
  public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
    super.addToken(array, start, end, tokenType, startOffset);
    this.zzStartRead = this.zzMarkedPos;
  }





  
  public String[] getLineCommentStartAndEnd(int languageIndex) {
    return new String[] { "--", null };
  }














  
  public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
    resetTokenList();
    this.offsetShift = -text.offset + startOffset;

    
    int state = 0;
    switch (initialTokenType) {
      case 2:
        state = 1;
        this.start = text.offset;
        break;
      case 13:
        state = 2;
        this.start = text.offset;
        break;
      default:
        state = 0;
        break;
    } 
    this.s = text;
    try {
      yyreset(this.zzReader);
      yybegin(state);
      return yylex();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      return (Token)new TokenImpl();
    } 
  }








  
  private boolean zzRefill() {
    return (this.zzCurrentPos >= this.s.offset + this.s.count);
  }












  
  public final void yyreset(Reader reader) {
    this.zzBuffer = this.s.array;






    
    this.zzStartRead = this.s.offset;
    this.zzEndRead = this.zzStartRead + this.s.count - 1;
    this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
    this.zzLexicalState = 0;
    this.zzReader = reader;
    this.zzAtEOF = false;
  }









  
  public LuaTokenMaker(Reader in) {
    this.zzReader = in;
  }






  
  public LuaTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }






  
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[65536];
    int i = 0;
    int j = 0;
    label10: while (i < 164) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++); while (true)
      { map[j++] = value; if (--count <= 0)
          continue label10;  } 
    }  return map;
  }




  
  public final void yyclose() throws IOException {
    this.zzAtEOF = true;
    this.zzEndRead = this.zzStartRead;
    
    if (this.zzReader != null) {
      this.zzReader.close();
    }
  }



  
  public final int yystate() {
    return this.zzLexicalState;
  }






  
  public final void yybegin(int newState) {
    this.zzLexicalState = newState;
  }




  
  public final String yytext() {
    return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
  }












  
  public final char yycharat(int pos) {
    return this.zzBuffer[this.zzStartRead + pos];
  }




  
  public final int yylength() {
    return this.zzMarkedPos - this.zzStartRead;
  }















  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[0];
    } 
    
    throw new Error(message);
  }









  
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(2);
    }
    this.zzMarkedPos -= number;
  }














  
  public Token yylex() throws IOException {
    int zzEndReadL = this.zzEndRead;
    char[] zzBufferL = this.zzBuffer;
    char[] zzCMapL = ZZ_CMAP;
    
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    
    while (true) {
      int zzInput, zzMarkedPosL = this.zzMarkedPos;
      
      int zzAction = -1;
      
      int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
      
      this.zzState = this.zzLexicalState;



      
      while (true) {
        if (zzCurrentPosL < zzEndReadL)
        { zzInput = zzBufferL[zzCurrentPosL++]; }
        else { if (this.zzAtEOF) {
            int i = -1;
            
            break;
          } 
          
          this.zzCurrentPos = zzCurrentPosL;
          this.zzMarkedPos = zzMarkedPosL;
          boolean eof = zzRefill();
          
          zzCurrentPosL = this.zzCurrentPos;
          zzMarkedPosL = this.zzMarkedPos;
          zzBufferL = this.zzBuffer;
          zzEndReadL = this.zzEndRead;
          if (eof) {
            int i = -1;
            
            break;
          } 
          zzInput = zzBufferL[zzCurrentPosL++]; }

        
        int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)
          break;  this.zzState = zzNext;
        
        int zzAttributes = zzAttrL[this.zzState];
        if ((zzAttributes & 0x1) == 1) {
          zzAction = this.zzState;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 0x8) == 8) {
            break;
          }
        } 
      } 

      
      this.zzMarkedPos = zzMarkedPosL;
      
      switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
        case 3:
          addNullToken(); return (Token)this.firstToken;
        case 24:
          continue;
        case 13:
          addToken(14); continue;
        case 25:
          continue;
        case 15:
          this.start = this.zzMarkedPos - 2; yybegin(2); continue;
        case 26:
          continue;
        case 19:
          yybegin(0); addToken(this.start, this.zzStartRead + 1, 2); continue;
        case 27:
          continue;
        case 4:
          addToken(21); continue;
        case 28:
          continue;
        case 2:
          addToken(11); continue;
        case 29:
          continue;
        case 17:
          addToken(6); continue;
        case 30:
          continue;
        case 21:
          this.start = this.zzMarkedPos - 4; yybegin(1); continue;
        case 31:
          continue;
        case 7:
          addToken(22); continue;
        case 32:
          continue;
        case 1:
          addToken(20); continue;
        case 33:
          continue;
        case 18:
          addToken(8); continue;
        case 34:
          continue;
        case 5:
          addToken(38); addNullToken(); return (Token)this.firstToken;
        case 35:
          continue;
        case 6:
          addToken(37); addNullToken(); return (Token)this.firstToken;
        case 36:
          continue;
        case 23:
          addToken(16); continue;
        case 37:
          continue;
        case 22:
          addToken(9); continue;
        case 38:
          continue;
        case 20:
          yybegin(0); addToken(this.start, this.zzStartRead + 1, 13); continue;
        case 39:
          continue;
        case 14:
          addToken(13); continue;
        case 40:
          continue;
        case 11:
          addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
        case 41:
          continue;
        case 12:
          addToken(this.start, this.zzStartRead - 1, 1); return (Token)this.firstToken;
        case 42:
          continue;
        case 8:
          addToken(23); continue;
        case 43:
          continue;
        case 16:
          this.start = this.zzMarkedPos - 2; yybegin(3);
          continue;
        
        case 44:
        case 9:
        case 45:
          continue;
        case 10:
          addToken(this.start, this.zzStartRead - 1, 2); return (Token)this.firstToken;
        case 46:
          continue;
      } 
      if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
        this.zzAtEOF = true;
        switch (this.zzLexicalState) {
          case 0:
            addNullToken(); return (Token)this.firstToken;
          case 204:
            continue;
          case 2:
            addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
          case 205:
            continue;
          case 3:
            addToken(this.start, this.zzStartRead - 1, 1); return (Token)this.firstToken;
          case 206:
            continue;
          case 1:
            addToken(this.start, this.zzStartRead - 1, 2); return (Token)this.firstToken;
          case 207:
            continue;
        } 
        return null;
      } 

      
      zzScanError(1);
    } 
  }
}
