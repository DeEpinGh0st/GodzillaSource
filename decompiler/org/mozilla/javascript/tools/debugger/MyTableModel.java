package org.mozilla.javascript.tools.debugger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.table.AbstractTableModel;











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class MyTableModel
  extends AbstractTableModel
{
  private static final long serialVersionUID = 2971618907207577000L;
  private SwingGui debugGui;
  private List<String> expressions;
  private List<String> values;
  
  public MyTableModel(SwingGui debugGui) {
    this.debugGui = debugGui;
    this.expressions = Collections.synchronizedList(new ArrayList<String>());
    this.values = Collections.synchronizedList(new ArrayList<String>());
    this.expressions.add("");
    this.values.add("");
  }



  
  public int getColumnCount() {
    return 2;
  }



  
  public int getRowCount() {
    return this.expressions.size();
  }




  
  public String getColumnName(int column) {
    switch (column) {
      case 0:
        return "Expression";
      case 1:
        return "Value";
    } 
    return null;
  }




  
  public boolean isCellEditable(int row, int column) {
    return true;
  }



  
  public Object getValueAt(int row, int column) {
    switch (column) {
      case 0:
        return this.expressions.get(row);
      case 1:
        return this.values.get(row);
    } 
    return "";
  }


  
  public void setValueAt(Object value, int row, int column) {
    String expr;
    String result;
    switch (column) {
      case 0:
        expr = value.toString();
        this.expressions.set(row, expr);
        result = "";
        if (expr.length() > 0) {
          result = this.debugGui.dim.eval(expr);
          if (result == null) result = ""; 
        } 
        this.values.set(row, result);
        updateModel();
        if (row + 1 == this.expressions.size()) {
          this.expressions.add("");
          this.values.add("");
          fireTableRowsInserted(row + 1, row + 1);
        } 
        break;
      
      case 1:
        fireTableDataChanged();
        break;
    } 
  }


  
  void updateModel() {
    for (int i = 0; i < this.expressions.size(); i++) {
      String expr = this.expressions.get(i);
      String result = "";
      if (expr.length() > 0) {
        result = this.debugGui.dim.eval(expr);
        if (result == null) result = ""; 
      } else {
        result = "";
      } 
      result = result.replace('\n', ' ');
      this.values.set(i, result);
    } 
    fireTableDataChanged();
  }
}
