package org.mozilla.javascript.tools.debugger;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class Menubar
  extends JMenuBar
  implements ActionListener
{
  private static final long serialVersionUID = 3217170497245911461L;
  private List<JMenuItem> interruptOnlyItems = Collections.synchronizedList(new ArrayList<JMenuItem>());




  
  private List<JMenuItem> runOnlyItems = Collections.synchronizedList(new ArrayList<JMenuItem>());




  
  private SwingGui debugGui;



  
  private JMenu windowMenu;



  
  private JCheckBoxMenuItem breakOnExceptions;



  
  private JCheckBoxMenuItem breakOnEnter;



  
  private JCheckBoxMenuItem breakOnReturn;




  
  Menubar(SwingGui debugGui) {
    this.debugGui = debugGui;
    String[] fileItems = { "Open...", "Run...", "", "Exit" };
    String[] fileCmds = { "Open", "Load", "", "Exit" };
    char[] fileShortCuts = { '0', 'N', Character.MIN_VALUE, 'X' };
    int[] fileAccelerators = { 79, 78, 0, 81 };


    
    String[] editItems = { "Cut", "Copy", "Paste", "Go to function..." };
    char[] editShortCuts = { 'T', 'C', 'P', 'F' };
    String[] debugItems = { "Break", "Go", "Step Into", "Step Over", "Step Out" };
    char[] debugShortCuts = { 'B', 'G', 'I', 'O', 'T' };
    String[] plafItems = { "Metal", "Windows", "Motif" };
    char[] plafShortCuts = { 'M', 'W', 'F' };
    int[] debugAccelerators = { 19, 116, 122, 118, 119, 0, 0 };





    
    JMenu fileMenu = new JMenu("File");
    fileMenu.setMnemonic('F');
    JMenu editMenu = new JMenu("Edit");
    editMenu.setMnemonic('E');
    JMenu plafMenu = new JMenu("Platform");
    plafMenu.setMnemonic('P');
    JMenu debugMenu = new JMenu("Debug");
    debugMenu.setMnemonic('D');
    this.windowMenu = new JMenu("Window");
    this.windowMenu.setMnemonic('W'); int i;
    for (i = 0; i < fileItems.length; i++) {
      if (fileItems[i].length() == 0) {
        fileMenu.addSeparator();
      } else {
        JMenuItem jMenuItem = new JMenuItem(fileItems[i], fileShortCuts[i]);
        
        jMenuItem.setActionCommand(fileCmds[i]);
        jMenuItem.addActionListener(this);
        fileMenu.add(jMenuItem);
        if (fileAccelerators[i] != 0) {
          KeyStroke k = KeyStroke.getKeyStroke(fileAccelerators[i], 2);
          jMenuItem.setAccelerator(k);
        } 
      } 
    } 
    for (i = 0; i < editItems.length; i++) {
      JMenuItem jMenuItem = new JMenuItem(editItems[i], editShortCuts[i]);
      
      jMenuItem.addActionListener(this);
      editMenu.add(jMenuItem);
    } 
    for (i = 0; i < plafItems.length; i++) {
      JMenuItem jMenuItem = new JMenuItem(plafItems[i], plafShortCuts[i]);
      
      jMenuItem.addActionListener(this);
      plafMenu.add(jMenuItem);
    } 
    for (i = 0; i < debugItems.length; i++) {
      JMenuItem jMenuItem = new JMenuItem(debugItems[i], debugShortCuts[i]);
      
      jMenuItem.addActionListener(this);
      if (debugAccelerators[i] != 0) {
        KeyStroke k = KeyStroke.getKeyStroke(debugAccelerators[i], 0);
        jMenuItem.setAccelerator(k);
      } 
      if (i != 0) {
        this.interruptOnlyItems.add(jMenuItem);
      } else {
        this.runOnlyItems.add(jMenuItem);
      } 
      debugMenu.add(jMenuItem);
    } 
    this.breakOnExceptions = new JCheckBoxMenuItem("Break on Exceptions");
    this.breakOnExceptions.setMnemonic('X');
    this.breakOnExceptions.addActionListener(this);
    this.breakOnExceptions.setSelected(false);
    debugMenu.add(this.breakOnExceptions);
    
    this.breakOnEnter = new JCheckBoxMenuItem("Break on Function Enter");
    this.breakOnEnter.setMnemonic('E');
    this.breakOnEnter.addActionListener(this);
    this.breakOnEnter.setSelected(false);
    debugMenu.add(this.breakOnEnter);
    
    this.breakOnReturn = new JCheckBoxMenuItem("Break on Function Return");
    this.breakOnReturn.setMnemonic('R');
    this.breakOnReturn.addActionListener(this);
    this.breakOnReturn.setSelected(false);
    debugMenu.add(this.breakOnReturn);
    
    add(fileMenu);
    add(editMenu);
    
    add(debugMenu);
    JMenuItem item;
    this.windowMenu.add(item = new JMenuItem("Cascade", 65));
    item.addActionListener(this);
    this.windowMenu.add(item = new JMenuItem("Tile", 84));
    item.addActionListener(this);
    this.windowMenu.addSeparator();
    this.windowMenu.add(item = new JMenuItem("Console", 67));
    item.addActionListener(this);
    add(this.windowMenu);
    
    updateEnabled(false);
  }



  
  public JCheckBoxMenuItem getBreakOnExceptions() {
    return this.breakOnExceptions;
  }



  
  public JCheckBoxMenuItem getBreakOnEnter() {
    return this.breakOnEnter;
  }



  
  public JCheckBoxMenuItem getBreakOnReturn() {
    return this.breakOnReturn;
  }



  
  public JMenu getDebugMenu() {
    return getMenu(2);
  }





  
  public void actionPerformed(ActionEvent e) {
    String cmd = e.getActionCommand();
    String plaf_name = null;
    if (cmd.equals("Metal")) {
      plaf_name = "javax.swing.plaf.metal.MetalLookAndFeel";
    } else if (cmd.equals("Windows")) {
      plaf_name = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    } else if (cmd.equals("Motif")) {
      plaf_name = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
    } else {
      Object source = e.getSource();
      if (source == this.breakOnExceptions) {
        this.debugGui.dim.setBreakOnExceptions(this.breakOnExceptions.isSelected());
      } else if (source == this.breakOnEnter) {
        this.debugGui.dim.setBreakOnEnter(this.breakOnEnter.isSelected());
      } else if (source == this.breakOnReturn) {
        this.debugGui.dim.setBreakOnReturn(this.breakOnReturn.isSelected());
      } else {
        this.debugGui.actionPerformed(e);
      } 
      return;
    } 
    try {
      UIManager.setLookAndFeel(plaf_name);
      SwingUtilities.updateComponentTreeUI(this.debugGui);
      SwingUtilities.updateComponentTreeUI(this.debugGui.dlg);
    } catch (Exception ignored) {}
  }




  
  public void addFile(String url) {
    JMenuItem item;
    int count = this.windowMenu.getItemCount();
    
    if (count == 4) {
      this.windowMenu.addSeparator();
      count++;
    } 
    JMenuItem lastItem = this.windowMenu.getItem(count - 1);
    boolean hasMoreWin = false;
    int maxWin = 5;
    if (lastItem != null && lastItem.getText().equals("More Windows...")) {
      
      hasMoreWin = true;
      maxWin++;
    } 
    if (!hasMoreWin && count - 4 == 5) {
      this.windowMenu.add(item = new JMenuItem("More Windows...", 77));
      item.setActionCommand("More Windows...");
      item.addActionListener(this); return;
    } 
    if (count - 4 <= maxWin) {
      if (hasMoreWin) {
        count--;
        this.windowMenu.remove(lastItem);
      } 
      String shortName = SwingGui.getShortName(url);
      
      this.windowMenu.add(item = new JMenuItem((char)(48 + count - 4) + " " + shortName, 48 + count - 4));
      if (hasMoreWin) {
        this.windowMenu.add(lastItem);
      }
    } else {
      return;
    } 
    item.setActionCommand(url);
    item.addActionListener(this);
  }


  
  public void updateEnabled(boolean interrupted) {
    int i;
    for (i = 0; i != this.interruptOnlyItems.size(); i++) {
      JMenuItem item = this.interruptOnlyItems.get(i);
      item.setEnabled(interrupted);
    } 
    
    for (i = 0; i != this.runOnlyItems.size(); i++) {
      JMenuItem item = this.runOnlyItems.get(i);
      item.setEnabled(!interrupted);
    } 
  }
}
